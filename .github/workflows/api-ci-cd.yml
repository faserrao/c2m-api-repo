name: API Spec, Docs, and Postman CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'openapi/**'
      - 'data_dictionary/**'
      - 'docs/**'
      - 'postman/**'
      - 'scripts/**'
      - 'Makefile'
      - '.github/workflows/api-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'openapi/**'
      - 'data_dictionary/**'
      - 'docs/**'
      - 'postman/**'
      - 'scripts/**'
      - 'Makefile'
      - '.github/workflows/api-ci-cd.yml'
  workflow_dispatch:
    inputs:
      publish_to_postman:
        description: 'Publish to Postman'
        type: boolean
        default: true
      deploy_gh_pages:
        description: 'Deploy to GitHub Pages'
        type: boolean
        default: true

permissions:
  contents: write
  pages: write
  id-token: write

env:
  # Environment configuration
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  OPENAPI_DIR: openapi
  POSTMAN_DIR: postman
  DOCS_DIR: docs
  DATA_DICT_DIR: data_dictionary
  
  # Feature toggles
  PUBLISH_TO_POSTMAN: ${{ github.event.inputs.publish_to_postman || 'true' }}
  DEPLOY_GH_PAGES: ${{ github.event.inputs.deploy_gh_pages || 'true' }}
  
  # Postman configuration
  POSTMAN_API_BASE: https://api.postman.com
  # Note: Workspace is auto-selected by Makefile based on branch
  POSTMAN_SERRAO_API_KEY: ${{ secrets.POSTMAN_SERRAO_API_KEY }}
  POSTMAN_C2M_API_KEY: ${{ secrets.POSTMAN_C2M_API_KEY }}

jobs:
  build:
    name: Build API Spec, Collections, and Docs
    runs-on: ubuntu-latest
    
    steps:
      # ---------- Setup ----------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for diff

      - name: Checkout security repository
        uses: actions/checkout@v4
        with:
          repository: faserrao/c2m-api-v2-security
          path: c2m-api-v2-security
          token: ${{ secrets.SECURITY_REPO_TOKEN }}

      - name: Checkout artifacts repository
        uses: actions/checkout@v4
        with:
          repository: faserrao/c2m-api-artifacts
          path: artifacts-repo
          token: ${{ secrets.SECURITY_REPO_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            scripts/python_env/requirements.txt

      # ---------- Dependencies ----------
      - name: Install Node dependencies
        if: hashFiles('package-lock.json') != ''
        run: npm ci

      - name: Install Python dependencies
        if: hashFiles('requirements.txt') != '' || hashFiles('scripts/python_env/requirements.txt') != ''
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f scripts/python_env/requirements.txt ]; then
            pip install -r scripts/python_env/requirements.txt
          fi

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          # Install Postman CLI
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
          # Add Postman CLI to PATH
          echo "/usr/local/bin" >> $GITHUB_PATH

      # ---------- Environment Info ----------
      - name: Print environment info
        run: |
          echo "🔧 Environment Information:"
          echo "Python: $(python --version)"
          echo "Node: $(node --version)"
          echo "npm: $(npm --version)"
          echo "jq: $(jq --version)"
          echo "curl: $(curl --version | head -n 1)"
          echo "postman: $(which postman || echo 'Not found in PATH')"
          echo "GitHub Event: ${{ github.event_name }}"
          echo "GitHub Ref: ${{ github.ref }}"

      - name: Print Make variables (debug)
        run: make -n print-vars || true

      # ---------- Build Steps ----------
      - name: Build OpenAPI from EBNF
        run: |
          echo "📋 Building OpenAPI spec from EBNF data dictionary..."
          make openapi-build

      - name: Build Postman Collection
        run: |
          echo "📦 Building Postman collection..."
          make postman-collection-build

      - name: Lint OpenAPI Spec
        continue-on-error: true
        run: |
          echo "🔍 Linting OpenAPI spec..."
          make lint || echo "⚠️  Linting completed with warnings"

      - name: Diff OpenAPI Spec
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          echo "📊 Comparing OpenAPI spec changes..."
          make diff || echo "ℹ️  Diff completed"

      - name: Build Documentation
        run: |
          echo "📚 Building API documentation..."
          make docs

      - name: Generate SDKs
        continue-on-error: true
        run: |
          echo "🔧 Generating SDKs..."
          make generate-sdk-all || echo "⚠️  SDK generation not fully implemented yet"

      # ---------- Drift Detection (PRs only) ----------
      - name: Check for uncommitted changes
        if: github.event_name == 'pull_request'
        run: |
          echo "🔍 Checking for uncommitted generated artifacts..."
          if [ -n "$(git status --porcelain ${{ env.OPENAPI_DIR }} ${{ env.POSTMAN_DIR }}/generated ${{ env.DOCS_DIR }})" ]; then
            echo "❌ Error: Generated artifacts are out of sync!"
            echo "Please run the following commands locally and commit the changes:"
            echo "  make openapi-build"
            echo "  make postman-collection-build"
            echo "  make docs"
            echo ""
            echo "Modified files:"
            git status --porcelain ${{ env.OPENAPI_DIR }} ${{ env.POSTMAN_DIR }}/generated ${{ env.DOCS_DIR }}
            exit 1
          else
            echo "✅ All generated artifacts are up to date"
          fi

      # ---------- Publish to Postman (optional) ----------
      - name: Publish to Postman
        if: |
          github.event_name == 'push' && 
          github.ref == 'refs/heads/main' &&
          env.PUBLISH_TO_POSTMAN == 'true'
        env:
          POSTMAN_SERRAO_API_KEY: ${{ secrets.POSTMAN_SERRAO_API_KEY }}
          POSTMAN_C2M_API_KEY: ${{ secrets.POSTMAN_C2M_API_KEY }}
          POSTMAN_TARGET_OVERRIDE: ${{ secrets.POSTMAN_TARGET }}
        run: |
          if [ -z "$POSTMAN_SERRAO_API_KEY" ] && [ -z "$POSTMAN_C2M_API_KEY" ]; then
            echo "⚠️  Skipping Postman publish: No API keys configured"
            echo "   Add POSTMAN_SERRAO_API_KEY and/or POSTMAN_C2M_API_KEY secrets"
          else
            # Read target from file if it exists, otherwise use override or default
            if [ -f .postman-target ]; then
              POSTMAN_TARGET=$(cat .postman-target)
              echo "📄 Using target from .postman-target file: $POSTMAN_TARGET"
            elif [ -n "$POSTMAN_TARGET_OVERRIDE" ]; then
              POSTMAN_TARGET=$POSTMAN_TARGET_OVERRIDE
              echo "🔧 Using target from secret: $POSTMAN_TARGET"
            else
              POSTMAN_TARGET="personal"
              echo "📍 Using default target: $POSTMAN_TARGET"
            fi
            
            echo "🚀 Publishing to Postman workspaces..."
            echo "   Target: $POSTMAN_TARGET"
            echo "   API Keys available: SERRAO=$([ -n "$POSTMAN_SERRAO_API_KEY" ] && echo "Yes" || echo "No"), C2M=$([ -n "$POSTMAN_C2M_API_KEY" ] && echo "Yes" || echo "No")"
            export POSTMAN_SERRAO_API_KEY
            export POSTMAN_C2M_API_KEY
            make workspace-info
            echo ""
            POSTMAN_TARGET=$POSTMAN_TARGET make postman-publish
          fi

      # ---------- Copy artifacts to artifacts repo ----------
      - name: Copy artifacts to artifacts repository
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "📦 Copying artifacts to artifacts repository..."
          # Create directories if they don't exist
          mkdir -p artifacts-repo/openapi
          mkdir -p artifacts-repo/postman/collections
          mkdir -p artifacts-repo/postman/metadata
          mkdir -p artifacts-repo/docs
          mkdir -p artifacts-repo/sdks
          
          # Copy OpenAPI specs
          cp -v ${{ env.OPENAPI_DIR }}/*.yaml artifacts-repo/openapi/ 2>/dev/null || echo "No OpenAPI specs to copy"
          
          # Copy Postman collections
          cp -v ${{ env.POSTMAN_DIR }}/generated/*.json artifacts-repo/postman/collections/ 2>/dev/null || echo "No collections to copy"
          
          # Copy Postman metadata
          cp -v ${{ env.POSTMAN_DIR }}/*.txt artifacts-repo/postman/metadata/ 2>/dev/null || echo "No txt files to copy"
          cp -v ${{ env.POSTMAN_DIR }}/*.json artifacts-repo/postman/metadata/ 2>/dev/null || echo "No json files to copy"
          
          # Copy documentation
          cp -rv ${{ env.DOCS_DIR }}/* artifacts-repo/docs/ 2>/dev/null || echo "No docs to copy"
          
          # Copy SDKs if they exist
          if [ -d "sdk" ]; then
            cp -rv sdk/* artifacts-repo/sdks/ 2>/dev/null || echo "No SDKs to copy"
          fi
          
          echo "✅ Artifacts copied successfully"

      # ---------- Commit and push to artifacts repo ----------
      - name: Commit and push artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: artifacts-repo
        run: |
          git config user.name "c2m-api-bot"
          git config user.email "c2m-api-bot@users.noreply.github.com"
          
          # Add all changes
          git add .
          
          # Create commit message with build info
          COMMIT_MSG="Build #${{ github.run_number }}: Update from ${{ github.event.head_commit.message }}"
          COMMIT_DESC="Source commit: ${{ github.sha }}
          Workflow: ${{ github.workflow }}
          Triggered by: ${{ github.actor }}"
          
          # Commit (don't fail if no changes)
          git commit -m "$COMMIT_MSG" -m "$COMMIT_DESC" || {
            echo "No changes to commit"
            exit 0
          }
          
          # Push to artifacts repo
          git push origin main

      # ---------- Upload artifacts ----------
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-artifacts
          path: |
            ${{ env.OPENAPI_DIR }}/c2mapiv2-openapi-spec-final.yaml
            ${{ env.OPENAPI_DIR }}/bundled.yaml
            ${{ env.POSTMAN_DIR }}/generated/*.json
            ${{ env.DOCS_DIR }}/index.html
            ${{ env.DOCS_DIR }}/site/**
            ${{ env.DOCS_DIR }}/swagger/**

      # ---------- Prepare GitHub Pages ----------
      - name: Setup Pages
        if: env.DEPLOY_GH_PAGES == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload GitHub Pages artifact
        if: env.DEPLOY_GH_PAGES == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  # ---------- Deploy to GitHub Pages ----------
  deploy-pages:
    name: Deploy to GitHub Pages
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' &&
      needs.build.result == 'success'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # ---------- Summary ----------
  summary:
    name: Workflow Summary
    if: always()
    needs: [build, deploy-pages]
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate summary
        run: |
          echo "## 📊 CI/CD Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build status
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment status
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "### Deployments" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.deploy-pages.result }}" == "success" ]; then
              echo "✅ GitHub Pages deployment successful" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.deploy-pages.result }}" == "skipped" ]; then
              echo "⏭️  GitHub Pages deployment skipped" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ GitHub Pages deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Links
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Download Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> $GITHUB_STEP_SUMMARY