# ========================================================================
# SMART REBUILD SYSTEM WITH CASCADE CHANGE DETECTION
# ========================================================================
# This file contains all smart rebuild functionality extracted from the main Makefile
# Include this file in your main Makefile with: include makefile.smart

# Directory for storing build hashes
HASH_DIR := .build-hashes

# Hash files for tracking changes
DD_HASH_FILE := $(HASH_DIR)/data-dictionary.hash
OPENAPI_HASH_FILE := $(HASH_DIR)/openapi-spec.hash
POSTMAN_COLLECTION_HASH_FILE := $(HASH_DIR)/postman-collection.hash
SDK_HASH_FILE := $(HASH_DIR)/sdk.hash
DOCS_HASH_FILE := $(HASH_DIR)/docs.hash

# Function to calculate hash of a file
define calculate_hash
	if [ -f "$(1)" ]; then \
		if command -v md5sum >/dev/null 2>&1; then \
			md5sum "$(1)" | cut -d' ' -f1; \
		elif command -v md5 >/dev/null 2>&1; then \
			md5 -q "$(1)"; \
		else \
			echo "ERROR: No MD5 tool found"; \
			exit 1; \
		fi \
	else \
		echo "FILE_NOT_FOUND"; \
	fi
endef

# Function to check if file has changed
define has_changed
	mkdir -p $(HASH_DIR); \
	CURRENT_HASH=$$($(call calculate_hash,$(1))); \
	if [ -f "$(2)" ]; then \
		STORED_HASH=$$(cat "$(2)"); \
		if [ "$$CURRENT_HASH" != "$$STORED_HASH" ]; then \
			echo "true"; \
		else \
			echo "false"; \
		fi \
	else \
		echo "true"; \
	fi
endef

# Function to update hash file
define update_hash
	mkdir -p $(HASH_DIR); \
	CURRENT_HASH=$$($(call calculate_hash,$(1))); \
	echo "$$CURRENT_HASH" > "$(2)"
endef

# Smart rebuild target - main entry point
.PHONY: smart-rebuild
smart-rebuild:
	@echo "🧠 Starting smart rebuild with cascade change detection..."
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	
	# Check data dictionary changes
	@DD_CHANGED=$$($(call has_changed,$(DD_EBNF_FILE),$(DD_HASH_FILE))); \
	if [ "$$DD_CHANGED" = "true" ]; then \
		echo "📝 Data dictionary changed - regenerating OpenAPI spec..."; \
		$(MAKE) smart-rebuild-openapi; \
	else \
		echo "✅ Data dictionary unchanged - checking OpenAPI spec..."; \
		$(MAKE) smart-check-openapi; \
	fi

# Rebuild OpenAPI spec from data dictionary
.PHONY: smart-rebuild-openapi
smart-rebuild-openapi:
	@echo "🔄 Generating OpenAPI spec from data dictionary..."
	
	# Save old spec for comparison if it exists
	@if [ -f "$(C2MAPIV2_OPENAPI_SPEC)" ]; then \
		cp "$(C2MAPIV2_OPENAPI_SPEC)" "$(C2MAPIV2_OPENAPI_SPEC).old"; \
	fi
	
	# Generate new spec
	$(MAKE) generate-openapi-spec-from-dd
	
	# Update data dictionary hash
	$(call update_hash,$(DD_EBNF_FILE),$(DD_HASH_FILE))
	
	# Show diff if old spec exists
	@if [ -f "$(C2MAPIV2_OPENAPI_SPEC).old" ]; then \
		echo ""; \
		echo "📊 OpenAPI Spec Changes:"; \
		diff -u "$(C2MAPIV2_OPENAPI_SPEC).old" "$(C2MAPIV2_OPENAPI_SPEC)" | head -50 || true; \
		rm -f "$(C2MAPIV2_OPENAPI_SPEC).old"; \
		echo ""; \
	fi
	
	@echo "✅ OpenAPI spec regenerated"
	
	# Check downstream
	$(MAKE) smart-check-openapi

# Check if OpenAPI spec changed and trigger downstream rebuilds
.PHONY: smart-check-openapi
smart-check-openapi:
	@OPENAPI_CHANGED=$$($(call has_changed,$(C2MAPIV2_OPENAPI_SPEC),$(OPENAPI_HASH_FILE))); \
	if [ "$$OPENAPI_CHANGED" = "true" ]; then \
		echo "📋 OpenAPI spec changed - updating downstream artifacts..."; \
		$(call update_hash,$(C2MAPIV2_OPENAPI_SPEC),$(OPENAPI_HASH_FILE)); \
		$(MAKE) smart-rebuild-postman; \
		$(MAKE) smart-rebuild-sdk; \
		$(MAKE) smart-rebuild-docs; \
	else \
		echo "✅ OpenAPI spec unchanged - no downstream updates needed"; \
		echo "🎉 Smart rebuild complete - everything is up to date!"; \
	fi

# Rebuild Postman collections
.PHONY: smart-rebuild-postman
smart-rebuild-postman:
	@echo "🔄 Rebuilding Postman collections..."
	
	# Save old collection for comparison if it exists
	@if [ -f "$(POSTMAN_COLLECTION_FINAL)" ]; then \
		cp "$(POSTMAN_COLLECTION_FINAL)" "$(POSTMAN_COLLECTION_FINAL).old"; \
	fi
	
	# Rebuild collections
	$(MAKE) postman-collection-build
	$(MAKE) postman-collection-build-test-with-jwt
	
	# Update hash
	$(call update_hash,$(POSTMAN_COLLECTION_FINAL),$(POSTMAN_COLLECTION_HASH_FILE))
	
	# Show what changed
	@if [ -f "$(POSTMAN_COLLECTION_FINAL).old" ]; then \
		echo ""; \
		echo "📊 Collection Changes Summary:"; \
		OLD_COUNT=$$(grep -c '"name"' "$(POSTMAN_COLLECTION_FINAL).old" 2>/dev/null || echo "0"); \
		NEW_COUNT=$$(grep -c '"name"' "$(POSTMAN_COLLECTION_FINAL)" 2>/dev/null || echo "0"); \
		echo "  Endpoints: $$OLD_COUNT → $$NEW_COUNT"; \
		rm -f "$(POSTMAN_COLLECTION_FINAL).old"; \
		echo ""; \
	fi
	
	@echo "✅ Postman collections rebuilt"

# Rebuild SDK
.PHONY: smart-rebuild-sdk  
smart-rebuild-sdk:
	@echo "🔄 Rebuilding SDK..."
	
	# Check if SDK generation is configured
	@if [ -x "$(SCRIPTS_DIR)/utilities/generate-sdk.sh" ]; then \
		echo "  Generating TypeScript SDK..."; \
		$(MAKE) generate-sdk; \
		echo "  SDK files generated"; \
	else \
		echo "  ⚠️  SDK generation script not found - skipping"; \
	fi
	
	# Update hash (hash all SDK files)
	@find sdk -name "*.py" -o -name "*.js" -o -name "*.java" | sort | xargs cat | \
		(if command -v shasum >/dev/null 2>&1; then shasum -a 256; else sha256sum; fi) | \
		cut -d' ' -f1 > $(SDK_HASH_FILE)
	
	# Show what changed
	@if [ -d "sdk" ]; then \
		echo ""; \
		echo "📊 SDK Changes:"; \
		echo "  Files: $$(find sdk -name '*.py' -o -name '*.js' -o -name '*.java' | wc -l)"; \
		echo "  Lines: $$(find sdk -name '*.py' -o -name '*.js' -o -name '*.java' | xargs wc -l | tail -1 | awk '{print $$1}')"; \
		echo ""; \
	fi
	
	@echo "✅ SDK rebuilt"

# Rebuild documentation
.PHONY: smart-rebuild-docs
smart-rebuild-docs:
	@echo "🔄 Rebuilding documentation..."
	
	# Generate docs
	$(MAKE) docs
	
	# Update hash (hash the OpenAPI spec since docs are generated from it)
	$(call update_hash,$(C2MAPIV2_OPENAPI_SPEC),$(DOCS_HASH_FILE))
	
	@echo "✅ Documentation rebuilt"

# Show current build state
.PHONY: smart-rebuild-status
smart-rebuild-status:
	@echo "📊 Smart Rebuild Status"
	@echo "━━━━━━━━━━━━━━━━━━━━━━"
	@echo ""
	@echo "Data Dictionary:"
	@if [ -f "$(DD_HASH_FILE)" ]; then \
		echo "  Last build: $$(stat -f '%Sm' $(DD_HASH_FILE) 2>/dev/null || stat -c '%y' $(DD_HASH_FILE) 2>/dev/null | cut -d' ' -f1-2)"; \
		echo "  Hash: $$(head -c 12 $(DD_HASH_FILE))..."; \
	else \
		echo "  Status: Never built"; \
	fi
	@echo ""
	@echo "OpenAPI Spec:"
	@if [ -f "$(OPENAPI_HASH_FILE)" ]; then \
		echo "  Last build: $$(stat -f '%Sm' $(OPENAPI_HASH_FILE) 2>/dev/null || stat -c '%y' $(OPENAPI_HASH_FILE) 2>/dev/null | cut -d' ' -f1-2)"; \
		echo "  Hash: $$(head -c 12 $(OPENAPI_HASH_FILE))..."; \
	else \
		echo "  Status: Never built"; \
	fi
	@echo ""
	@echo "Postman Collection:"
	@if [ -f "$(POSTMAN_COLLECTION_HASH_FILE)" ]; then \
		echo "  Last build: $$(stat -f '%Sm' $(POSTMAN_COLLECTION_HASH_FILE) 2>/dev/null || stat -c '%y' $(POSTMAN_COLLECTION_HASH_FILE) 2>/dev/null | cut -d' ' -f1-2)"; \
		echo "  Hash: $$(head -c 12 $(POSTMAN_COLLECTION_HASH_FILE))..."; \
	else \
		echo "  Status: Never built"; \
	fi
	@echo ""
	@echo "SDK:"
	@if [ -f "$(SDK_HASH_FILE)" ]; then \
		echo "  Last build: $$(stat -f '%Sm' $(SDK_HASH_FILE) 2>/dev/null || stat -c '%y' $(SDK_HASH_FILE) 2>/dev/null | cut -d' ' -f1-2)"; \
		echo "  Hash: $$(head -c 12 $(SDK_HASH_FILE))..."; \
	else \
		echo "  Status: Never built"; \
	fi
	@echo ""
	@echo "Documentation:"
	@if [ -f "$(DOCS_HASH_FILE)" ]; then \
		echo "  Last build: $$(stat -f '%Sm' $(DOCS_HASH_FILE) 2>/dev/null || stat -c '%y' $(DOCS_HASH_FILE) 2>/dev/null | cut -d' ' -f1-2)"; \
		echo "  Hash: $$(head -c 12 $(DOCS_HASH_FILE))..."; \
	else \
		echo "  Status: Never built"; \
	fi

# Clean hash files (forces full rebuild next time)
.PHONY: smart-rebuild-clean
smart-rebuild-clean:
	@echo "🧹 Cleaning smart rebuild hash files..."
	rm -rf $(HASH_DIR)
	@echo "✅ Hash files cleaned - next smart-rebuild will rebuild everything"

# Check what would be rebuilt without actually doing it
.PHONY: smart-rebuild-dry-run
smart-rebuild-dry-run:
	@echo "🔍 Smart Rebuild Dry Run"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━"
	@echo ""
	@DD_CHANGED=$$($(call has_changed,$(DD_EBNF_FILE),$(DD_HASH_FILE))); \
	if [ "$$DD_CHANGED" = "true" ]; then \
		echo "❗ Data Dictionary: Would rebuild (changed)"; \
		echo "   → OpenAPI Spec: Would rebuild (cascade)"; \
		echo "   → Postman Collections: Would rebuild (cascade)"; \
		echo "   → SDK: Would rebuild (cascade)"; \
		echo "   → Documentation: Would rebuild (cascade)"; \
	else \
		echo "✅ Data Dictionary: No changes"; \
		OPENAPI_CHANGED=$$($(call has_changed,$(C2MAPIV2_OPENAPI_SPEC),$(OPENAPI_HASH_FILE))); \
		if [ "$$OPENAPI_CHANGED" = "true" ]; then \
			echo "❗ OpenAPI Spec: Would rebuild (changed)"; \
			echo "   → Postman Collections: Would rebuild (cascade)"; \
			echo "   → SDK: Would rebuild (cascade)"; \
			echo "   → Documentation: Would rebuild (cascade)"; \
		else \
			echo "✅ OpenAPI Spec: No changes"; \
			echo "✅ Postman Collections: No rebuild needed"; \
			echo "✅ SDK: No rebuild needed"; \
			echo "✅ Documentation: No rebuild needed"; \
		fi \
	fi