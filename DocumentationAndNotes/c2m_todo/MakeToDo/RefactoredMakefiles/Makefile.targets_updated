# === DIRECTORIES ===
SCRIPTS_DIR          := scripts
DOCS_DIR             := $(DOCS_DIR)
TEMPLATES_DIR        := $(DOCS_DIR)/templates
POSTMAN_DIR          := postman
POSTMAN_GEN_DIR      := $(POSTMAN_DIR)/generated
POSTMAN_CUSTOM_DIR   := $(POSTMAN_DIR)/custom
OPENAPI_DIR          := openapi
DATA_DICT_DIR        := DataDictionary
PYTHON_ENV_DIR       := $(SCRIPTS_DIR)/python_env

# === FILES ===
EBNF_SCRIPT_SHORT    := ebnf_to_openapi_class_based.py
EBNF_FILE            := $(DATA_DICT_DIR)/c2m-api-v2-dd.ebnf
OPENAPI_SPEC         := $(OPENAPI_DIR)/c2m_openapi_spec_final.yaml
PREVIOUS_SPEC        := $(OPENAPI_DIR)/tmp_previous_spec.yaml
MAIN_SPEC_PATH       := origin/main:$(OPENAPI_SPEC)

ENV_FILE             := $(POSTMAN_DIR)/mock-env.json
OVERRIDE_JSON        := $(POSTMAN_CUSTOM_DIR)/overrides.json
MOCK_URL_FILE_POSTMAN:= $(POSTMAN_DIR)/mock_url.txt
MOCK_URL_FILE_PRISM  := $(POSTMAN_DIR)/prism_mock_url.txt
POSTMAN_API_UID_FILE := $(POSTMAN_DIR)/postman_api_uid.txt
POSTMAN_API_VER_FILE := $(POSTMAN_DIR)/postman_api_version.txt
REPORT_HTML          := $(POSTMAN_DIR)/newman-report.html

COLLECTION_RAW       := $(POSTMAN_GEN_DIR)/c2m.collection.json
COLLECTION_FINAL     := $(POSTMAN_GEN_DIR)/c2m.collection.merged.json
COLLECTION_FIXED     := $(POSTMAN_GEN_DIR)/c2m.collection.fixed.json
COLLECTION_TMP       := $(POSTMAN_GEN_DIR)/c2m.collection.tmp.json
COLLECTION_WITH_EXAMPLES := $(POSTMAN_GEN_DIR)/c2m.collection.with.examples.json
COLLECTION_WITH_TESTS    := $(POSTMAN_GEN_DIR)/c2m.collection.with.tests.json
POSTMAN_COLLECTION_UID_FILE := $(POSTMAN_DIR)/postman_collection_uid.txt

POSTMAN_IMPORT_DEBUG := $(POSTMAN_DIR)/import-debug.json
POSTMAN_LINK_PAYLOAD := $(POSTMAN_DIR)/link-payload.json
POSTMAN_LINK_DEBUG   := $(POSTMAN_DIR)/link-debug.json
POSTMAN_VERSION_PAYLOAD := $(POSTMAN_DIR)/version-payload.json
POSTMAN_VERSION_DEBUG   := $(POSTMAN_DIR)/version-debug.json
POSTMAN_SCHEMA_UID_FILE := $(POSTMAN_DIR)/schema_uid.txt

# === SCRIPTS ===
FIX_PATHS_SCRIPT     := $(SCRIPTS_DIR)/fix_paths.jq
MERGE_SCRIPT         := $(SCRIPTS_DIR)/merge.jq
ADD_EXAMPLES_SCRIPT  := $(SCRIPTS_DIR)/generate_test_data.py
ADD_TESTS_SCRIPT     := $(SCRIPTS_DIR)/add_tests.jq
URL_HARDFIX_SCRIPT   := $(SCRIPTS_DIR)/url_hardfix.jq

# === PYTHON VIRTUAL ENVIRONMENT ===
VENV_DIR             := $(PYTHON_ENV_DIR)/e2o.venv
VENV_PIP             := $(VENV_DIR)/bin/pip
VENV_PYTHON          := $(VENV_DIR)/bin/python
PYTHON3              := python3

# === TOKENS & BASE URL ===
TOKEN_RAW            := $(shell [ -f $(ENV_FILE) ] && jq -r '.values[] | select(.key=="token") | .value' $(ENV_FILE))
TOKEN                := $(if $(TOKEN_RAW),$(TOKEN_RAW),dummy-token)

BASE_URL_RAW         := $(shell [ -f $(ENV_FILE) ] && jq -r '.values[] | select(.key=="baseUrl") | .value' $(ENV_FILE))
BASE_URL             := $(if $(BASE_URL_RAW),$(BASE_URL_RAW),https://mock.api)

# === MOCK URLS ===
POSTMAN_MOCK_URL     := $(shell cat $(MOCK_URL_FILE_POSTMAN) 2>/dev/null || echo "https://mock.api")
PRISM_MOCK_URL       := $(shell cat $(MOCK_URL_FILE_PRISM)   2>/dev/null || echo "http://localhost:$(PRISM_PORT)")

# === TOOLS ===
POSTMAN              := postman
GENERATOR_OFFICIAL   := npx openapi-to-postmanv2
MERGER               := node $(SCRIPTS_DIR)/merge-postman.js
PRISM                := npx @stoplight/prism-cli
NEWMAN               := npx newman
REDOCLY              := npx @redocly/cli
SPECTRAL             := npx @stoplight/spectral-cli
SWAGGER              := npx swagger-cli
WIDDERSHINS          := npx widdershins

# === PRISM ===
PRISM_PORT           := 4010

# === POSTMAN SETTINGS ===
POSTMAN_WS           := d8a1f479-a2aa-4471-869e-b12feea0a98c
POSTMAN_API_KEY      := PMAK-68778f2760d869000141987d-201b86a94c0d51d6159052abb42875a0b1
POSTMAN_API_NAME     := C2M API
POSTMAN_API_VERSION  := v1.0.0
MONITOR_NAME         := C2M API Hourly Monitor


# ============================
#         INSTALLATION
# ============================

check-mock:
	echo $(PRISM_MOCK_URL)

.PHONY: install
install:
	brew install openapi-diff || echo "✅ openapi-diff already installed or handled"
	npm install \
	openapi-to-postmanv2 \
	@redocly/cli \
	@stoplight/spectral-cli \
	@stoplight/prism-cli \
	newman newman-reporter-html \
	swagger-ui-dist \
	swagger-cli widdershins lodash || echo "✅ npm packages installed or already available"


# --- Make sure to use constants for all hardcoded file and dir names. ---
# --- Generate Docs. ---
# --- Modify Collection to include Examples/Test Data ---
# --- Generate SDKs ---
# --- Naming Conventions ---
# --- Check the diff command for naming and constant names ---
# --- --data-binary @- | jq -r '.collection.uid'); \ ????


.PHONY: generate-openapi-spec-from-dd
generate-openapi-spec-from-dd:
	@echo "📤 Converting the EBNF Data Dictionary to an OpenAPI YAML Specification."

	# --- Validate required files and script ---
	@if [ ! -f $(SCRIPTS_DIR)/$(EBNF_SCRIPT_SHORT) ]; then \
		echo "❌ Script not found: $(SCRIPTS_DIR)/$(EBNF_SCRIPT_SHORT)"; exit 1; \
	fi
	@if [ ! -f $(EBNF_FILE) ]; then \
		echo "❌ EBNF Data Dictionary not found: $(EBNF_FILE)"; exit 1; \
	fi

	# --- Install Python dependencies ---
	@echo "📤 Installing required Python modules..."
	$(VENV_PIP) install -r $(SCRIPTS_DIR)/python_env/requirements.txt

	# --- Run the conversion script ---
	@echo "📤 Running Conversion Script: $(EBNF_SCRIPT_SHORT) on $(EBNF_FILE) outputting: $(OPENAPI_SPEC)"
	$(VENV_PYTHON) $(SCRIPTS_DIR)/$(EBNF_SCRIPT_SHORT) -o $(OPENAPI_SPEC) $(EBNF_FILE) 


#============================
#         OPENAPI
# ============================

.PHONY: lint
lint:
	$(REDOCLY) lint $(SPEC)
	$(SPECTRAL) lint $(SPEC)


.PHONY: diff
diff:
	@echo "📤 Fetching latest from origin/main…"
	git fetch origin
	@echo "🧾 Checking out previous version of spec for diff comparison…"
	git show $(MAIN_SPEC_PATH) > $(PREVIOUS_SPEC)
	@echo "🔍 Running openapi-diff…"
	openapi-diff $(PREVIOUS_SPEC) $(SPEC) --fail-on-incompatible


.PHONY: clean-diff
clean-diff:
	rm -f $(PREVIOUS_SPEC)

# ============================
#        POSTMAN TASKS
# ============================


# === POSTMAN TARGETS ===

# --- LOGIN ---
.PHONY: postman-login postman-mock postman-env-create
.PHONY: postman-login
postman-login:
	@echo "🔐 Logging in to Postman..."
	@postman login --with-api-key $(POSTMAN_API_KEY)


# --- Import OpenAPI definition into Postman ---
.PHONY: postman-api-import
postman-api-import:
	@echo "📥 Importing OpenAPI definition $(SPEC) into Postman workspace $(POSTMAN_WS)..."
	@API_RESPONSE=$$(curl --location --request POST "https://api.getpostman.com/apis?workspaceId=$(POSTMAN_WS)" \
		--header "X-Api-Key: $(POSTMAN_API_KEY)" \
		--header "Authorization: Bearer $(POSTMAN_API_KEY)" \
		--header "Accept: application/vnd.api.v10+json" \
		--header "Content-Type: application/json" \
		--data "$$(jq -Rs --arg name '$(POSTMAN_API_NAME)' '{ name: $$name, schema: { type: "openapi3", language: "yaml", schema: . }}' $(SPEC))"); \
		echo "$$API_RESPONSE" | jq . > postman/import-debug.json || echo "$$API_RESPONSE" > postman/import-debug.json; \
		API_ID=$$(echo "$$API_RESPONSE" | jq -r '.id // empty'); \
		if [ -z "$$API_ID" ]; then \
			echo "❌ Failed to import API. Check postman/import-debug.json for details."; \
			exit 1; \
		else \
			echo "✅ Imported API with ID: $$API_ID"; \
			echo "$$API_ID" > $(POSTMAN_API_UID_FILE); \
			echo "📄 API ID saved to $(POSTMAN_API_UID_FILE)"; \
		fi

POSTMAN_API_UID_FILE := $(POSTMAN_API_UID_FILE)
POSTMAN_API_VER_FILE := postman/postman_api_version.txt
POSTMAN_API_VERSION  := v1.0.0

## --- Create API Version ---
.PHONY: postman-api-create-version
postman-api-create-version:
	@echo "t� Creaing  APIversion $and publishing schean.."
	@if [ ! -f postman/schema_uid.txt ]; then \
		echo "❌ Missing schema UID file: postman/schema_uid.txt. Run postman-api-upload-schema first."; exit 1; \
	fi
	@API_ID=$$(cat $(POSTMAN_API_UID_FILE)); \
	SCHEMA_ID=$$(cat postman/schema_uid.txt); \
	jVERSION_NAME="v1"; \
	jjq -n --arg name "$$VERSION_NAME" --arg schemaId "$$SCHEMA_ID" \
 		'{ name: $$name, schemas: [ { id: $$schemaId } ] }' > postman/version-payload.json; \
	curl --silent --location --request POST "https://api.getpostman.com/apis/$$API_ID/versions" \
		header "X-Api-Key: $(POSTMAN_API_KEY)" \
		--header "Content-Type: application/json" \
		--header "Accept: application/vnd.api.v10+json" \
		--data-binary @postman/version-payload.json | tee postman/version-debug.json; \
	if grep -q '"id"' postman/version-debug.json; then \
		echo "✅ API version created successfully."; \
	else \
		echo "❌ Failed to create API version. Check postman/version-debug.json for details."; exit 1; \
	fi


.PHONY: postman-collection-generate
postman-collection-generate:
	@echo "📦 Generating Postman collection from $(SPEC)..."
	$(GENERATOR_OFFICIAL) -s $(SPEC) -o $(COLLECTION_RAW) -p
	@echo "🛠 Adding 'info' block to collection..."
	@jq '. as $$c | {info: {name: "C2M Test Collection", schema: "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"}, item: $$c.item}' \
		$(COLLECTION_RAW) > postman/generated/c2m.collection.tmp.json
	@mv postman/generated/c2m.collection.tmp.json $(COLLECTION_RAW)
	@echo "✅ Collection generated with 'info' block at $(COLLECTION_RAW)"




.PHONY: postman-collection-fix-paths
postman-collection-fix-paths:
	@echo "🔧 Fixing path casing in Postman collection..."
	jq -f scripts/fix_paths.jq $(COLLECTION_FIXED) > $(COLLECTION_FIXED).tmp
	mv $(COLLECTION_FIXED).tmp $(COLLECTION_FIXED)
	@echo "✅ Paths corrected to match OpenAPI spec."









# --- Upload Postman collection ---
.PHONY: postman-collection-upload
postman-collection-upload:
	@echo "📤 Uploading Postman collection $(COLLECTION_RAW) to workspace $(POSTMAN_WS)..."
	@COLL_UID=$$(jq -c '{collection: .}' $(COLLECTION_RAW) | \
		curl --silent --location --request POST "https://api.getpostman.com/collections?workspace=$(POSTMAN_WS)" \
			--header "X-Api-Key: $(POSTMAN_API_KEY)" \
			--header "Accept: application/vnd.api.v10+json" \
			--header "Content-Type: application/json" \
			--data-binary @- | jq -r '.collection.uid'); \
	if [ "$$COLL_UID" = "null" ] || [ -z "$$COLL_UID" ]; then \
		echo "❌ Failed to upload collection"; exit 1; \
	else \
		echo "✅ Collection uploaded with UID: $$COLL_UID"; \
		echo $$COLL_UID > postman/postman_collection_uid.txt; \
	fi


# --- Link collection to API version ---
.PHONY: postman-collection-link
postman-collection-link:
	@echo "🔗 Linking collection to API $(POSTMAN_API_NAME)..."
	@if [ ! -f $(POSTMAN_API_UID_FILE) ]; then \
		echo "❌ Missing API UID file: $(POSTMAN_API_UID_FILE). Run postman-api-import first."; exit 1; \
	fi
	@if [ ! -f postman/postman_collection_uid.txt ]; then \
		echo "❌ Missing collection UID file. Run postman-collection-upload first."; exit 1; \
	fi
	@API_ID=$$(cat $(POSTMAN_API_UID_FILE)); \
	COLL_UID=$$(cat postman/postman_collection_uid.txt); \
	echo "🔗 Copying and linking collection $$COLL_UID to API $$API_ID..."; \
	jq -n --arg coll "$$COLL_UID" '{operationType: "COPY_COLLECTION", data: {collectionId: $$coll}}' > postman/link-payload.json; \
	curl --location --request POST "https://api.getpostman.com/apis/$$API_ID/collections" \
		--header "X-Api-Key: $(POSTMAN_API_KEY)" \
		--header "Authorization: Bearer $(POSTMAN_API_KEY)" \
		--header "Accept: application/vnd.api.v10+json" \
		--header "Content-Type: application/json" \
		--data-binary @postman/link-payload.json | tee postman/link-debug.json


# --- Merge Overrides (Safe Deep Merge) ---
.PHONY: postman-collection-merge-overrides
postman-collection-merge-overrides:
	@echo "🔀 Safely merging overrides from $(OVERRIDE_JSON) into $(COLLECTION_RAW)..."
	@if [ ! -f $(COLLECTION_RAW) ]; then \
		echo "❌ Base collection $(COLLECTION_RAW) not found. Run postman-collection-generate first."; \
		exit 1; \
	fi
	@if [ ! -f $(OVERRIDE_JSON) ]; then \
		echo "⚠️  No override file found at $(OVERRIDE_JSON). Skipping overrides."; \
		cp $(COLLECTION_RAW) $(COLLECTION_FINAL); \
		echo "✅ No overrides applied. Copied $(COLLECTION_RAW) to $(COLLECTION_FINAL)"; \
		exit 0; \
	fi
	@jq -s -f scripts/merge.jq $(COLLECTION_RAW) $(OVERRIDE_JSON) > $(COLLECTION_FINAL)
	@echo "✅ Safe deep merge completed. Output written to $(COLLECTION_FINAL)"



# --- Add Examples/Test Data ---
# --- Add Examples/Test Data ---
.PHONY: postman-collection-add-examples
postman-collection-add-examples:
	@echo "🧩 Adding smart example data to Postman collection..."
	@if [ ! -f $(COLLECTION_FINAL) ]; then \
		echo "⚠️  $(COLLECTION_FINAL) not found. Run postman-collection-merge-overrides first."; exit 1; \
	fi
	@python3 scripts/generate_test_data.py $(COLLECTION_FINAL) $(COLLECTION_WITH_EXAMPLES)
	@echo "✅ Examples added and saved to $(COLLECTION_WITH_EXAMPLES)"


.PHONY: postman-collection-validate
postman-collection-validate:
	@echo "🔍 Validating Postman collection $(COLLECTION_FINAL)..."
	@node -e "const { Collection } = require('postman-collection'); \
	const fs = require('fs'); \
	const file = '$(COLLECTION_FINAL)'; \
	const data = JSON.parse(fs.readFileSync(file, 'utf8')); \
	new Collection(data); \
	console.log('✅ Collection', file, 'is valid.');"


# --- Auto-fix invalid collection items ---
.PHONY: postman-collection-auto-fix
postman-collection-auto-fix:
	@echo "🛠 Auto-fixing invalid items in $(COLLECTION_WITH_EXAMPLES)..."
	@if [ ! -f $(COLLECTION_WITH_EXAMPLES) ]; then \
		echo "❌ Collection file not found: $(COLLECTION_WITH_EXAMPLES)"; \
		exit 1; \
	fi
	@jq 'walk( \
		if type == "object" and (has("name") and (has("request") | not) and (has("item") | not)) \
		then . + { "item": [] } \
		else . \
		end \
	)' $(COLLECTION_WITH_EXAMPLES) > $(COLLECTION_FIXED)
	@echo "✅ Auto-fix complete. Fixed collection saved to $(COLLECTION_FIXED)"
	@echo "🔍 Validating fixed collection..."
	@node -e "const {Collection}=require('postman-collection'); \
		const fs=require('fs'); \
		const data=JSON.parse(fs.readFileSync('$(COLLECTION_FIXED)','utf8')); \
		try { new Collection(data); console.log('✅ Collection is valid.'); } \
		catch(e) { console.error('❌ Validation failed:', e.message); process.exit(1); }"


.PHONY: postman-collection-add-tests
postman-collection-add-tests:
	@echo "🧪 Adding default Postman tests to collection with examples..."
	@if [ ! -f $(COLLECTION_WITH_EXAMPLES) ]; then \
		echo "⚠️  $(COLLECTION_WITH_EXAMPLES) not found. Run postman-collection-add-examples first."; exit 1; \
	fi
	jq \
	  --arg test1 'pm.test("Status code is 200", function () { pm.response.to.have.status(200); });' \
	  --arg test2 'pm.test("Response time < 1s", function () { pm.expect(pm.response.responseTime).to.be.below(1000); });' \
	  -f scripts/add_tests.jq \
	  $(COLLECTION_WITH_EXAMPLES) > $(COLLECTION_WITH_TESTS)
	@echo "✅ Tests added to $(COLLECTION_WITH_TESTS)"


.PHONY: postman-collection-patch
postman-collection-patch:
	@echo "🔧 Patching Postman collection to ensure {{baseUrl}} is used for all hosts..."
	@if [ ! -f $(COLLECTION_FIXED) ]; then \
		echo "❌ Missing collection file: $(COLLECTION_FIXED)"; \
		exit 1; \
	fi
	jq 'walk(if type == "object" and has("url") and (.url.host[0] | tostring | test("undefined")) then .url.host = ["{{baseUrl}}"] else . end)' $(COLLECTION_FIXED) > $(COLLECTION_FIXED).patched
	mv $(COLLECTION_FIXED).patched $(COLLECTION_FIXED)
	@echo "✅ Patched $(COLLECTION_FIXED) to replace undefined hosts with {{baseUrl}}"


# --- Upload a collection for testing (unlinked) ---
.PHONY: postman-collection-upload-test
postman-collection-upload-test:
	@echo "===== DEBUG: Postman Collection Upload Test Variables ====="
	@echo "POSTMAN_API_KEY: $(POSTMAN_API_KEY)"
	@echo "POSTMAN_WS: $(POSTMAN_WS)"
	@echo "COLLECTION_FIXED: $(COLLECTION_FIXED)"
	@echo "==========================================================="
	@if [ ! -f $(COLLECTION_FIXED) ]; then \
		echo "⚠️  $(COLLECTION_FIXED) not found. Run postman-collection-auto-fix first."; exit 1; \
	fi
	@echo "📦 Using collection: $(COLLECTION_FIXED)"
	@RESPONSE=$$(jq -c '{collection: .}' $(COLLECTION_FIXED) | \
		curl --silent --location --request POST "https://api.getpostman.com/collections?workspace=$(POSTMAN_WS)" \
			--header "X-Api-Key: $(POSTMAN_API_KEY)" \
			--header "Accept: application/vnd.api.v10+json" \
			--header "Content-Type: application/json" \
			--data-binary @-); \
		echo "$$RESPONSE" | jq . > postman/upload-test-debug.json || echo "$$RESPONSE" > postman/upload-test-debug.json; \
		COLL_UID=$$(echo "$$RESPONSE" | jq -r '.collection.uid // empty'); \
		if [ -z "$$COLL_UID" ] || [ "$$COLL_UID" = "null" ]; then \
			echo "❌ Failed to upload test collection. Check postman/upload-test-debug.json for details."; \
			exit 1; \
		else \
			echo "✅ TEST Collection uploaded with UID: $$COLL_UID"; \
			echo $$COLL_UID > postman/postman_test_collection_uid.txt; \
			echo "📄 UID saved to postman/postman_test_collection_uid.txt"; \
		fi


# --- Full Build Pipeline for Postman Collection ---
.PHONY: postman-collection-build
postman-collection-build:
	@echo "🚀 Starting full Postman collection build..."
	$(MAKE) postman-collection-generate
	$(MAKE) postman-collection-fix
	$(MAKE) postman-collection-merge-overrides
	$(MAKE) postman-collection-fix-merged
	$(MAKE) postman-collection-add-examples || echo "⚠️  Skipping examples (optional step)."
	$(MAKE) postman-collection-add-tests || echo "⚠️  Skipping adding tests (optional step)."
	$(MAKE) postman-collection-auto-fix || echo "⚠️  Skipping auto-fix (optional step)."
	$(MAKE) postman-collection-url-hardfix
	$(MAKE) postman-collection-patch
	$(MAKE) postman-collection-validate
	@echo "✅ Postman collection build completed: $(COLLECTION_FINAL)"


# === MOCK & TEST ===

MOCK_UID_FILE   := postman/postman_mock_uid.txt
ENV_UID_FILE    := postman/postman_env_uid.txt
COLL_UID_FILE   := postman/postman_collection_uid.txt

API_KEY         := $(POSTMAN_API_KEY)
MOCK_UID        := $(shell cat $(MOCK_UID_FILE) 2>/dev/null || echo "")
ENV_UID         := $(shell cat $(ENV_UID_FILE))
COLL_UID        := $(shell cat $(COLL_UID_FILE))

sync-mock:
	@echo "🔍 Checking for existing mock UID..."
	@if [ -z "$(MOCK_UID)" ]; then \
		echo "⚠️  No mock UID found. Creating a new mock..."; \
		curl --silent --location --request POST "https://api.getpostman.com/mocks" \
			--header "x-api-key: $(API_KEY)" \
			--header "Content-Type: application/json" \
			--data-raw '{"mock": { "name": "Auto Mock", "collection": "$(COLL_UID)", "environment": "$(ENV_UID)", "private": false }}' \
			| jq -r '.mock.uid' > $(MOCK_UID_FILE); \
		echo "✅ Mock created. UID saved to $(MOCK_UID_FILE)."; \
	else \
		echo "✅ Found existing mock UID: $(MOCK_UID)."; \
	fi

	@echo "🔄 Updating Postman mock server environment..."
	curl --location --request PUT "https://api.getpostman.com/mocks/$(shell cat $(MOCK_UID_FILE))" \
		--header "x-api-key: $(API_KEY)" \
		--header "Content-Type: application/json" \
		--data-raw "{\"mock\": { \
			\"name\": \"Auto Mock\", \
			\"collection\": \"$(COLL_UID)\", \
			\"environment\": \"$(ENV_UID)\", \
			\"description\": \"Mock server updated via Makefile sync-mock.\", \
	# --- Create a Postman Mock Server (with optional environment) ---


# --- Generate Postman environment file from mock-url.txt ---
.PHONY: postman-env-create
postman-env-create:
	@echo "🧪 Generating Postman environment file …"
	@if [ ! -f $(MOCK_URL_FILE_POSTMAN) ]; then \
	    echo '⚠️  mock_url.txt missing. Using fallback URL: $(MOCK_URL)'; \
	fi
	@jq -n \
		--arg baseUrl "$(MOCK_URL)" \
		--arg token "$(TOKEN)" \
		'{ \
			id: "c2m-env-id", \
			name: "C2M Local Dev", \
			values: [ \
				{ key: "baseUrl", value: $$baseUrl, enabled: true }, \
				{ key: "token", value: $$token, enabled: true } \
			], \
			_type: "environment" \
		}' > $(ENV_FILE)
	@echo "✅ Wrote $(ENV_FILE) with baseUrl=$(MOCK_URL)"


# --- Upload environment file to Postman ---
.PHONY: postman-env-upload
postman-env-upload:
	@echo "📤 Uploading Postman environment file to workspace $(POSTMAN_WS)..."
	@RESPONSE=$$(curl --silent --location --request POST "https://api.getpostman.com/environments?workspace=$(POSTMAN_WS)" \
		--header "X-Api-Key: $(POSTMAN_API_KEY)" \
		--header 'Content-Type: application/json' \
		--data-binary '@$(ENV_FILE)'); \
	echo "$$RESPONSE" | jq . > postman/env-upload-debug.json || echo "$$RESPONSE" > postman/env-upload-debug.json; \
	ENV_UID=$$(echo "$$RESPONSE" | jq -r '.environment.uid // empty'); \
	if [ -z "$$ENV_UID" ]; then \
		echo "❌ Failed to upload environment. Check postman/env-upload-debug.json for details."; \
		exit 1; \
	else \
		echo "✅ Environment uploaded with UID: $$ENV_UID"; \
		echo $$ENV_UID > postman/postman_env_uid.txt; \
	fi


MOCK_ID        := $(shell cat postman/postman_mock_uid.txt)
ENV_UID        := $(shell cat postman/postman_env_uid.txt)
COLL_UID       := $(shell cat postman/postman_collection_uid.txt)
API_KEY        := $(POSTMAN_API_KEY)


update-mock-env:
	@echo "🔄 Updating Postman mock server environment..."
	curl --location --request PUT "https://api.getpostman.com/mocks/$(MOCK_ID)" \
		--header "x-api-key: $(API_KEY)" \
		--header "Content-Type: application/json" \
		--data-raw "{\"mock\": { \
			\"name\": \"Updated Mock Server\", \
			\"collection\": \"$(COLL_UID)\", \
			\"environment\": \"$(ENV_UID)\", \
			\"description\": \"Mock server environment updated via Makefile.\", \
			\"private\": false \
		}}"
	@echo "✅ Mock server environment updated."


MOCK_UID_FILE  := postman/postman_mock_uid.txt
API_KEY        := $(POSTMAN_API_KEY)
MOCK_UID       := $(shell cat $(MOCK_UID_FILE))


.PHONY: verify-mock
verify-mock:
	@echo "🔍 Fetching mock server details..."
	@curl --silent --location --request GET "https://api.getpostman.com/mocks/$(MOCK_UID)" \
		--header "x-api-key: $(API_KEY)" \
		| jq '{ \
			mockUrl: .mock.mockUrl, \
			name: .mock.name, \
			collection: .mock.collection, \
			environment: .mock.environment, \
			private: .mock.private, \
			updatedAt: .mock.updatedAt \
		}'


POSTMAN_API_UID_FILE := $(POSTMAN_API_UID_FILE)
POSTMAN_API_VER_FILE := postman/postman_api_version.txt
OPENAPI_SPEC_FILE    := $(OPENAPI_SPEC)


.PHONY: postman-api-spec
postman-api-spec:
	@echo "🚀 Uploading OpenAPI spec to existing Postman API..."
	@if [ ! -f $(OPENAPI_SPEC_FILE) ]; then \
		echo "❌ OpenAPI spec file not found: $(OPENAPI_SPEC_FILE)"; \
		exit 1; \
	fi; \
	if [ ! -f $(POSTMAN_API_UID_FILE) ]; then \
		echo "❌ API UID not found: $(POSTMAN_API_UID_FILE)"; \
		exit 1; \
	fi; \
	if [ ! -f $(POSTMAN_API_VER_FILE) ]; then \
		echo "❌ API version not found: $(POSTMAN_API_VER_FILE)"; \
		exit 1; \
	fi; \
	API_UID=$$(cat $(POSTMAN_API_UID_FILE)); \
	VER_NAME=$$(cat $(POSTMAN_API_VER_FILE)); \
	jq -n --arg lang "yaml" --rawfile spec $(OPENAPI_SPEC_FILE) \
		'{ spec: { language: $$lang, schema: $$spec } }' \
		> postman/postman-api-spec-payload.json; \
	curl --silent --location --request POST "https://api.getpostman.com/apis/$$API_UID/versions/$$VER_NAME/spec" \
		--header "x-api-key: $(POSTMAN_API_KEY)" \
		--header "Content-Type: application/json" \
		--data-binary @postman/postman-api-spec-payload.json \
		-o postman/postman-api-spec-response.json; \
	if ! jq -e '.spec' postman/postman-api-spec-response.json >/dev/null; then \
		echo "❌ Failed to upload spec. See postman/postman-api-spec-response.json"; \
		exit 1; \
	fi; \
	echo "✅ OpenAPI spec uploaded to Postman API $$API_UID (version $$VER_NAME)"


# ========================
# Variables
# ========================
ENV_FILE            := $(ENV_FILE)
COLLECTION_FIXED    := $(COLLECTION_FIXED)
REPORT_HTML         := $(REPORT_HTML)
NEWMAN              := npx newman
PRISM               := npx @stoplight/prism-cli
PRISM_PORT          := 4010
TOKEN               ?= dummy-token


# Mock URL files
MOCK_URL_FILE_POSTMAN_POSTMAN := $(MOCK_URL_FILE_POSTMAN)
MOCK_URL_FILE_POSTMAN_PRISM   := $(MOCK_URL_FILE_PRISM)


# Resolved mock URLs
POSTMAN_MOCK_URL := $(shell cat $(MOCK_URL_FILE_POSTMAN_POSTMAN) 2>/dev/null || echo "https://mock.api")
PRISM_MOCK_URL   := $(shell cat $(MOCK_URL_FILE_POSTMAN_PRISM)   2>/dev/null || echo "http://localhost:$(PRISM_PORT)")


# ========================
# Targets
# ========================

.PHONY: prism-start
prism-start:
	@echo "🚀 Starting Prism mock server on port $(PRISM_PORT)..."
	@if lsof -i :$(PRISM_PORT) -t >/dev/null; then \
		echo "⚠️  Prism already running on port $(PRISM_PORT)."; \
	else \
		echo "http://localhost:$(PRISM_PORT)" > $(MOCK_URL_FILE_POSTMAN_PRISM); \
		$(PRISM) mock $(OPENAPI_SPEC) -p $(PRISM_PORT) & \
		echo $$! > prism.pid; \
		echo "✅ Prism started on port $(PRISM_PORT) (PID: $$(cat prism.pid))"; \
	fi


.PHONY: prism-stop
prism-stop:
	@if [ -f prism.pid ]; then \
		echo "🛑 Stopping Prism (PID: $$(cat prism.pid))..."; \
		kill -9 $$(cat prism.pid) || true; \
		rm -f prism.pid; \
		rm -f $(MOCK_URL_FILE_POSTMAN_PRISM); \
	else \
		echo "⚠️  No prism.pid found. Prism may not be running."; \
	fi


.PHONY: prism-mock-test
prism-mock-test:
	@echo "🔬 Running Newman tests against Prism mock..."
	@if [ ! -f $(MOCK_URL_FILE_POSTMAN_PRISM) ]; then \
		echo "ℹ️  Prism mock URL not found. Starting Prism..."; \
		$(MAKE) prism-start; \
		sleep 2; \
	fi
	@if [ ! -f $(COLLECTION_FIXED) ]; then \
		echo "❌ Missing Postman collection: $(COLLECTION_FIXED)"; \
		exit 1; \
	fi
	@if ! lsof -i :$(PRISM_PORT) -t >/dev/null; then \
		echo "❌ Prism is not running on port $(PRISM_PORT). Start it with 'make prism-start'."; \
		exit 1; \
	fi
	$(NEWMAN) run $(COLLECTION_FIXED) \
		--env-var baseUrl=$(PRISM_MOCK_URL) \
		--env-var token=$(TOKEN) \
		--reporters cli,html \
		--reporter-html-export $(REPORT_HTML)
	@echo "📄 Newman test report generated at $(REPORT_HTML)"


.PHONY: postman-mock-create
postman-mock-create:
	@echo "🛠 Creating Postman mock server for collection..."
	@if [ ! -f postman/postman_test_collection_uid.txt ]; then \
		echo "❌ Missing test collection UID file: postman/postman_test_collection_uid.txt. Run postman-collection-upload-test first."; \
		exit 1; \
	fi; \
	COLL_UID=$$(cat postman/postman_test_collection_uid.txt); \
	MOCK_NAME="C2M API Mock - Test Collection"; \
	jq -n --arg coll "$$COLL_UID" --arg name "$$MOCK_NAME" \
		'{ mock: { collection: $$coll, name: $$name, private: false } }' \
		> postman/mock-payload.json; \
	echo "📤 Creating mock server via Postman API..."; \
	curl --silent --location --request POST "https://api.getpostman.com/mocks" \
		--header "X-Api-Key: $(POSTMAN_API_KEY)" \
		--header "Accept: application/vnd.api.v10+json" \
		--header "Content-Type: application/json" \
		--data-binary @postman/mock-payload.json \
		-o postman/mock-debug.json; \
	if ! jq -e '.mock.mockUrl' postman/mock-debug.json >/dev/null; then \
		echo "❌ Failed to create mock server. See postman/mock-debug.json"; \
		exit 1; \
	fi; \
	MOCK_URL=$$(jq -r '.mock.mockUrl' postman/mock-debug.json); \
	MOCK_UID=$$(jq -r '.mock.uid' postman/mock-debug.json | sed 's/^[^-]*-//'); \
	echo "✅ Mock server created at: $$MOCK_URL"; \
	echo "📄 Saving mock URL and UID..."; \
	echo "$$MOCK_URL" > $(MOCK_URL_FILE_POSTMAN_POSTMAN); \
	echo "$$MOCK_UID" > postman/postman_mock_uid.txt; \
	echo "📄 Mock server URL saved to $(MOCK_URL_FILE_POSTMAN_POSTMAN)"; \
	echo "📄 Mock UID saved to postman/postman_mock_uid.txt"; \
	echo "🔍 Validating mock configuration..."; \
	curl --silent --location --request GET "https://api.getpostman.com/mocks/$$MOCK_UID" \
		--header "X-Api-Key: $(POSTMAN_API_KEY)" \
		-o postman/mock-validate.json; \
	if jq -e '.error' postman/mock-validate.json >/dev/null; then \
		echo "❌ Postman mock validation failed. See postman/mock-validate.json"; \
		exit 1; \
	else \
		echo "✅ Postman mock validated successfully."; \
	fi


.PHONY: postman-mock
postman-mock:
	@echo "🔬 Running Newman tests against Postman mock..."
	@if [ ! -f $(MOCK_URL_FILE_POSTMAN_POSTMAN) ]; then \
		echo "ℹ️  Postman mock URL not found. Creating Postman mock..."; \
		$(MAKE) postman-mock-create; \
	fi
	@if [ ! -f $(COLLECTION_FIXED) ]; then \
		echo "❌ Missing Postman collection: $(COLLECTION_FIXED)"; \
		exit 1; \
	fi
	$(NEWMAN) run $(COLLECTION_FIXED) \
		--env-var baseUrl=$(POSTMAN_MOCK_URL) \
		--env-var token=$(TOKEN) \
		--reporters cli,html \
		--reporter-html-export $(REPORT_HTML)
	@echo "📄 Newman test report generated at $(REPORT_HTML)"


.PHONY: postman-collection-url-hardfix
postman-collection-url-hardfix:
	@echo "🔧 Applying hard fix to ensure all requests have proper URLs..."
	jq -f scripts/url_hardfix.jq $(COLLECTION_FIXED) > $(COLLECTION_FIXED).tmp \
		&& mv $(COLLECTION_FIXED).tmp $(COLLECTION_FIXED)
	@echo "✅ Hard fix applied: $(COLLECTION_FIXED)"


# === DOCUMENTATION TARGETS ===
.PHONY: $(DOCS_DIR)-build
$(DOCS_DIR)-build:
	@echo "📚 Building API documentation with Redoc..."
	npx @redocly/cli build-$(DOCS_DIR) $(SPEC) -o $(DOCS_DIR)/index.html
	npx swagger-cli bundle $(OPENAPI_FINAL_SPEC) --outfile openapi/bundled.yaml --type yaml


.PHONY: $(DOCS_DIR)-serve
$(DOCS_DIR)-serve:
	@echo "🌐 Serving API documentation locally on http://localhost:8080..."
	python3 -m http.server 8080 --directory $(DOCS_DIR)


.PHONY: postman-full-pipeline
postman-full-pipeline:
	@echo "🚀 Starting FULL Postman & OpenAPI pipeline (A → B → C → D)..."


	# --- Install and Validate ---
	$(MAKE) install
	$(MAKE) generate-openapi-spec-from-dd
	$(MAKE) lint

	# --- Postman API Setup ---
	$(MAKE) postman-login
	$(MAKE) postman-api-import
#
#	$(MAKE) postman-api-version
#	$(MAKE) postman-api-spec
#
	# --- Generate and Upload Collection (A) ---
	$(MAKE) postman-collection-generate
	$(MAKE) postman-collection-upload
	$(MAKE) postman-collection-link

	# --- Prepare Testing Collection (B) ---
	$(MAKE) postman-collection-generate
	$(MAKE) postman-collection-merge-overrides
	$(MAKE) postman-collection-add-examples
	$(MAKE) postman-collection-auto-fix
	$(MAKE) postman-collection-add-tests
	$(MAKE) postman-collection-upload-test

	# --- Mock Server and Environment (C) ---
	$(MAKE) postman-mock-create
	$(MAKE) postman-env-create
	$(MAKE) postman-env-upload
	$(MAKE) update-mock-env 

	$(MAKE) prism
	$(MAKE) postman-mock
	$(MAKE) prism-mock-test

	# --- Documentation Build ---
	$(MAKE) $(DOCS_DIR)-build
	$(MAKE) $(DOCS_DIR)-serve

	$(MAKE) $(DOCS_DIR)-build
	$(MAKE) $(DOCS_DIR)-serve &

	# --- Run Tests (D) ---
	$(MAKE) postman-mock

	@echo "🎉 FULL pipeline completed successfully!"


.PHONY: postman-cleanup
postman-cleanup:
	@echo "🧹 Starting full cleanup of Postman resources..."

	# --- Delete Mock Server ---
	@if [ -f postman/postman_mock_uid.txt ]; then \
		MOCK_UID=$$(cat postman/postman_mock_uid.txt); \
		echo "🗑 Deleting Mock Server: $$MOCK_UID..."; \
		curl --silent --location --request DELETE "https://api.getpostman.com/mocks/$$MOCK_UID" \
			--header "X-Api-Key: $(POSTMAN_API_KEY)" \
			--header "Accept: application/vnd.api.v10+json" \
			| tee postman/mock-delete-debug.json; \
		echo "✅ Mock server deleted."; \
		rm -f postman/postman_mock_uid.txt $(MOCK_URL_FILE_POSTMAN); \
	else \
		echo "⚠️  No mock UID found at postman/postman_mock_uid.txt"; \
	fi

	# --- Delete Environment ---
	@if [ -f postman/postman_env_uid.txt ]; then \
		ENV_UID=$$(cat postman/postman_env_uid.txt); \
		echo "🗑 Deleting Environment: $$ENV_UID..."; \
		curl --silent --location --request DELETE "https://api.getpostman.com/environments/$$ENV_UID" \
			--header "X-Api-Key: $(POSTMAN_API_KEY)" \
			--header "Accept: application/vnd.api.v10+json" \
			| tee postman/env-delete-debug.json; \
		echo "✅ Environment deleted."; \
		rm -f postman/postman_env_uid.txt $(ENV_FILE); \
	else \
		echo "⚠️  No environment UID found at postman/postman_env_uid.txt"; \
	fi

	# --- Delete Test Collection ---
	@if [ -f postman/postman_test_collection_uid.txt ]; then \
		COLL_UID=$$(cat postman/postman_test_collection_uid.txt); \
		echo "🗑 Deleting Collection: $$COLL_UID..."; \
		curl --silent --location --request DELETE "https://api.getpostman.com/collections/$$COLL_UID" \
			--header "X-Api-Key: $(POSTMAN_API_KEY)" \
			--header "Accept: application/vnd.api.v10+json" \
			| tee postman/collection-delete-debug.json; \
		echo "✅ Test collection deleted."; \
		rm -f postman/postman_test_collection_uid.txt; \
	else \
		echo "⚠️  No test collection UID found at postman/postman_test_collection_uid.txt"; \
	fi

	# --- Delete Main Collection (if exists) ---
	@if [ -f postman/postman_collection_uid.txt ]; then \
		COLL_UID=$$(cat postman/postman_collection_uid.txt); \
		echo "🗑 Deleting Main Collection: $$COLL_UID..."; \
		curl --silent --location --request DELETE "https://api.getpostman.com/collections/$$COLL_UID" \
			--header "X-Api-Key: $(POSTMAN_API_KEY)" \
			--header "Accept: application/vnd.api.v10+json" \
			| tee postman/collection-main-delete-debug.json; \
		echo "✅ Main collection deleted."; \
		rm -f postman/postman_collection_uid.txt; \
	else \
		echo "⚠️  No main collection UID found at postman/postman_collection_uid.txt"; \
	fi

	@echo "🎉 Full cleanup complete."


.PHONY: postman-cleanup-all
postman-cleanup-all:
	@echo "🧹 Starting FULL cleanup of Postman resources for workspace $(POSTMAN_WS)..."

	# --- Delete Collections ---
	@echo "🔍 Fetching collections..."
	@COLLECTIONS=$$(curl --silent --location --request GET "https://api.getpostman.com/collections?workspace=$(POSTMAN_WS)" \
		--header "X-Api-Key: $(POSTMAN_API_KEY)" | jq -r '.collections[].uid'); \
	for COL in $$COLLECTIONS; do \
		echo "🗑 Deleting collection $$COL..."; \
		curl --silent --location --request DELETE "https://api.getpostman.com/collections/$$COL" \
			--header "X-Api-Key: $(POSTMAN_API_KEY)" || echo "⚠️ Failed to delete collection $$COL"; \
	done

	# --- Delete APIs ---
	@echo "🔍 Fetching APIs..."
	@APIS=$$(curl --silent --location --request GET "https://api.getpostman.com/apis?workspace=$(POSTMAN_WS)" \
		--header "X-Api-Key: $(POSTMAN_API_KEY)" | jq -r '.apis[].id'); \
	for API in $$APIS; do \
		echo "🗑 Deleting API $$API..."; \
		curl --silent --location --request DELETE "https://api.getpostman.com/apis/$$API" \
			--header "X-Api-Key: $(POSTMAN_API_KEY)" || echo "⚠️ Failed to delete API $$API"; \
	done

	# --- Delete Environments ---
	@echo "🔍 Fetching environments..."
	@ENVS=$$(curl --silent --location --request GET "https://api.getpostman.com/environments?workspace=$(POSTMAN_WS)" \
		--header "X-Api-Key: $(POSTMAN_API_KEY)" | jq -r '.environments[].uid'); \
	for ENV in $$ENVS; do \
		echo "🗑 Deleting environment $$ENV..."; \
		curl --silent --location --request DELETE "https://api.getpostman.com/environments/$$ENV" \
			--header "X-Api-Key: $(POSTMAN_API_KEY)" || echo "⚠️ Failed to delete environment $$ENV"; \
	done

	# --- Delete Mock Servers ---
	@echo "🔍 Fetching mock servers..."
	@MOCKS=$$(curl --silent --location --request GET "https://api.getpostman.com/mocks?workspace=$(POSTMAN_WS)" \
		--header "X-Api-Key: $(POSTMAN_API_KEY)" | jq -r '.mocks[].id'); \
	for MOCK in $$MOCKS; do \
		echo "🗑 Deleting mock server $$MOCK..."; \
		curl --silent --location --request DELETE "https://api.getpostman.com/mocks/$$MOCK" \
			--header "X-Api-Key: $(POSTMAN_API_KEY)" || echo "⚠️ Failed to delete mock server $$MOCK"; \
	done

	@echo "✅ Postman cleanup complete for workspace $(POSTMAN_WS)."


.PHONY: postman-api-debug
postman-api-debug:
	@echo "🐞 Debugging Postman API import..."
	curl --verbose --location --request POST "https://api.getpostman.com/apis?workspace=$(POSTMAN_WS)" \
	--header "X-Api-Key: $(POSTMAN_API_KEY)" \
	--header "Authorization: Bearer $(POSTMAN_API_KEY)" \
	--header "Accept: application/vnd.api.v10+json" \
	--header "Content-Type: application/json" \
	--data "$$(jq -Rs --arg name '$(POSTMAN_API_NAME)' '{ api: { name: $$name, schema: { type: "openapi3", language: "yaml", schema: . }}}' $(SPEC))" \
	| tee postman/import-debug.json


.PHONY: postman-workspace-debug
postman-workspace-debug:
    @echo "🔍 Current Postman workspace ID: $(POSTMAN_WS)"


# ---------- HELP --------------------------------------
.PHONY: help
help: ## Show help
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'
