openapi: 3.0.3
info:
  title: C2M API v2 - Auth Overlay
  version: 2.0.0

paths:
  /auth/tokens/short:
    post:
      tags: [auth]
      operationId: issueShortTermToken
      summary: Issue a short-term access token
      description: |
        Exchange a valid long-term token for a short-lived JWT (e.g., 15 minutes).
        The long-term token must be sent in the Authorization header as `Bearer <long_token>`.
      security:
        - LongTokenAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShortTokenRequest'
            examples:
              withScopes:
                value:
                  scopes: ["jobs:submit", "templates:read"]
      responses:
        '201':
          description: Short-term token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortTokenResponse'
              examples:
                success:
                  value:
                    token_type: Bearer
                    access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    expires_in: 900
                    expires_at: "2025-08-26T22:45:00Z"
                    scopes: ["jobs:submit", "templates:read"]
                    token_id: "tok_st_9f3d2c"
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '429':
          $ref: '#/components/responses/Error429'

  /auth/tokens/long:
    post:
      tags: [auth]
      operationId: issueLongTermToken
      summary: Issue or rotate a long-term token
      description: |
        Issues a long-term token (e.g., 30-90 days) for automation or server-to-server use.
        Requires step-up authentication. Choose one of the supported grant types:
        
        - `client_credentials` + `client_secret`
        - `client_credentials` + one-time `otp_code`
        - `assertion` (e.g., signed JWT by your private key)
        - Or an existing short-term token with the `tokens:write` scope
        
        Only one mechanism is required per call.
      security:
        - ShortTokenAuth: ["tokens:write"]
        - ClientKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LongTokenRequest'
            examples:
              clientSecret:
                value:
                  grant_type: client_credentials
                  client_id: "c2m_abc123"
                  client_secret: "supersecret123"
                  scopes: ["jobs:submit", "templates:read"]
                  ttl_seconds: 7776000    # 90 days
              otp:
                value:
                  grant_type: client_credentials
                  client_id: "c2m_abc123"
                  otp_code: "123456"
                  scopes: ["jobs:*"]
                  ttl_seconds: 2592000     # 30 days
              assertion:
                value:
                  grant_type: assertion
                  client_id: "c2m_abc123"
                  assertion_type: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
                  assertion: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                  scopes: ["jobs:submit", "templates:read"]
      responses:
        '201':
          description: Long-term token issued
          headers:
            X-Token-Id:
              description: Server-generated identifier for revocation and audit
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTokenResponse'
              examples:
                success:
                  value:
                    token_type: Bearer
                    access_token: "lt_0d51e9bd2f6449cf..."
                    expires_in: 2592000
                    expires_at: "2025-09-25T22:45:00Z"
                    scopes: ["jobs:*"]
                    token_id: "tok_lt_b8e0aa"
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '429':
          $ref: '#/components/responses/Error429'

  /auth/tokens/{tokenId}/revoke:
    post:
      tags: [auth]
      operationId: revokeToken
      summary: Revoke a token
      description: Revokes a short- or long-term token by its `tokenId`. Idempotent.
      security:
        - ShortTokenAuth: ["tokens:revoke"]
        - LongTokenAuth: ["tokens:revoke"]
      parameters:
        - name: tokenId
          in: path
          required: true
          schema:
            type: string
          description: The token ID to revoke
      responses:
        '204':
          description: Revoked (idempotent)
        '401':
          $ref: '#/components/responses/Error401'
        '404':
          $ref: '#/components/responses/Error404'

components:
  securitySchemes:
    LongTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Long-term JWT for exchanging to short-term tokens
      
    ShortTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Short-term JWT for API operations
      
    ClientKey:
      type: apiKey
      in: header
      name: X-Client-Id
      description: Client identifier for additional security

  schemas:
    ShortTokenRequest:
      type: object
      properties:
        long_token:
          type: string
          description: Optional if the long-term token is provided in Authorization header
        scopes:
          type: array
          items:
            type: string
          description: Optional scope narrowing; defaults to the long-term token's scopes
      additionalProperties: false

    ShortTokenResponse:
      type: object
      required: [token_type, access_token, expires_in, expires_at]
      properties:
        token_type:
          type: string
          enum: [Bearer]
        access_token:
          type: string
          description: Short-lived JWT
        expires_in:
          type: integer
          description: Lifetime in seconds (e.g., 900 for 15 minutes)
        expires_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp of expiration
        scopes:
          type: array
          items:
            type: string
          description: Granted scopes
        token_id:
          type: string
          description: Server-issued identifier for this token

    LongTokenRequest:
      type: object
      description: One of several credential mechanisms must be provided.
      required: [grant_type, client_id]
      properties:
        grant_type:
          type: string
          enum: [client_credentials, assertion]
          description: The authentication grant type
        client_id:
          type: string
          description: Client identifier issued by Click2Mail
        client_secret:
          type: string
          description: Required if using client_credentials with secret
        otp_code:
          type: string
          description: Required if your policy mandates OTP for issuance
        assertion_type:
          type: string
          description: Required when grant_type=assertion
        assertion:
          type: string
          description: Signed JWT or other accepted assertion
        scopes:
          type: array
          items:
            type: string
          description: Scopes to assign to the long-term token
        ttl_seconds:
          type: integer
          minimum: 3600
          maximum: 7776000
          description: Requested lifetime (1 hour - 90 days). Server may clamp.
      additionalProperties: false

    LongTokenResponse:
      type: object
      required: [token_type, access_token, expires_in, expires_at]
      properties:
        token_type:
          type: string
          enum: [Bearer]
        access_token:
          type: string
          description: Long-lived token (opaque or JWT depending on deployment)
        expires_in:
          type: integer
          description: Lifetime in seconds
        expires_at:
          type: string
          format: date-time
          description: ISO 8601 timestamp of expiration
        scopes:
          type: array
          items:
            type: string
          description: Granted scopes
        token_id:
          type: string
          description: Server-issued identifier for this token

    AuthError:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          example: invalid_grant
          description: OAuth-style error code
        message:
          type: string
          example: The provided client credentials are invalid.
          description: Human-readable error message
        details:
          type: object
          description: Additional error details

  responses:
    Error400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthError'
          examples:
            invalidGrant:
              value:
                code: invalid_grant
                message: The grant type is not supported
                
    Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthError'
          examples:
            invalidToken:
              value:
                code: invalid_token
                message: The provided token is expired or invalid
                
    Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthError'
          examples:
            insufficientScope:
              value:
                code: insufficient_scope
                message: The token lacks the required scope for this operation
                
    Error404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthError'
          examples:
            notFound:
              value:
                code: not_found
                message: The requested resource was not found
                
    Error429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthError'
          examples:
            rateLimited:
              value:
                code: rate_limited
                message: Too many requests. Please retry after 60 seconds.