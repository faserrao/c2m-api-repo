{
  "name": "C2mApiV2",
  "type": "OPENAPI:3.0",
  "files": [
    {
      "path": "openapi.yaml",
      "content": "openapi: 3.0.3\ninfo:\n  title: C2M API v2 - Auth Overlay\n  version: 2.0.0\n  description: API for submitting documents with various routing options\nservers:\n  - url: https://api.example.com/v1\n    description: Production server\n  - url: http://localhost:4010\n    description: Mock server\ncomponents:\n  schemas:\n    documentName:\n      type: string\n    firstName:\n      type: string\n    lastName:\n      type: string\n    nickName:\n      type: string\n    address1:\n      type: string\n    address2:\n      type: string\n    address3:\n      type: string\n    city:\n      type: string\n    state:\n      type: string\n    country:\n      type: string\n    zip:\n      type: string\n    phoneNumber:\n      type: string\n    externalUrl:\n      type: string\n      format: uri\n    tag:\n      type: string\n    tags:\n      type: array\n      items:\n        type: string\n    jobTemplate:\n      type: string\n    invoiceNumber:\n      type: string\n    routingNumber:\n      type: string\n    accountNumber:\n      type: string\n    cardNumber:\n      type: string\n    delimiter:\n      type: string\n    tbd:\n      type: string\n    documentId:\n      type: integer\n    addressId:\n      type: integer\n    addressListId:\n      type: integer\n    uploadRequestId:\n      type: integer\n    zipId:\n      type: integer\n    startPage:\n      type: integer\n    endPage:\n      type: integer\n    month:\n      type: integer\n      minimum: 1\n      maximum: 12\n    year:\n      type: integer\n    cvv:\n      type: integer\n    checkDigit:\n      type: integer\n    pageOffset:\n      type: integer\n    amountDue:\n      type: number\n    amount:\n      type: number\n    x:\n      type: number\n    y:\n      type: number\n    width:\n      type: number\n    height:\n      type: number\n    submitSingleDocWithTemplateParams:\n      type: object\n      properties:\n        jobTemplate:\n          $ref: '#/components/schemas/jobTemplate'\n        paymentDetails:\n          $ref: '#/components/schemas/paymentDetails'\n        tags:\n          $ref: '#/components/schemas/tags'\n      required:\n        - jobTemplate\n    submitMultiDocWithTemplateParams:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: object\n            properties:\n              documentSourceIdentifier:\n                $ref: '#/components/schemas/documentSourceIdentifier'\n              recipientAddressSource:\n                $ref: '#/components/schemas/recipientAddressSource'\n            required:\n              - documentSourceIdentifier\n              - recipientAddressSource\n        jobTemplate:\n          $ref: '#/components/schemas/jobTemplate'\n        paymentDetails:\n          $ref: '#/components/schemas/paymentDetails'\n        tags:\n          $ref: '#/components/schemas/tags'\n      required:\n        - items\n        - jobTemplate\n        - paymentDetails\n    mergeMultiDocWithTemplateParams:\n      type: object\n      properties:\n        documentsToMerge:\n          $ref: '#/components/schemas/documentsToMerge'\n        recipientAddressSource:\n          $ref: '#/components/schemas/recipientAddressSource'\n        jobTemplate:\n          $ref: '#/components/schemas/jobTemplate'\n        paymentDetails:\n          $ref: '#/components/schemas/paymentDetails'\n        tags:\n          $ref: '#/components/schemas/tags'\n      required:\n        - documentsToMerge\n        - recipientAddressSource\n        - jobTemplate\n    singleDocJobParams:\n      type: object\n      properties:\n        documentSourceIdentifier:\n          $ref: '#/components/schemas/documentSourceIdentifier'\n        recipientAddressSources:\n          type: array\n          items:\n            $ref: '#/components/schemas/recipientAddressSource'\n        jobOptions:\n          $ref: '#/components/schemas/jobOptions'\n        paymentDetails:\n          $ref: '#/components/schemas/paymentDetails'\n        tags:\n          $ref: '#/components/schemas/tags'\n      required:\n        - documentSourceIdentifier\n        - recipientAddressSources\n        - jobOptions\n    submitMultiDocParams:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: object\n            properties:\n              documentSourceIdentifier:\n                $ref: '#/components/schemas/documentSourceIdentifier'\n              recipientAddressSource:\n                $ref: '#/components/schemas/recipientAddressSource'\n            required:\n              - documentSourceIdentifier\n              - recipientAddressSource\n        jobOptions:\n          $ref: '#/components/schemas/jobOptions'\n        paymentDetails:\n          $ref: '#/components/schemas/paymentDetails'\n        tags:\n          $ref: '#/components/schemas/tags'\n      required:\n        - items\n        - jobOptions\n    mergeMultiDocParams:\n      type: object\n      properties:\n        documentsToMerge:\n          $ref: '#/components/schemas/documentsToMerge'\n        recipientAddressSource:\n          $ref: '#/components/schemas/recipientAddressSource'\n        tags:\n          $ref: '#/components/schemas/tags'\n      required:\n        - documentsToMerge\n        - recipientAddressSource\n    documentsToMerge:\n      type: array\n      items:\n        $ref: '#/components/schemas/documentSourceIdentifier'\n    splitPdfParams:\n      type: object\n      properties:\n        documentSourceIdentifier:\n          $ref: '#/components/schemas/documentSourceIdentifier'\n        items:\n          type: array\n          items:\n            type: object\n            properties:\n              pageRange:\n                $ref: '#/components/schemas/pageRange'\n              recipientAddressSources:\n                type: array\n                items:\n                  $ref: '#/components/schemas/recipientAddressSource'\n            required:\n              - pageRange\n              - recipientAddressSources\n        paymentDetails:\n          $ref: '#/components/schemas/paymentDetails'\n        tags:\n          $ref: '#/components/schemas/tags'\n      required:\n        - documentSourceIdentifier\n        - items\n    pageRange:\n      type: object\n      properties:\n        startPage:\n          $ref: '#/components/schemas/startPage'\n        endPage:\n          $ref: '#/components/schemas/endPage'\n      required:\n        - startPage\n        - endPage\n    splitPdfWithCaptureParams:\n      type: object\n      properties:\n        documentSourceIdentifier:\n          $ref: '#/components/schemas/documentSourceIdentifier'\n        embeddedExtractionSpecs:\n          $ref: '#/components/schemas/embeddedExtractionSpecs'\n        paymentDetails:\n          $ref: '#/components/schemas/paymentDetails'\n        tags:\n          $ref: '#/components/schemas/tags'\n      required:\n        - documentSourceIdentifier\n        - embeddedExtractionSpecs\n    embeddedExtractionSpecs:\n      type: array\n      items:\n        $ref: '#/components/schemas/extractionSpec'\n    extractionSpec:\n      type: object\n      properties:\n        startPage:\n          $ref: '#/components/schemas/startPage'\n        endPage:\n          $ref: '#/components/schemas/endPage'\n        addressRegion:\n          $ref: '#/components/schemas/addressRegion'\n      required:\n        - startPage\n        - endPage\n        - addressRegion\n    addressRegion:\n      type: object\n      properties:\n        x:\n          $ref: '#/components/schemas/x'\n        y:\n          $ref: '#/components/schemas/y'\n        width:\n          $ref: '#/components/schemas/width'\n        height:\n          $ref: '#/components/schemas/height'\n        pageOffset:\n          $ref: '#/components/schemas/pageOffset'\n      required:\n        - x\n        - y\n        - width\n        - height\n        - pageOffset\n    multiPdfWithCaptureParams:\n      type: object\n      properties:\n        addressCapturePdfs:\n          $ref: '#/components/schemas/addressCapturePdfs'\n        jobTemplate:\n          $ref: '#/components/schemas/jobTemplate'\n        paymentDetails:\n          $ref: '#/components/schemas/paymentDetails'\n        tags:\n          $ref: '#/components/schemas/tags'\n      required:\n        - addressCapturePdfs\n        - jobTemplate\n    addressCapturePdfs:\n      type: array\n      items:\n        $ref: '#/components/schemas/addressListPdf'\n    addressListPdf:\n      type: object\n      properties:\n        documentSourceIdentifier:\n          $ref: '#/components/schemas/documentSourceIdentifier'\n        addressListRegion:\n          $ref: '#/components/schemas/addressListRegion'\n        delimiter:\n          $ref: '#/components/schemas/delimiter'\n        tags:\n          $ref: '#/components/schemas/tags'\n      required:\n        - documentSourceIdentifier\n        - addressListRegion\n    addressListRegion:\n      $ref: '#/components/schemas/tbd'\n    documentSourceIdentifier:\n      oneOf:\n        - $ref: '#/components/schemas/documentId'\n        - $ref: '#/components/schemas/externalUrl'\n        - type: object\n          properties:\n            uploadRequestId:\n              $ref: '#/components/schemas/uploadRequestId'\n            documentName:\n              $ref: '#/components/schemas/documentName'\n          required:\n            - uploadRequestId\n            - documentName\n        - type: object\n          properties:\n            uploadRequestId:\n              $ref: '#/components/schemas/uploadRequestId'\n            zipId:\n              $ref: '#/components/schemas/zipId'\n            documentName:\n              $ref: '#/components/schemas/documentName'\n          required:\n            - uploadRequestId\n            - zipId\n            - documentName\n        - type: object\n          properties:\n            zipId:\n              $ref: '#/components/schemas/zipId'\n            documentName:\n              $ref: '#/components/schemas/documentName'\n          required:\n            - zipId\n            - documentName\n    recipientAddressSource:\n      oneOf:\n        - $ref: '#/components/schemas/exactlyOneNewAddress'\n        - $ref: '#/components/schemas/exactlyOneListId'\n        - $ref: '#/components/schemas/exactlyOneId'\n    exactlyOneNewAddress:\n      $ref: '#/components/schemas/recipientAddress'\n    exactlyOneListId:\n      $ref: '#/components/schemas/addressListId'\n    exactlyOneId:\n      $ref: '#/components/schemas/addressId'\n    recipientAddress:\n      type: object\n      properties:\n        firstName:\n          $ref: '#/components/schemas/firstName'\n        lastName:\n          $ref: '#/components/schemas/lastName'\n        address1:\n          $ref: '#/components/schemas/address1'\n        city:\n          $ref: '#/components/schemas/city'\n        state:\n          $ref: '#/components/schemas/state'\n        zip:\n          $ref: '#/components/schemas/zip'\n        country:\n          $ref: '#/components/schemas/country'\n        nickName:\n          $ref: '#/components/schemas/nickName'\n        address2:\n          $ref: '#/components/schemas/address2'\n        address3:\n          $ref: '#/components/schemas/address3'\n        phoneNumber:\n          $ref: '#/components/schemas/phoneNumber'\n      required:\n        - firstName\n        - lastName\n        - address1\n        - city\n        - state\n        - zip\n        - country\n    jobOptions:\n      type: object\n      properties:\n        documentClass:\n          $ref: '#/components/schemas/documentClass'\n        layout:\n          $ref: '#/components/schemas/layout'\n        mailclass:\n          $ref: '#/components/schemas/mailclass'\n        paperType:\n          $ref: '#/components/schemas/paperType'\n        printOption:\n          $ref: '#/components/schemas/printOption'\n        envelope:\n          $ref: '#/components/schemas/envelope'\n      required:\n        - documentClass\n        - layout\n        - mailclass\n        - paperType\n        - printOption\n        - envelope\n    paymentDetails:\n      oneOf:\n        - $ref: '#/components/schemas/creditCardPayment'\n        - $ref: '#/components/schemas/invoicePayment'\n        - $ref: '#/components/schemas/achPayment'\n        - $ref: '#/components/schemas/userCreditPayment'\n        - $ref: '#/components/schemas/applePayPayment'\n        - $ref: '#/components/schemas/googlePayPayment'\n    applePayPayment:\n      type: object\n      properties:\n        applePaymentDetails:\n          $ref: '#/components/schemas/applePaymentDetails'\n      required:\n        - applePaymentDetails\n    googlePayPayment:\n      type: object\n      properties:\n        googlePaymentDetails:\n          $ref: '#/components/schemas/googlePaymentDetails'\n      required:\n        - googlePaymentDetails\n    creditCardPayment:\n      type: object\n      properties:\n        creditCardDetails:\n          $ref: '#/components/schemas/creditCardDetails'\n      required:\n        - creditCardDetails\n    invoicePayment:\n      type: object\n      properties:\n        invoiceDetails:\n          $ref: '#/components/schemas/invoiceDetails'\n      required:\n        - invoiceDetails\n    achPayment:\n      type: object\n      properties:\n        achDetails:\n          $ref: '#/components/schemas/achDetails'\n      required:\n        - achDetails\n    userCreditPayment:\n      type: object\n      properties:\n        creditAmount:\n          $ref: '#/components/schemas/creditAmount'\n      required:\n        - creditAmount\n    creditCardDetails:\n      type: object\n      properties:\n        cardType:\n          $ref: '#/components/schemas/cardType'\n        cardNumber:\n          $ref: '#/components/schemas/cardNumber'\n        expirationDate:\n          $ref: '#/components/schemas/expirationDate'\n        cvv:\n          $ref: '#/components/schemas/cvv'\n      required:\n        - cardType\n        - cardNumber\n        - expirationDate\n        - cvv\n    invoiceDetails:\n      type: object\n      properties:\n        invoiceNumber:\n          $ref: '#/components/schemas/invoiceNumber'\n        amountDue:\n          $ref: '#/components/schemas/amountDue'\n      required:\n        - invoiceNumber\n        - amountDue\n    achDetails:\n      type: object\n      properties:\n        routingNumber:\n          $ref: '#/components/schemas/routingNumber'\n        accountNumber:\n          $ref: '#/components/schemas/accountNumber'\n        checkDigit:\n          $ref: '#/components/schemas/checkDigit'\n      required:\n        - routingNumber\n        - accountNumber\n        - checkDigit\n    creditAmount:\n      type: object\n      properties:\n        amount:\n          $ref: '#/components/schemas/amount'\n        currency:\n          $ref: '#/components/schemas/currency'\n      required:\n        - amount\n        - currency\n    applePaymentDetails:\n      type: object\n    googlePaymentDetails:\n      type: object\n    currency:\n      type: string\n      enum:\n        - USD\n        - EUR\n        - GBP\n        - CAD\n        - AUD\n    cardType:\n      type: string\n      enum:\n        - visa\n        - mastercard\n        - discover\n        - americanExpress\n    expirationDate:\n      type: object\n      properties:\n        month:\n          $ref: '#/components/schemas/month'\n        year:\n          $ref: '#/components/schemas/year'\n      required:\n        - month\n        - year\n    digit:\n      type: string\n      enum:\n        - '0'\n        - '1'\n        - '2'\n        - '3'\n        - '4'\n        - '5'\n        - '6'\n        - '7'\n        - '8'\n        - '9'\n    documentFormat:\n      type: string\n      enum:\n        - pdf\n        - doc\n        - docx\n        - pub\n        - ppt\n        - pptx\n        - png\n        - jpeg\n        - odt\n    printOption:\n      type: string\n      enum:\n        - none\n        - color\n        - grayscale\n    envelope:\n      type: string\n      enum:\n        - flat\n        - windowedFlat\n        - letter\n        - legal\n        - postcard\n    paperType:\n      type: string\n      enum:\n        - letter\n        - legal\n        - postcard\n    layout:\n      type: string\n      enum:\n        - portrait\n        - landscape\n    mailclass:\n      type: string\n      enum:\n        - firstClassMail\n        - priorityMail\n        - largeEnvelope\n    documentClass:\n      type: string\n      enum:\n        - businessLetter\n        - personalLetter\n    StandardResponse:\n      type: object\n      properties:\n        status:\n          type: string\n        message:\n          type: string\n        jobId:\n          type: string\n    ShortTokenRequest:\n      type: object\n      properties:\n        long_token:\n          type: string\n          description: Optional if the long-term token is provided in Authorization header\n        scopes:\n          type: array\n          items:\n            type: string\n          description: Optional scope narrowing; defaults to the long-term token's scopes\n      additionalProperties: false\n    ShortTokenResponse:\n      type: object\n      required: [token_type, access_token, expires_in, expires_at]\n      properties:\n        token_type:\n          type: string\n          enum: [Bearer]\n        access_token:\n          type: string\n          description: Short-lived JWT\n        expires_in:\n          type: integer\n          description: Lifetime in seconds (e.g., 900 for 15 minutes)\n        expires_at:\n          type: string\n          format: date-time\n          description: ISO 8601 timestamp of expiration\n        scopes:\n          type: array\n          items:\n            type: string\n          description: Granted scopes\n        token_id:\n          type: string\n          description: Server-issued identifier for this token\n    LongTokenRequest:\n      type: object\n      description: One of several credential mechanisms must be provided.\n      required: [grant_type, client_id]\n      properties:\n        grant_type:\n          type: string\n          enum: [client_credentials, assertion]\n          description: The authentication grant type\n        client_id:\n          type: string\n          description: Client identifier issued by Click2Mail\n        client_secret:\n          type: string\n          description: Required if using client_credentials with secret\n        otp_code:\n          type: string\n          description: Required if your policy mandates OTP for issuance\n        assertion_type:\n          type: string\n          description: Required when grant_type=assertion\n        assertion:\n          type: string\n          description: Signed JWT or other accepted assertion\n        scopes:\n          type: array\n          items:\n            type: string\n          description: Scopes to assign to the long-term token\n        ttl_seconds:\n          type: integer\n          minimum: 3600\n          maximum: 7776000\n          description: Requested lifetime (1 hour - 90 days). Server may clamp.\n      additionalProperties: false\n    LongTokenResponse:\n      type: object\n      required: [token_type, access_token, expires_in, expires_at]\n      properties:\n        token_type:\n          type: string\n          enum: [Bearer]\n        access_token:\n          type: string\n          description: Long-lived token (opaque or JWT depending on deployment)\n        expires_in:\n          type: integer\n          description: Lifetime in seconds\n        expires_at:\n          type: string\n          format: date-time\n          description: ISO 8601 timestamp of expiration\n        scopes:\n          type: array\n          items:\n            type: string\n          description: Granted scopes\n        token_id:\n          type: string\n          description: Server-issued identifier for this token\n    AuthError:\n      type: object\n      required: [code, message]\n      properties:\n        code:\n          type: string\n          example: invalid_grant\n          description: OAuth-style error code\n        message:\n          type: string\n          example: The provided client credentials are invalid.\n          description: Human-readable error message\n        details:\n          type: object\n          description: Additional error details\n  parameters:\n    Authorization:\n      name: Authorization\n      in: header\n      required: true\n      schema:\n        type: string\n        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n    Content-Type:\n      name: Content-Type\n      in: header\n      required: true\n      schema:\n        type: string\n        example: application/json\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    LongTokenAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: Long-term JWT for exchanging to short-term tokens\n    ShortTokenAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: Short-term JWT for API operations\n    ClientKey:\n      type: apiKey\n      in: header\n      name: X-Client-Id\n      description: Client identifier for additional security\n  responses:\n    Error400:\n      description: Bad request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AuthError'\n          examples:\n            invalidGrant:\n              value:\n                code: invalid_grant\n                message: The grant type is not supported\n    Error401:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AuthError'\n          examples:\n            invalidToken:\n              value:\n                code: invalid_token\n                message: The provided token is expired or invalid\n    Error403:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AuthError'\n          examples:\n            insufficientScope:\n              value:\n                code: insufficient_scope\n                message: The token lacks the required scope for this operation\n    Error404:\n      description: Not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AuthError'\n          examples:\n            notFound:\n              value:\n                code: not_found\n                message: The requested resource was not found\n    Error429:\n      description: Too Many Requests\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/AuthError'\n          examples:\n            rateLimited:\n              value:\n                code: rate_limited\n                message: Too many requests. Please retry after 60 seconds.\nsecurity:\n  - bearerAuth: []\npaths:\n  /jobs/single-doc-job-template:\n    post:\n      summary: Operation for /jobs/single-doc-job-template\n      operationId: submitSingleDocWithTemplateParams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                jobTemplate:\n                  $ref: '#/components/schemas/jobTemplate'\n                paymentDetails:\n                  $ref: '#/components/schemas/paymentDetails'\n                tags:\n                  $ref: '#/components/schemas/tags'\n              required:\n                - jobTemplate\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardResponse'\n        '400':\n          description: Invalid request\n        '401':\n          description: Unauthorized\n  /jobs/multi-docs-job-template:\n    post:\n      summary: Operation for /jobs/multi-docs-job-template\n      operationId: submitMultiDocWithTemplateParams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                items:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      documentSourceIdentifier:\n                        $ref: '#/components/schemas/documentSourceIdentifier'\n                      recipientAddressSource:\n                        $ref: '#/components/schemas/recipientAddressSource'\n                    required:\n                      - documentSourceIdentifier\n                      - recipientAddressSource\n                jobTemplate:\n                  $ref: '#/components/schemas/jobTemplate'\n                paymentDetails:\n                  $ref: '#/components/schemas/paymentDetails'\n                tags:\n                  $ref: '#/components/schemas/tags'\n              required:\n                - items\n                - jobTemplate\n                - paymentDetails\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardResponse'\n        '400':\n          description: Invalid request\n        '401':\n          description: Unauthorized\n  /jobs/multi-doc-merge-job-template:\n    post:\n      summary: Operation for /jobs/multi-doc-merge-job-template\n      operationId: mergeMultiDocWithTemplateParams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                documentsToMerge:\n                  $ref: '#/components/schemas/documentsToMerge'\n                recipientAddressSource:\n                  $ref: '#/components/schemas/recipientAddressSource'\n                jobTemplate:\n                  $ref: '#/components/schemas/jobTemplate'\n                paymentDetails:\n                  $ref: '#/components/schemas/paymentDetails'\n                tags:\n                  $ref: '#/components/schemas/tags'\n              required:\n                - documentsToMerge\n                - recipientAddressSource\n                - jobTemplate\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardResponse'\n        '400':\n          description: Invalid request\n        '401':\n          description: Unauthorized\n  /jobs/single-doc:\n    post:\n      summary: Operation for /jobs/single-doc\n      operationId: singleDocJobParams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                documentSourceIdentifier:\n                  $ref: '#/components/schemas/documentSourceIdentifier'\n                recipientAddressSources:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/recipientAddressSource'\n                jobOptions:\n                  $ref: '#/components/schemas/jobOptions'\n                paymentDetails:\n                  $ref: '#/components/schemas/paymentDetails'\n                tags:\n                  $ref: '#/components/schemas/tags'\n              required:\n                - documentSourceIdentifier\n                - recipientAddressSources\n                - jobOptions\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardResponse'\n        '400':\n          description: Invalid request\n        '401':\n          description: Unauthorized\n  /jobs/multi-doc:\n    post:\n      summary: Operation for /jobs/multi-doc\n      operationId: submitMultiDocParams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                items:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      documentSourceIdentifier:\n                        $ref: '#/components/schemas/documentSourceIdentifier'\n                      recipientAddressSource:\n                        $ref: '#/components/schemas/recipientAddressSource'\n                    required:\n                      - documentSourceIdentifier\n                      - recipientAddressSource\n                jobOptions:\n                  $ref: '#/components/schemas/jobOptions'\n                paymentDetails:\n                  $ref: '#/components/schemas/paymentDetails'\n                tags:\n                  $ref: '#/components/schemas/tags'\n              required:\n                - items\n                - jobOptions\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardResponse'\n        '400':\n          description: Invalid request\n        '401':\n          description: Unauthorized\n  /jobs/multi-doc-merge:\n    post:\n      summary: Operation for /jobs/multi-doc-merge\n      operationId: mergeMultiDocParams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                documentsToMerge:\n                  $ref: '#/components/schemas/documentsToMerge'\n                recipientAddressSource:\n                  $ref: '#/components/schemas/recipientAddressSource'\n                tags:\n                  $ref: '#/components/schemas/tags'\n              required:\n                - documentsToMerge\n                - recipientAddressSource\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardResponse'\n        '400':\n          description: Invalid request\n        '401':\n          description: Unauthorized\n  /jobs/single-pdf-split:\n    post:\n      summary: Operation for /jobs/single-pdf-split\n      operationId: splitPdfParams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                documentSourceIdentifier:\n                  $ref: '#/components/schemas/documentSourceIdentifier'\n                items:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      pageRange:\n                        $ref: '#/components/schemas/pageRange'\n                      recipientAddressSources:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/recipientAddressSource'\n                    required:\n                      - pageRange\n                      - recipientAddressSources\n                paymentDetails:\n                  $ref: '#/components/schemas/paymentDetails'\n                tags:\n                  $ref: '#/components/schemas/tags'\n              required:\n                - documentSourceIdentifier\n                - items\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardResponse'\n        '400':\n          description: Invalid request\n        '401':\n          description: Unauthorized\n  /jobs/single-pdf-split-addressCapture:\n    post:\n      summary: Operation for /jobs/single-pdf-split-addressCapture\n      operationId: splitPdfWithCaptureParams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                documentSourceIdentifier:\n                  $ref: '#/components/schemas/documentSourceIdentifier'\n                embeddedExtractionSpecs:\n                  $ref: '#/components/schemas/embeddedExtractionSpecs'\n                paymentDetails:\n                  $ref: '#/components/schemas/paymentDetails'\n                tags:\n                  $ref: '#/components/schemas/tags'\n              required:\n                - documentSourceIdentifier\n                - embeddedExtractionSpecs\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardResponse'\n        '400':\n          description: Invalid request\n        '401':\n          description: Unauthorized\n  /jobs/multi-pdf-address-capture:\n    post:\n      summary: Operation for /jobs/multi-pdf-address-capture\n      operationId: multiPdfWithCaptureParams\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                addressCapturePdfs:\n                  $ref: '#/components/schemas/addressCapturePdfs'\n                jobTemplate:\n                  $ref: '#/components/schemas/jobTemplate'\n                paymentDetails:\n                  $ref: '#/components/schemas/paymentDetails'\n                tags:\n                  $ref: '#/components/schemas/tags'\n              required:\n                - addressCapturePdfs\n                - jobTemplate\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardResponse'\n        '400':\n          description: Invalid request\n        '401':\n          description: Unauthorized\n  /auth/tokens/short:\n    post:\n      tags: [auth]\n      operationId: issueShortTermToken\n      summary: Issue a short-term access token\n      description: |\n        Exchange a valid long-term token for a short-lived JWT (e.g., 15 minutes).\n        The long-term token must be sent in the Authorization header as `Bearer <long_token>`.\n      security:\n        - LongTokenAuth: []\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ShortTokenRequest'\n            examples:\n              withScopes:\n                value:\n                  scopes: [\"jobs:submit\", \"templates:read\"]\n      responses:\n        '201':\n          description: Short-term token issued\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShortTokenResponse'\n              examples:\n                success:\n                  value:\n                    token_type: Bearer\n                    access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n                    expires_in: 900\n                    expires_at: \"2025-08-26T22:45:00Z\"\n                    scopes: [\"jobs:submit\", \"templates:read\"]\n                    token_id: \"tok_st_9f3d2c\"\n        '400':\n          $ref: '#/components/responses/Error400'\n        '401':\n          $ref: '#/components/responses/Error401'\n        '429':\n          $ref: '#/components/responses/Error429'\n  /auth/tokens/long:\n    post:\n      tags: [auth]\n      operationId: issueLongTermToken\n      summary: Issue or rotate a long-term token\n      description: |\n        Issues a long-term token (e.g., 30-90 days) for automation or server-to-server use.\n        Requires step-up authentication. Choose one of the supported grant types:\n\n        - `client_credentials` + `client_secret`\n        - `client_credentials` + one-time `otp_code`\n        - `assertion` (e.g., signed JWT by your private key)\n        - Or an existing short-term token with the `tokens:write` scope\n\n        Only one mechanism is required per call.\n      security:\n        - ShortTokenAuth: [\"tokens:write\"]\n        - ClientKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LongTokenRequest'\n            examples:\n              clientSecret:\n                value:\n                  grant_type: client_credentials\n                  client_id: \"c2m_abc123\"\n                  client_secret: \"supersecret123\"\n                  scopes: [\"jobs:submit\", \"templates:read\"]\n                  ttl_seconds: 7776000 # 90 days\n              otp:\n                value:\n                  grant_type: client_credentials\n                  client_id: \"c2m_abc123\"\n                  otp_code: \"123456\"\n                  scopes: [\"jobs:*\"]\n                  ttl_seconds: 2592000 # 30 days\n              assertion:\n                value:\n                  grant_type: assertion\n                  client_id: \"c2m_abc123\"\n                  assertion_type: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"\n                  assertion: \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...\"\n                  scopes: [\"jobs:submit\", \"templates:read\"]\n      responses:\n        '201':\n          description: Long-term token issued\n          headers:\n            X-Token-Id:\n              description: Server-generated identifier for revocation and audit\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LongTokenResponse'\n              examples:\n                success:\n                  value:\n                    token_type: Bearer\n                    access_token: \"lt_0d51e9bd2f6449cf...\"\n                    expires_in: 2592000\n                    expires_at: \"2025-09-25T22:45:00Z\"\n                    scopes: [\"jobs:*\"]\n                    token_id: \"tok_lt_b8e0aa\"\n        '400':\n          $ref: '#/components/responses/Error400'\n        '401':\n          $ref: '#/components/responses/Error401'\n        '403':\n          $ref: '#/components/responses/Error403'\n        '429':\n          $ref: '#/components/responses/Error429'\n  /auth/tokens/{tokenId}/revoke:\n    post:\n      tags: [auth]\n      operationId: revokeToken\n      summary: Revoke a token\n      description: Revokes a short- or long-term token by its `tokenId`. Idempotent.\n      security:\n        - ShortTokenAuth: [\"tokens:revoke\"]\n        - LongTokenAuth: [\"tokens:revoke\"]\n      parameters:\n        - name: tokenId\n          in: path\n          required: true\n          schema:\n            type: string\n          description: The token ID to revoke\n      responses:\n        '204':\n          description: Revoked (idempotent)\n        '401':\n          $ref: '#/components/responses/Error401'\n        '404':\n          $ref: '#/components/responses/Error404'"
    }
  ]
}
