openapi: 3.0.3
info:
  description: API for submitting documents with various routing options
  title: C2M API v2 - Auth Overlay
  version: 2.0.0
servers:
- description: Production server
  url: https://api.example.com/v1
- description: Mock server
  url: http://localhost:4010
security:
- bearerAuth: []
paths:
  /jobs/single-doc-job-template:
    post:
      operationId: submitSingleDocWithTemplateParams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/submitSingleDocWithTemplateParams_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
          description: Success
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
      summary: Operation for /jobs/single-doc-job-template
  /jobs/multi-docs-job-template:
    post:
      operationId: submitMultiDocWithTemplateParams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/submitMultiDocWithTemplateParams_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
          description: Success
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
      summary: Operation for /jobs/multi-docs-job-template
  /jobs/multi-doc-merge-job-template:
    post:
      operationId: mergeMultiDocWithTemplateParams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mergeMultiDocWithTemplateParams_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
          description: Success
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
      summary: Operation for /jobs/multi-doc-merge-job-template
  /jobs/single-doc:
    post:
      operationId: singleDocJobParams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/singleDocJobParams_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
          description: Success
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
      summary: Operation for /jobs/single-doc
  /jobs/multi-doc:
    post:
      operationId: submitMultiDocParams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/submitMultiDocParams_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
          description: Success
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
      summary: Operation for /jobs/multi-doc
  /jobs/multi-doc-merge:
    post:
      operationId: mergeMultiDocParams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/mergeMultiDocParams_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
          description: Success
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
      summary: Operation for /jobs/multi-doc-merge
  /jobs/single-pdf-split:
    post:
      operationId: splitPdfParams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/splitPdfParams_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
          description: Success
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
      summary: Operation for /jobs/single-pdf-split
  /jobs/single-pdf-split-addressCapture:
    post:
      operationId: splitPdfWithCaptureParams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/splitPdfWithCaptureParams_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
          description: Success
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
      summary: Operation for /jobs/single-pdf-split-addressCapture
  /jobs/multi-pdf-address-capture:
    post:
      operationId: multiPdfWithCaptureParams
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/multiPdfWithCaptureParams_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
          description: Success
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
      summary: Operation for /jobs/multi-pdf-address-capture
  /auth/tokens/short:
    post:
      description: |
        Exchange a valid long-term token for a short-lived JWT (e.g., 15 minutes).
        The long-term token must be sent in the Authorization header as `Bearer <long_token>`.
      operationId: issueShortTermToken
      requestBody:
        content:
          application/json:
            examples:
              withScopes:
                value:
                  scopes:
                  - jobs:submit
                  - templates:read
            schema:
              $ref: "#/components/schemas/ShortTokenRequest"
        required: false
      responses:
        "201":
          content:
            application/json:
              examples:
                success:
                  value:
                    token_type: Bearer
                    access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    expires_in: 900
                    expires_at: 2025-08-26T22:45:00Z
                    scopes:
                    - jobs:submit
                    - templates:read
                    token_id: tok_st_9f3d2c
              schema:
                $ref: "#/components/schemas/ShortTokenResponse"
          description: Short-term token issued
        "400":
          content:
            application/json:
              examples:
                invalidGrant:
                  value:
                    code: invalid_grant
                    message: The grant type is not supported
              schema:
                $ref: "#/components/schemas/AuthError"
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                invalidToken:
                  value:
                    code: invalid_token
                    message: The provided token is expired or invalid
              schema:
                $ref: "#/components/schemas/AuthError"
          description: Unauthorized
        "429":
          content:
            application/json:
              examples:
                rateLimited:
                  value:
                    code: rate_limited
                    message: Too many requests. Please retry after 60 seconds.
              schema:
                $ref: "#/components/schemas/AuthError"
          description: Too Many Requests
      security:
      - LongTokenAuth: []
      summary: Issue a short-term access token
      tags:
      - auth
  /auth/tokens/long:
    post:
      description: |
        Issues a long-term token (e.g., 30-90 days) for automation or server-to-server use.
        Requires step-up authentication. Choose one of the supported grant types:

        - `client_credentials` + `client_secret`
        - `client_credentials` + one-time `otp_code`
        - `assertion` (e.g., signed JWT by your private key)
        - Or an existing short-term token with the `tokens:write` scope

        Only one mechanism is required per call.
      operationId: issueLongTermToken
      requestBody:
        content:
          application/json:
            examples:
              clientSecret:
                value:
                  grant_type: client_credentials
                  client_id: c2m_abc123
                  client_secret: supersecret123
                  scopes:
                  - jobs:submit
                  - templates:read
                  ttl_seconds: 7776000
              otp:
                value:
                  grant_type: client_credentials
                  client_id: c2m_abc123
                  otp_code: "123456"
                  scopes:
                  - jobs:*
                  ttl_seconds: 2592000
              assertion:
                value:
                  grant_type: assertion
                  client_id: c2m_abc123
                  assertion_type: urn:ietf:params:oauth:client-assertion-type:jwt-bearer
                  assertion: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
                  scopes:
                  - jobs:submit
                  - templates:read
            schema:
              $ref: "#/components/schemas/LongTokenRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                success:
                  value:
                    token_type: Bearer
                    access_token: lt_0d51e9bd2f6449cf...
                    expires_in: 2592000
                    expires_at: 2025-09-25T22:45:00Z
                    scopes:
                    - jobs:*
                    token_id: tok_lt_b8e0aa
              schema:
                $ref: "#/components/schemas/LongTokenResponse"
          description: Long-term token issued
          headers:
            X-Token-Id:
              description: Server-generated identifier for revocation and audit
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              examples:
                invalidGrant:
                  value:
                    code: invalid_grant
                    message: The grant type is not supported
              schema:
                $ref: "#/components/schemas/AuthError"
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                invalidToken:
                  value:
                    code: invalid_token
                    message: The provided token is expired or invalid
              schema:
                $ref: "#/components/schemas/AuthError"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                insufficientScope:
                  value:
                    code: insufficient_scope
                    message: The token lacks the required scope for this operation
              schema:
                $ref: "#/components/schemas/AuthError"
          description: Forbidden
        "429":
          content:
            application/json:
              examples:
                rateLimited:
                  value:
                    code: rate_limited
                    message: Too many requests. Please retry after 60 seconds.
              schema:
                $ref: "#/components/schemas/AuthError"
          description: Too Many Requests
      security:
      - ShortTokenAuth:
        - tokens:write
      - ClientKey: []
      summary: Issue or rotate a long-term token
      tags:
      - auth
  /auth/tokens/{tokenId}/revoke:
    post:
      description: Revokes a short- or long-term token by its `tokenId`. Idempotent.
      operationId: revokeToken
      parameters:
      - description: The token ID to revoke
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Revoked (idempotent)
        "401":
          content:
            application/json:
              examples:
                invalidToken:
                  value:
                    code: invalid_token
                    message: The provided token is expired or invalid
              schema:
                $ref: "#/components/schemas/AuthError"
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                notFound:
                  value:
                    code: not_found
                    message: The requested resource was not found
              schema:
                $ref: "#/components/schemas/AuthError"
          description: Not found
      security:
      - ShortTokenAuth:
        - tokens:revoke
      - LongTokenAuth:
        - tokens:revoke
      summary: Revoke a token
      tags:
      - auth
components:
  parameters:
    Authorization:
      explode: false
      in: header
      name: Authorization
      required: true
      schema:
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      style: simple
    Content-Type:
      explode: false
      in: header
      name: Content-Type
      required: true
      schema:
        example: application/json
        type: string
      style: simple
  responses:
    Error400:
      content:
        application/json:
          examples:
            invalidGrant:
              value:
                code: invalid_grant
                message: The grant type is not supported
          schema:
            $ref: "#/components/schemas/AuthError"
      description: Bad request
    Error401:
      content:
        application/json:
          examples:
            invalidToken:
              value:
                code: invalid_token
                message: The provided token is expired or invalid
          schema:
            $ref: "#/components/schemas/AuthError"
      description: Unauthorized
    Error403:
      content:
        application/json:
          examples:
            insufficientScope:
              value:
                code: insufficient_scope
                message: The token lacks the required scope for this operation
          schema:
            $ref: "#/components/schemas/AuthError"
      description: Forbidden
    Error404:
      content:
        application/json:
          examples:
            notFound:
              value:
                code: not_found
                message: The requested resource was not found
          schema:
            $ref: "#/components/schemas/AuthError"
      description: Not found
    Error429:
      content:
        application/json:
          examples:
            rateLimited:
              value:
                code: rate_limited
                message: Too many requests. Please retry after 60 seconds.
          schema:
            $ref: "#/components/schemas/AuthError"
      description: Too Many Requests
  schemas:
    documentName:
      type: string
    firstName:
      type: string
    lastName:
      type: string
    nickName:
      type: string
    address1:
      type: string
    address2:
      type: string
    address3:
      type: string
    city:
      type: string
    state:
      type: string
    country:
      type: string
    zip:
      type: string
    phoneNumber:
      type: string
    externalUrl:
      format: uri
      type: string
    tag:
      type: string
    tags:
      items:
        type: string
      type: array
    jobTemplate:
      type: string
    invoiceNumber:
      type: string
    routingNumber:
      type: string
    accountNumber:
      type: string
    cardNumber:
      type: string
    delimiter:
      type: string
    tbd:
      type: string
    documentId:
      type: integer
    addressId:
      type: integer
    addressListId:
      type: integer
    uploadRequestId:
      type: integer
    zipId:
      type: integer
    startPage:
      type: integer
    endPage:
      type: integer
    month:
      maximum: 12
      minimum: 1
      type: integer
    year:
      type: integer
    cvv:
      type: integer
    checkDigit:
      type: integer
    pageOffset:
      type: integer
    amountDue:
      type: number
    amount:
      type: number
    x:
      type: number
    "y":
      type: number
    width:
      type: number
    height:
      type: number
    submitSingleDocWithTemplateParams:
      properties:
        jobTemplate:
          type: string
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - jobTemplate
      type: object
    submitMultiDocWithTemplateParams:
      properties:
        items:
          items:
            $ref: "#/components/schemas/submitMultiDocWithTemplateParams_request_items_inner"
          type: array
        jobTemplate:
          type: string
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - items
      - jobTemplate
      - paymentDetails
      type: object
    mergeMultiDocWithTemplateParams:
      properties:
        documentsToMerge:
          items:
            $ref: "#/components/schemas/documentSourceIdentifier"
          type: array
        recipientAddressSource:
          $ref: "#/components/schemas/recipientAddressSource"
        jobTemplate:
          type: string
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - documentsToMerge
      - jobTemplate
      - recipientAddressSource
      type: object
    singleDocJobParams:
      properties:
        documentSourceIdentifier:
          $ref: "#/components/schemas/documentSourceIdentifier"
        recipientAddressSources:
          items:
            $ref: "#/components/schemas/recipientAddressSource"
          type: array
        jobOptions:
          $ref: "#/components/schemas/jobOptions"
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - documentSourceIdentifier
      - jobOptions
      - recipientAddressSources
      type: object
    submitMultiDocParams:
      properties:
        items:
          items:
            $ref: "#/components/schemas/submitMultiDocWithTemplateParams_request_items_inner"
          type: array
        jobOptions:
          $ref: "#/components/schemas/jobOptions"
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - items
      - jobOptions
      type: object
    mergeMultiDocParams:
      properties:
        documentsToMerge:
          items:
            $ref: "#/components/schemas/documentSourceIdentifier"
          type: array
        recipientAddressSource:
          $ref: "#/components/schemas/recipientAddressSource"
        tags:
          items:
            type: string
          type: array
      required:
      - documentsToMerge
      - recipientAddressSource
      type: object
    documentsToMerge:
      items:
        $ref: "#/components/schemas/documentSourceIdentifier"
      type: array
    splitPdfParams:
      properties:
        documentSourceIdentifier:
          $ref: "#/components/schemas/documentSourceIdentifier"
        items:
          items:
            $ref: "#/components/schemas/splitPdfParams_request_items_inner"
          type: array
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - documentSourceIdentifier
      - items
      type: object
    pageRange:
      properties:
        startPage:
          type: integer
        endPage:
          type: integer
      required:
      - endPage
      - startPage
      type: object
    splitPdfWithCaptureParams:
      properties:
        documentSourceIdentifier:
          $ref: "#/components/schemas/documentSourceIdentifier"
        embeddedExtractionSpecs:
          items:
            $ref: "#/components/schemas/extractionSpec"
          type: array
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - documentSourceIdentifier
      - embeddedExtractionSpecs
      type: object
    embeddedExtractionSpecs:
      items:
        $ref: "#/components/schemas/extractionSpec"
      type: array
    extractionSpec:
      properties:
        startPage:
          type: integer
        endPage:
          type: integer
        addressRegion:
          $ref: "#/components/schemas/addressRegion"
      required:
      - addressRegion
      - endPage
      - startPage
      type: object
    addressRegion:
      properties:
        x:
          type: number
        "y":
          type: number
        width:
          type: number
        height:
          type: number
        pageOffset:
          type: integer
      required:
      - height
      - pageOffset
      - width
      - x
      - "y"
      type: object
    multiPdfWithCaptureParams:
      properties:
        addressCapturePdfs:
          items:
            $ref: "#/components/schemas/addressListPdf"
          type: array
        jobTemplate:
          type: string
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - addressCapturePdfs
      - jobTemplate
      type: object
    addressCapturePdfs:
      items:
        $ref: "#/components/schemas/addressListPdf"
      type: array
    addressListPdf:
      properties:
        documentSourceIdentifier:
          $ref: "#/components/schemas/documentSourceIdentifier"
        addressListRegion:
          type: string
        delimiter:
          type: string
        tags:
          items:
            type: string
          type: array
      required:
      - addressListRegion
      - documentSourceIdentifier
      type: object
    addressListRegion:
      $ref: "#/components/schemas/tbd"
    documentSourceIdentifier:
      oneOf:
      - $ref: "#/components/schemas/documentId"
      - $ref: "#/components/schemas/externalUrl"
      - $ref: "#/components/schemas/documentSourceIdentifier_oneOf"
      - $ref: "#/components/schemas/documentSourceIdentifier_oneOf_1"
      - $ref: "#/components/schemas/documentSourceIdentifier_oneOf_2"
    recipientAddressSource:
      oneOf:
      - $ref: "#/components/schemas/exactlyOneNewAddress"
      - $ref: "#/components/schemas/exactlyOneListId"
      - $ref: "#/components/schemas/exactlyOneId"
    exactlyOneNewAddress:
      $ref: "#/components/schemas/recipientAddress"
    exactlyOneListId:
      $ref: "#/components/schemas/addressListId"
    exactlyOneId:
      $ref: "#/components/schemas/addressId"
    recipientAddress:
      properties:
        firstName:
          type: string
        lastName:
          type: string
        address1:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        country:
          type: string
        nickName:
          type: string
        address2:
          type: string
        address3:
          type: string
        phoneNumber:
          type: string
      required:
      - address1
      - city
      - country
      - firstName
      - lastName
      - state
      - zip
      type: object
    jobOptions:
      properties:
        documentClass:
          $ref: "#/components/schemas/documentClass"
        layout:
          $ref: "#/components/schemas/layout"
        mailclass:
          $ref: "#/components/schemas/mailclass"
        paperType:
          $ref: "#/components/schemas/paperType"
        printOption:
          $ref: "#/components/schemas/printOption"
        envelope:
          $ref: "#/components/schemas/envelope"
      required:
      - documentClass
      - envelope
      - layout
      - mailclass
      - paperType
      - printOption
      type: object
    paymentDetails:
      oneOf:
      - $ref: "#/components/schemas/creditCardPayment"
      - $ref: "#/components/schemas/invoicePayment"
      - $ref: "#/components/schemas/achPayment"
      - $ref: "#/components/schemas/userCreditPayment"
      - $ref: "#/components/schemas/applePayPayment"
      - $ref: "#/components/schemas/googlePayPayment"
    applePayPayment:
      properties:
        applePaymentDetails:
          type: object
      required:
      - applePaymentDetails
      type: object
    googlePayPayment:
      properties:
        googlePaymentDetails:
          type: object
      required:
      - googlePaymentDetails
      type: object
    creditCardPayment:
      properties:
        creditCardDetails:
          $ref: "#/components/schemas/creditCardDetails"
      required:
      - creditCardDetails
      type: object
    invoicePayment:
      properties:
        invoiceDetails:
          $ref: "#/components/schemas/invoiceDetails"
      required:
      - invoiceDetails
      type: object
    achPayment:
      properties:
        achDetails:
          $ref: "#/components/schemas/achDetails"
      required:
      - achDetails
      type: object
    userCreditPayment:
      properties:
        creditAmount:
          $ref: "#/components/schemas/creditAmount"
      required:
      - creditAmount
      type: object
    creditCardDetails:
      properties:
        cardType:
          $ref: "#/components/schemas/cardType"
        cardNumber:
          type: string
        expirationDate:
          $ref: "#/components/schemas/expirationDate"
        cvv:
          type: integer
      required:
      - cardNumber
      - cardType
      - cvv
      - expirationDate
      type: object
    invoiceDetails:
      properties:
        invoiceNumber:
          type: string
        amountDue:
          type: number
      required:
      - amountDue
      - invoiceNumber
      type: object
    achDetails:
      properties:
        routingNumber:
          type: string
        accountNumber:
          type: string
        checkDigit:
          type: integer
      required:
      - accountNumber
      - checkDigit
      - routingNumber
      type: object
    creditAmount:
      properties:
        amount:
          type: number
        currency:
          $ref: "#/components/schemas/currency"
      required:
      - amount
      - currency
      type: object
    applePaymentDetails:
      type: object
    googlePaymentDetails:
      type: object
    currency:
      enum:
      - USD
      - EUR
      - GBP
      - CAD
      - AUD
      type: string
    cardType:
      enum:
      - visa
      - mastercard
      - discover
      - americanExpress
      type: string
    expirationDate:
      properties:
        month:
          maximum: 12
          minimum: 1
          type: integer
        year:
          type: integer
      required:
      - month
      - year
      type: object
    digit:
      enum:
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      - "8"
      - "9"
      type: string
    documentFormat:
      enum:
      - pdf
      - doc
      - docx
      - pub
      - ppt
      - pptx
      - png
      - jpeg
      - odt
      type: string
    printOption:
      enum:
      - none
      - color
      - grayscale
      type: string
    envelope:
      enum:
      - flat
      - windowedFlat
      - letter
      - legal
      - postcard
      type: string
    paperType:
      enum:
      - letter
      - legal
      - postcard
      type: string
    layout:
      enum:
      - portrait
      - landscape
      type: string
    mailclass:
      enum:
      - firstClassMail
      - priorityMail
      - largeEnvelope
      type: string
    documentClass:
      enum:
      - businessLetter
      - personalLetter
      type: string
    StandardResponse:
      example:
        jobId: jobId
        message: message
        status: status
      properties:
        status:
          type: string
        message:
          type: string
        jobId:
          type: string
      type: object
    ShortTokenRequest:
      additionalProperties: false
      example:
        long_token: long_token
        scopes:
        - scopes
        - scopes
      properties:
        long_token:
          description: Optional if the long-term token is provided in Authorization
            header
          type: string
        scopes:
          description: Optional scope narrowing; defaults to the long-term token's
            scopes
          items:
            type: string
          type: array
      type: object
    ShortTokenResponse:
      example:
        access_token: access_token
        expires_at: 2000-01-23T04:56:07.000+00:00
        token_id: token_id
        scopes:
        - scopes
        - scopes
        token_type: Bearer
        expires_in: 0
      properties:
        token_type:
          enum:
          - Bearer
          type: string
        access_token:
          description: Short-lived JWT
          type: string
        expires_in:
          description: "Lifetime in seconds (e.g., 900 for 15 minutes)"
          type: integer
        expires_at:
          description: ISO 8601 timestamp of expiration
          format: date-time
          type: string
        scopes:
          description: Granted scopes
          items:
            type: string
          type: array
        token_id:
          description: Server-issued identifier for this token
          type: string
      required:
      - access_token
      - expires_at
      - expires_in
      - token_type
      type: object
    LongTokenRequest:
      additionalProperties: false
      description: One of several credential mechanisms must be provided.
      example:
        grant_type: client_credentials
        ttl_seconds: 626035
        assertion: assertion
        client_secret: client_secret
        scopes:
        - scopes
        - scopes
        otp_code: otp_code
        client_id: client_id
        assertion_type: assertion_type
      properties:
        grant_type:
          description: The authentication grant type
          enum:
          - client_credentials
          - assertion
          type: string
        client_id:
          description: Client identifier issued by Click2Mail
          type: string
        client_secret:
          description: Required if using client_credentials with secret
          type: string
        otp_code:
          description: Required if your policy mandates OTP for issuance
          type: string
        assertion_type:
          description: Required when grant_type=assertion
          type: string
        assertion:
          description: Signed JWT or other accepted assertion
          type: string
        scopes:
          description: Scopes to assign to the long-term token
          items:
            type: string
          type: array
        ttl_seconds:
          description: Requested lifetime (1 hour - 90 days). Server may clamp.
          maximum: 7776000
          minimum: 3600
          type: integer
      required:
      - client_id
      - grant_type
      type: object
    LongTokenResponse:
      example:
        access_token: access_token
        expires_at: 2000-01-23T04:56:07.000+00:00
        token_id: token_id
        scopes:
        - scopes
        - scopes
        token_type: Bearer
        expires_in: 0
      properties:
        token_type:
          enum:
          - Bearer
          type: string
        access_token:
          description: Long-lived token (opaque or JWT depending on deployment)
          type: string
        expires_in:
          description: Lifetime in seconds
          type: integer
        expires_at:
          description: ISO 8601 timestamp of expiration
          format: date-time
          type: string
        scopes:
          description: Granted scopes
          items:
            type: string
          type: array
        token_id:
          description: Server-issued identifier for this token
          type: string
      required:
      - access_token
      - expires_at
      - expires_in
      - token_type
      type: object
    AuthError:
      example:
        code: invalid_grant
        details: "{}"
        message: The provided client credentials are invalid.
      properties:
        code:
          description: OAuth-style error code
          example: invalid_grant
          type: string
        message:
          description: Human-readable error message
          example: The provided client credentials are invalid.
          type: string
        details:
          description: Additional error details
          type: object
      required:
      - code
      - message
      type: object
    submitSingleDocWithTemplateParams_request:
      properties:
        jobTemplate:
          type: string
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - jobTemplate
      type: object
    submitMultiDocWithTemplateParams_request_items_inner:
      properties:
        documentSourceIdentifier:
          $ref: "#/components/schemas/documentSourceIdentifier"
        recipientAddressSource:
          $ref: "#/components/schemas/recipientAddressSource"
      required:
      - documentSourceIdentifier
      - recipientAddressSource
      type: object
    submitMultiDocWithTemplateParams_request:
      properties:
        items:
          items:
            $ref: "#/components/schemas/submitMultiDocWithTemplateParams_request_items_inner"
          type: array
        jobTemplate:
          type: string
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - items
      - jobTemplate
      - paymentDetails
      type: object
    mergeMultiDocWithTemplateParams_request:
      properties:
        documentsToMerge:
          items:
            $ref: "#/components/schemas/documentSourceIdentifier"
          type: array
        recipientAddressSource:
          $ref: "#/components/schemas/recipientAddressSource"
        jobTemplate:
          type: string
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - documentsToMerge
      - jobTemplate
      - recipientAddressSource
      type: object
    singleDocJobParams_request:
      properties:
        documentSourceIdentifier:
          $ref: "#/components/schemas/documentSourceIdentifier"
        recipientAddressSources:
          items:
            $ref: "#/components/schemas/recipientAddressSource"
          type: array
        jobOptions:
          $ref: "#/components/schemas/jobOptions"
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - documentSourceIdentifier
      - jobOptions
      - recipientAddressSources
      type: object
    submitMultiDocParams_request:
      properties:
        items:
          items:
            $ref: "#/components/schemas/submitMultiDocWithTemplateParams_request_items_inner"
          type: array
        jobOptions:
          $ref: "#/components/schemas/jobOptions"
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - items
      - jobOptions
      type: object
    mergeMultiDocParams_request:
      properties:
        documentsToMerge:
          items:
            $ref: "#/components/schemas/documentSourceIdentifier"
          type: array
        recipientAddressSource:
          $ref: "#/components/schemas/recipientAddressSource"
        tags:
          items:
            type: string
          type: array
      required:
      - documentsToMerge
      - recipientAddressSource
      type: object
    splitPdfParams_request_items_inner:
      properties:
        pageRange:
          $ref: "#/components/schemas/pageRange"
        recipientAddressSources:
          items:
            $ref: "#/components/schemas/recipientAddressSource"
          type: array
      required:
      - pageRange
      - recipientAddressSources
      type: object
    splitPdfParams_request:
      properties:
        documentSourceIdentifier:
          $ref: "#/components/schemas/documentSourceIdentifier"
        items:
          items:
            $ref: "#/components/schemas/splitPdfParams_request_items_inner"
          type: array
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - documentSourceIdentifier
      - items
      type: object
    splitPdfWithCaptureParams_request:
      properties:
        documentSourceIdentifier:
          $ref: "#/components/schemas/documentSourceIdentifier"
        embeddedExtractionSpecs:
          items:
            $ref: "#/components/schemas/extractionSpec"
          type: array
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - documentSourceIdentifier
      - embeddedExtractionSpecs
      type: object
    multiPdfWithCaptureParams_request:
      properties:
        addressCapturePdfs:
          items:
            $ref: "#/components/schemas/addressListPdf"
          type: array
        jobTemplate:
          type: string
        paymentDetails:
          $ref: "#/components/schemas/paymentDetails"
        tags:
          items:
            type: string
          type: array
      required:
      - addressCapturePdfs
      - jobTemplate
      type: object
    documentSourceIdentifier_oneOf:
      properties:
        uploadRequestId:
          type: integer
        documentName:
          type: string
      required:
      - documentName
      - uploadRequestId
      type: object
    documentSourceIdentifier_oneOf_1:
      properties:
        uploadRequestId:
          type: integer
        zipId:
          type: integer
        documentName:
          type: string
      required:
      - documentName
      - uploadRequestId
      - zipId
      type: object
    documentSourceIdentifier_oneOf_2:
      properties:
        zipId:
          type: integer
        documentName:
          type: string
      required:
      - documentName
      - zipId
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
    LongTokenAuth:
      bearerFormat: JWT
      description: Long-term JWT for exchanging to short-term tokens
      scheme: bearer
      type: http
    ShortTokenAuth:
      bearerFormat: JWT
      description: Short-term JWT for API operations
      scheme: bearer
      type: http
    ClientKey:
      description: Client identifier for additional security
      in: header
      name: X-Client-Id
      type: apiKey

