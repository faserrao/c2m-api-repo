/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using C2M.Api.Api;
using C2M.Api.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace C2M.Api.Test.Api
{
    /// <summary>
    ///  Class for testing AuthApi
    /// </summary>
    public sealed class AuthApiTests : ApiTestsBase
    {
        private readonly IAuthApi _instance;

        public AuthApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IAuthApi>();
        }

        /// <summary>
        /// Test IssueLongTermToken
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task IssueLongTermTokenAsyncTest()
        {
            LongTokenRequest longTokenRequest = default!;
            var response = await _instance.IssueLongTermTokenAsync(longTokenRequest);
            var model = response.Created();
            Assert.IsType<LongTokenResponse>(model);
        }

        /// <summary>
        /// Test IssueShortTermToken
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task IssueShortTermTokenAsyncTest()
        {
            Client.Option<ShortTokenRequest> shortTokenRequest = default!;
            var response = await _instance.IssueShortTermTokenAsync(shortTokenRequest);
            var model = response.Created();
            Assert.IsType<ShortTokenResponse>(model);
        }

        /// <summary>
        /// Test RevokeToken
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RevokeTokenAsyncTest()
        {
            string tokenId = default!;
            await _instance.RevokeTokenAsync(tokenId);
        }
    }
}
