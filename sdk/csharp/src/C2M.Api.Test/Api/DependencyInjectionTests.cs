/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using C2M.Api.Client;
using C2M.Api.Api;
using C2M.Api.Extensions;
using Xunit;

namespace C2M.Api.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_Client_Id, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);

                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);

                BearerToken bearerToken2 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken2);

                BearerToken bearerToken3 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken3);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_Client_Id, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);

                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);

                BearerToken bearerToken2 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken2);

                BearerToken bearerToken3 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken3);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_Client_Id, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);

                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);

                    BearerToken bearerToken2 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken2);

                    BearerToken bearerToken3 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken3);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_Client_Id, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);

                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);

                    BearerToken bearerToken2 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken2);

                    BearerToken bearerToken3 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken3);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var authApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAuthApi>();
            Assert.True(authApi.HttpClient.BaseAddress != null);

            var defaultApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var authApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAuthApi>();
            Assert.True(authApi.HttpClient.BaseAddress != null);

            var defaultApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var authApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAuthApi>();
            Assert.True(authApi.HttpClient.BaseAddress != null);
            
            var defaultApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var authApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAuthApi>();
            Assert.True(authApi.HttpClient.BaseAddress != null);

            var defaultApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);
        }
    }
}
