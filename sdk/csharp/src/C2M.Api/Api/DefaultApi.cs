// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using C2M.Api.Client;
using C2M.Api.Model;
using System.Diagnostics.CodeAnalysis;

namespace C2M.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IDefaultApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DefaultApiEvents Events { get; }

        /// <summary>
        /// Operation for /jobs/multi-doc-merge
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeMultiDocParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergeMultiDocParamsApiResponse"/>&gt;</returns>
        Task<IMergeMultiDocParamsApiResponse> MergeMultiDocParamsAsync(MergeMultiDocParamsRequest mergeMultiDocParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/multi-doc-merge
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="mergeMultiDocParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergeMultiDocParamsApiResponse"/>?&gt;</returns>
        Task<IMergeMultiDocParamsApiResponse?> MergeMultiDocParamsOrDefaultAsync(MergeMultiDocParamsRequest mergeMultiDocParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/multi-doc-merge-job-template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeMultiDocWithTemplateParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergeMultiDocWithTemplateParamsApiResponse"/>&gt;</returns>
        Task<IMergeMultiDocWithTemplateParamsApiResponse> MergeMultiDocWithTemplateParamsAsync(MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/multi-doc-merge-job-template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="mergeMultiDocWithTemplateParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergeMultiDocWithTemplateParamsApiResponse"/>?&gt;</returns>
        Task<IMergeMultiDocWithTemplateParamsApiResponse?> MergeMultiDocWithTemplateParamsOrDefaultAsync(MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/multi-pdf-address-capture
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="multiPdfWithCaptureParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultiPdfWithCaptureParamsApiResponse"/>&gt;</returns>
        Task<IMultiPdfWithCaptureParamsApiResponse> MultiPdfWithCaptureParamsAsync(MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/multi-pdf-address-capture
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="multiPdfWithCaptureParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultiPdfWithCaptureParamsApiResponse"/>?&gt;</returns>
        Task<IMultiPdfWithCaptureParamsApiResponse?> MultiPdfWithCaptureParamsOrDefaultAsync(MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/single-doc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="singleDocJobParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISingleDocJobParamsApiResponse"/>&gt;</returns>
        Task<ISingleDocJobParamsApiResponse> SingleDocJobParamsAsync(SingleDocJobParamsRequest singleDocJobParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/single-doc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="singleDocJobParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISingleDocJobParamsApiResponse"/>?&gt;</returns>
        Task<ISingleDocJobParamsApiResponse?> SingleDocJobParamsOrDefaultAsync(SingleDocJobParamsRequest singleDocJobParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/single-pdf-split
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="splitPdfParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISplitPdfParamsApiResponse"/>&gt;</returns>
        Task<ISplitPdfParamsApiResponse> SplitPdfParamsAsync(SplitPdfParamsRequest splitPdfParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/single-pdf-split
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="splitPdfParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISplitPdfParamsApiResponse"/>?&gt;</returns>
        Task<ISplitPdfParamsApiResponse?> SplitPdfParamsOrDefaultAsync(SplitPdfParamsRequest splitPdfParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/single-pdf-split-addressCapture
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="splitPdfWithCaptureParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISplitPdfWithCaptureParamsApiResponse"/>&gt;</returns>
        Task<ISplitPdfWithCaptureParamsApiResponse> SplitPdfWithCaptureParamsAsync(SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/single-pdf-split-addressCapture
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="splitPdfWithCaptureParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISplitPdfWithCaptureParamsApiResponse"/>?&gt;</returns>
        Task<ISplitPdfWithCaptureParamsApiResponse?> SplitPdfWithCaptureParamsOrDefaultAsync(SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/multi-doc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitMultiDocParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitMultiDocParamsApiResponse"/>&gt;</returns>
        Task<ISubmitMultiDocParamsApiResponse> SubmitMultiDocParamsAsync(SubmitMultiDocParamsRequest submitMultiDocParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/multi-doc
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="submitMultiDocParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitMultiDocParamsApiResponse"/>?&gt;</returns>
        Task<ISubmitMultiDocParamsApiResponse?> SubmitMultiDocParamsOrDefaultAsync(SubmitMultiDocParamsRequest submitMultiDocParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/multi-docs-job-template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitMultiDocWithTemplateParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitMultiDocWithTemplateParamsApiResponse"/>&gt;</returns>
        Task<ISubmitMultiDocWithTemplateParamsApiResponse> SubmitMultiDocWithTemplateParamsAsync(SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/multi-docs-job-template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="submitMultiDocWithTemplateParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitMultiDocWithTemplateParamsApiResponse"/>?&gt;</returns>
        Task<ISubmitMultiDocWithTemplateParamsApiResponse?> SubmitMultiDocWithTemplateParamsOrDefaultAsync(SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/single-doc-job-template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitSingleDocWithTemplateParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitSingleDocWithTemplateParamsApiResponse"/>&gt;</returns>
        Task<ISubmitSingleDocWithTemplateParamsApiResponse> SubmitSingleDocWithTemplateParamsAsync(SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Operation for /jobs/single-doc-job-template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="submitSingleDocWithTemplateParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitSingleDocWithTemplateParamsApiResponse"/>?&gt;</returns>
        Task<ISubmitSingleDocWithTemplateParamsApiResponse?> SubmitSingleDocWithTemplateParamsOrDefaultAsync(SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IMergeMultiDocParamsApiResponse"/>
    /// </summary>
    public interface IMergeMultiDocParamsApiResponse : C2M.Api.Client.IApiResponse, IOk<C2M.Api.Model.StandardResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IMergeMultiDocWithTemplateParamsApiResponse"/>
    /// </summary>
    public interface IMergeMultiDocWithTemplateParamsApiResponse : C2M.Api.Client.IApiResponse, IOk<C2M.Api.Model.StandardResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IMultiPdfWithCaptureParamsApiResponse"/>
    /// </summary>
    public interface IMultiPdfWithCaptureParamsApiResponse : C2M.Api.Client.IApiResponse, IOk<C2M.Api.Model.StandardResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="ISingleDocJobParamsApiResponse"/>
    /// </summary>
    public interface ISingleDocJobParamsApiResponse : C2M.Api.Client.IApiResponse, IOk<C2M.Api.Model.StandardResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="ISplitPdfParamsApiResponse"/>
    /// </summary>
    public interface ISplitPdfParamsApiResponse : C2M.Api.Client.IApiResponse, IOk<C2M.Api.Model.StandardResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="ISplitPdfWithCaptureParamsApiResponse"/>
    /// </summary>
    public interface ISplitPdfWithCaptureParamsApiResponse : C2M.Api.Client.IApiResponse, IOk<C2M.Api.Model.StandardResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="ISubmitMultiDocParamsApiResponse"/>
    /// </summary>
    public interface ISubmitMultiDocParamsApiResponse : C2M.Api.Client.IApiResponse, IOk<C2M.Api.Model.StandardResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="ISubmitMultiDocWithTemplateParamsApiResponse"/>
    /// </summary>
    public interface ISubmitMultiDocWithTemplateParamsApiResponse : C2M.Api.Client.IApiResponse, IOk<C2M.Api.Model.StandardResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="ISubmitSingleDocWithTemplateParamsApiResponse"/>
    /// </summary>
    public interface ISubmitSingleDocWithTemplateParamsApiResponse : C2M.Api.Client.IApiResponse, IOk<C2M.Api.Model.StandardResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DefaultApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnMergeMultiDocParams;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMergeMultiDocParams;

        internal void ExecuteOnMergeMultiDocParams(DefaultApi.MergeMultiDocParamsApiResponse apiResponse)
        {
            OnMergeMultiDocParams?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorMergeMultiDocParams(Exception exception)
        {
            OnErrorMergeMultiDocParams?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnMergeMultiDocWithTemplateParams;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMergeMultiDocWithTemplateParams;

        internal void ExecuteOnMergeMultiDocWithTemplateParams(DefaultApi.MergeMultiDocWithTemplateParamsApiResponse apiResponse)
        {
            OnMergeMultiDocWithTemplateParams?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorMergeMultiDocWithTemplateParams(Exception exception)
        {
            OnErrorMergeMultiDocWithTemplateParams?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnMultiPdfWithCaptureParams;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMultiPdfWithCaptureParams;

        internal void ExecuteOnMultiPdfWithCaptureParams(DefaultApi.MultiPdfWithCaptureParamsApiResponse apiResponse)
        {
            OnMultiPdfWithCaptureParams?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorMultiPdfWithCaptureParams(Exception exception)
        {
            OnErrorMultiPdfWithCaptureParams?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSingleDocJobParams;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSingleDocJobParams;

        internal void ExecuteOnSingleDocJobParams(DefaultApi.SingleDocJobParamsApiResponse apiResponse)
        {
            OnSingleDocJobParams?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSingleDocJobParams(Exception exception)
        {
            OnErrorSingleDocJobParams?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSplitPdfParams;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSplitPdfParams;

        internal void ExecuteOnSplitPdfParams(DefaultApi.SplitPdfParamsApiResponse apiResponse)
        {
            OnSplitPdfParams?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSplitPdfParams(Exception exception)
        {
            OnErrorSplitPdfParams?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSplitPdfWithCaptureParams;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSplitPdfWithCaptureParams;

        internal void ExecuteOnSplitPdfWithCaptureParams(DefaultApi.SplitPdfWithCaptureParamsApiResponse apiResponse)
        {
            OnSplitPdfWithCaptureParams?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSplitPdfWithCaptureParams(Exception exception)
        {
            OnErrorSplitPdfWithCaptureParams?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSubmitMultiDocParams;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSubmitMultiDocParams;

        internal void ExecuteOnSubmitMultiDocParams(DefaultApi.SubmitMultiDocParamsApiResponse apiResponse)
        {
            OnSubmitMultiDocParams?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSubmitMultiDocParams(Exception exception)
        {
            OnErrorSubmitMultiDocParams?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSubmitMultiDocWithTemplateParams;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSubmitMultiDocWithTemplateParams;

        internal void ExecuteOnSubmitMultiDocWithTemplateParams(DefaultApi.SubmitMultiDocWithTemplateParamsApiResponse apiResponse)
        {
            OnSubmitMultiDocWithTemplateParams?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSubmitMultiDocWithTemplateParams(Exception exception)
        {
            OnErrorSubmitMultiDocWithTemplateParams?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSubmitSingleDocWithTemplateParams;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSubmitSingleDocWithTemplateParams;

        internal void ExecuteOnSubmitSingleDocWithTemplateParams(DefaultApi.SubmitSingleDocWithTemplateParamsApiResponse apiResponse)
        {
            OnSubmitSingleDocWithTemplateParams?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSubmitSingleDocWithTemplateParams(Exception exception)
        {
            OnErrorSubmitSingleDocWithTemplateParams?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class DefaultApi : IDefaultApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<DefaultApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DefaultApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(ILogger<DefaultApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, DefaultApiEvents defaultApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<DefaultApi>();
            HttpClient = httpClient;
            Events = defaultApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatMergeMultiDocParams(MergeMultiDocParamsRequest mergeMultiDocParamsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="mergeMultiDocParamsRequest"></param>
        /// <returns></returns>
        private void ValidateMergeMultiDocParams(MergeMultiDocParamsRequest mergeMultiDocParamsRequest)
        {
            if (mergeMultiDocParamsRequest == null)
                throw new ArgumentNullException(nameof(mergeMultiDocParamsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mergeMultiDocParamsRequest"></param>
        private void AfterMergeMultiDocParamsDefaultImplementation(IMergeMultiDocParamsApiResponse apiResponseLocalVar, MergeMultiDocParamsRequest mergeMultiDocParamsRequest)
        {
            bool suppressDefaultLog = false;
            AfterMergeMultiDocParams(ref suppressDefaultLog, apiResponseLocalVar, mergeMultiDocParamsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mergeMultiDocParamsRequest"></param>
        partial void AfterMergeMultiDocParams(ref bool suppressDefaultLog, IMergeMultiDocParamsApiResponse apiResponseLocalVar, MergeMultiDocParamsRequest mergeMultiDocParamsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="mergeMultiDocParamsRequest"></param>
        private void OnErrorMergeMultiDocParamsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MergeMultiDocParamsRequest mergeMultiDocParamsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorMergeMultiDocParams(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, mergeMultiDocParamsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="mergeMultiDocParamsRequest"></param>
        partial void OnErrorMergeMultiDocParams(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MergeMultiDocParamsRequest mergeMultiDocParamsRequest);

        /// <summary>
        /// Operation for /jobs/multi-doc-merge 
        /// </summary>
        /// <param name="mergeMultiDocParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergeMultiDocParamsApiResponse"/>&gt;</returns>
        public async Task<IMergeMultiDocParamsApiResponse?> MergeMultiDocParamsOrDefaultAsync(MergeMultiDocParamsRequest mergeMultiDocParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MergeMultiDocParamsAsync(mergeMultiDocParamsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Operation for /jobs/multi-doc-merge 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeMultiDocParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergeMultiDocParamsApiResponse"/>&gt;</returns>
        public async Task<IMergeMultiDocParamsApiResponse> MergeMultiDocParamsAsync(MergeMultiDocParamsRequest mergeMultiDocParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMergeMultiDocParams(mergeMultiDocParamsRequest);

                FormatMergeMultiDocParams(mergeMultiDocParamsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/jobs/multi-doc-merge"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/jobs/multi-doc-merge");

                    httpRequestMessageLocalVar.Content = (mergeMultiDocParamsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(mergeMultiDocParamsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<MergeMultiDocParamsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<MergeMultiDocParamsApiResponse>();
                        MergeMultiDocParamsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/jobs/multi-doc-merge", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterMergeMultiDocParamsDefaultImplementation(apiResponseLocalVar, mergeMultiDocParamsRequest);

                        Events.ExecuteOnMergeMultiDocParams(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMergeMultiDocParamsDefaultImplementation(e, "/jobs/multi-doc-merge", uriBuilderLocalVar.Path, mergeMultiDocParamsRequest);
                Events.ExecuteOnErrorMergeMultiDocParams(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="MergeMultiDocParamsApiResponse"/>
        /// </summary>
        public partial class MergeMultiDocParamsApiResponse : C2M.Api.Client.ApiResponse, IMergeMultiDocParamsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<MergeMultiDocParamsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="MergeMultiDocParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MergeMultiDocParamsApiResponse(ILogger<MergeMultiDocParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="MergeMultiDocParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MergeMultiDocParamsApiResponse(ILogger<MergeMultiDocParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public C2M.Api.Model.StandardResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<C2M.Api.Model.StandardResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out C2M.Api.Model.StandardResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatMergeMultiDocWithTemplateParams(MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="mergeMultiDocWithTemplateParamsRequest"></param>
        /// <returns></returns>
        private void ValidateMergeMultiDocWithTemplateParams(MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest)
        {
            if (mergeMultiDocWithTemplateParamsRequest == null)
                throw new ArgumentNullException(nameof(mergeMultiDocWithTemplateParamsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mergeMultiDocWithTemplateParamsRequest"></param>
        private void AfterMergeMultiDocWithTemplateParamsDefaultImplementation(IMergeMultiDocWithTemplateParamsApiResponse apiResponseLocalVar, MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest)
        {
            bool suppressDefaultLog = false;
            AfterMergeMultiDocWithTemplateParams(ref suppressDefaultLog, apiResponseLocalVar, mergeMultiDocWithTemplateParamsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mergeMultiDocWithTemplateParamsRequest"></param>
        partial void AfterMergeMultiDocWithTemplateParams(ref bool suppressDefaultLog, IMergeMultiDocWithTemplateParamsApiResponse apiResponseLocalVar, MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="mergeMultiDocWithTemplateParamsRequest"></param>
        private void OnErrorMergeMultiDocWithTemplateParamsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorMergeMultiDocWithTemplateParams(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, mergeMultiDocWithTemplateParamsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="mergeMultiDocWithTemplateParamsRequest"></param>
        partial void OnErrorMergeMultiDocWithTemplateParams(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest);

        /// <summary>
        /// Operation for /jobs/multi-doc-merge-job-template 
        /// </summary>
        /// <param name="mergeMultiDocWithTemplateParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergeMultiDocWithTemplateParamsApiResponse"/>&gt;</returns>
        public async Task<IMergeMultiDocWithTemplateParamsApiResponse?> MergeMultiDocWithTemplateParamsOrDefaultAsync(MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MergeMultiDocWithTemplateParamsAsync(mergeMultiDocWithTemplateParamsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Operation for /jobs/multi-doc-merge-job-template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeMultiDocWithTemplateParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMergeMultiDocWithTemplateParamsApiResponse"/>&gt;</returns>
        public async Task<IMergeMultiDocWithTemplateParamsApiResponse> MergeMultiDocWithTemplateParamsAsync(MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMergeMultiDocWithTemplateParams(mergeMultiDocWithTemplateParamsRequest);

                FormatMergeMultiDocWithTemplateParams(mergeMultiDocWithTemplateParamsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/jobs/multi-doc-merge-job-template"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/jobs/multi-doc-merge-job-template");

                    httpRequestMessageLocalVar.Content = (mergeMultiDocWithTemplateParamsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(mergeMultiDocWithTemplateParamsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<MergeMultiDocWithTemplateParamsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<MergeMultiDocWithTemplateParamsApiResponse>();
                        MergeMultiDocWithTemplateParamsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/jobs/multi-doc-merge-job-template", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterMergeMultiDocWithTemplateParamsDefaultImplementation(apiResponseLocalVar, mergeMultiDocWithTemplateParamsRequest);

                        Events.ExecuteOnMergeMultiDocWithTemplateParams(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMergeMultiDocWithTemplateParamsDefaultImplementation(e, "/jobs/multi-doc-merge-job-template", uriBuilderLocalVar.Path, mergeMultiDocWithTemplateParamsRequest);
                Events.ExecuteOnErrorMergeMultiDocWithTemplateParams(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="MergeMultiDocWithTemplateParamsApiResponse"/>
        /// </summary>
        public partial class MergeMultiDocWithTemplateParamsApiResponse : C2M.Api.Client.ApiResponse, IMergeMultiDocWithTemplateParamsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<MergeMultiDocWithTemplateParamsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="MergeMultiDocWithTemplateParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MergeMultiDocWithTemplateParamsApiResponse(ILogger<MergeMultiDocWithTemplateParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="MergeMultiDocWithTemplateParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MergeMultiDocWithTemplateParamsApiResponse(ILogger<MergeMultiDocWithTemplateParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public C2M.Api.Model.StandardResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<C2M.Api.Model.StandardResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out C2M.Api.Model.StandardResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatMultiPdfWithCaptureParams(MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="multiPdfWithCaptureParamsRequest"></param>
        /// <returns></returns>
        private void ValidateMultiPdfWithCaptureParams(MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest)
        {
            if (multiPdfWithCaptureParamsRequest == null)
                throw new ArgumentNullException(nameof(multiPdfWithCaptureParamsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="multiPdfWithCaptureParamsRequest"></param>
        private void AfterMultiPdfWithCaptureParamsDefaultImplementation(IMultiPdfWithCaptureParamsApiResponse apiResponseLocalVar, MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest)
        {
            bool suppressDefaultLog = false;
            AfterMultiPdfWithCaptureParams(ref suppressDefaultLog, apiResponseLocalVar, multiPdfWithCaptureParamsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="multiPdfWithCaptureParamsRequest"></param>
        partial void AfterMultiPdfWithCaptureParams(ref bool suppressDefaultLog, IMultiPdfWithCaptureParamsApiResponse apiResponseLocalVar, MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="multiPdfWithCaptureParamsRequest"></param>
        private void OnErrorMultiPdfWithCaptureParamsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorMultiPdfWithCaptureParams(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, multiPdfWithCaptureParamsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="multiPdfWithCaptureParamsRequest"></param>
        partial void OnErrorMultiPdfWithCaptureParams(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest);

        /// <summary>
        /// Operation for /jobs/multi-pdf-address-capture 
        /// </summary>
        /// <param name="multiPdfWithCaptureParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultiPdfWithCaptureParamsApiResponse"/>&gt;</returns>
        public async Task<IMultiPdfWithCaptureParamsApiResponse?> MultiPdfWithCaptureParamsOrDefaultAsync(MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MultiPdfWithCaptureParamsAsync(multiPdfWithCaptureParamsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Operation for /jobs/multi-pdf-address-capture 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="multiPdfWithCaptureParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMultiPdfWithCaptureParamsApiResponse"/>&gt;</returns>
        public async Task<IMultiPdfWithCaptureParamsApiResponse> MultiPdfWithCaptureParamsAsync(MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMultiPdfWithCaptureParams(multiPdfWithCaptureParamsRequest);

                FormatMultiPdfWithCaptureParams(multiPdfWithCaptureParamsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/jobs/multi-pdf-address-capture"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/jobs/multi-pdf-address-capture");

                    httpRequestMessageLocalVar.Content = (multiPdfWithCaptureParamsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(multiPdfWithCaptureParamsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<MultiPdfWithCaptureParamsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<MultiPdfWithCaptureParamsApiResponse>();
                        MultiPdfWithCaptureParamsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/jobs/multi-pdf-address-capture", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterMultiPdfWithCaptureParamsDefaultImplementation(apiResponseLocalVar, multiPdfWithCaptureParamsRequest);

                        Events.ExecuteOnMultiPdfWithCaptureParams(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMultiPdfWithCaptureParamsDefaultImplementation(e, "/jobs/multi-pdf-address-capture", uriBuilderLocalVar.Path, multiPdfWithCaptureParamsRequest);
                Events.ExecuteOnErrorMultiPdfWithCaptureParams(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="MultiPdfWithCaptureParamsApiResponse"/>
        /// </summary>
        public partial class MultiPdfWithCaptureParamsApiResponse : C2M.Api.Client.ApiResponse, IMultiPdfWithCaptureParamsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<MultiPdfWithCaptureParamsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="MultiPdfWithCaptureParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MultiPdfWithCaptureParamsApiResponse(ILogger<MultiPdfWithCaptureParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="MultiPdfWithCaptureParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MultiPdfWithCaptureParamsApiResponse(ILogger<MultiPdfWithCaptureParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public C2M.Api.Model.StandardResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<C2M.Api.Model.StandardResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out C2M.Api.Model.StandardResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSingleDocJobParams(SingleDocJobParamsRequest singleDocJobParamsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="singleDocJobParamsRequest"></param>
        /// <returns></returns>
        private void ValidateSingleDocJobParams(SingleDocJobParamsRequest singleDocJobParamsRequest)
        {
            if (singleDocJobParamsRequest == null)
                throw new ArgumentNullException(nameof(singleDocJobParamsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="singleDocJobParamsRequest"></param>
        private void AfterSingleDocJobParamsDefaultImplementation(ISingleDocJobParamsApiResponse apiResponseLocalVar, SingleDocJobParamsRequest singleDocJobParamsRequest)
        {
            bool suppressDefaultLog = false;
            AfterSingleDocJobParams(ref suppressDefaultLog, apiResponseLocalVar, singleDocJobParamsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="singleDocJobParamsRequest"></param>
        partial void AfterSingleDocJobParams(ref bool suppressDefaultLog, ISingleDocJobParamsApiResponse apiResponseLocalVar, SingleDocJobParamsRequest singleDocJobParamsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="singleDocJobParamsRequest"></param>
        private void OnErrorSingleDocJobParamsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SingleDocJobParamsRequest singleDocJobParamsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSingleDocJobParams(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, singleDocJobParamsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="singleDocJobParamsRequest"></param>
        partial void OnErrorSingleDocJobParams(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SingleDocJobParamsRequest singleDocJobParamsRequest);

        /// <summary>
        /// Operation for /jobs/single-doc 
        /// </summary>
        /// <param name="singleDocJobParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISingleDocJobParamsApiResponse"/>&gt;</returns>
        public async Task<ISingleDocJobParamsApiResponse?> SingleDocJobParamsOrDefaultAsync(SingleDocJobParamsRequest singleDocJobParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SingleDocJobParamsAsync(singleDocJobParamsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Operation for /jobs/single-doc 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="singleDocJobParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISingleDocJobParamsApiResponse"/>&gt;</returns>
        public async Task<ISingleDocJobParamsApiResponse> SingleDocJobParamsAsync(SingleDocJobParamsRequest singleDocJobParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSingleDocJobParams(singleDocJobParamsRequest);

                FormatSingleDocJobParams(singleDocJobParamsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/jobs/single-doc"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/jobs/single-doc");

                    httpRequestMessageLocalVar.Content = (singleDocJobParamsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(singleDocJobParamsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<SingleDocJobParamsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SingleDocJobParamsApiResponse>();
                        SingleDocJobParamsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/jobs/single-doc", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterSingleDocJobParamsDefaultImplementation(apiResponseLocalVar, singleDocJobParamsRequest);

                        Events.ExecuteOnSingleDocJobParams(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSingleDocJobParamsDefaultImplementation(e, "/jobs/single-doc", uriBuilderLocalVar.Path, singleDocJobParamsRequest);
                Events.ExecuteOnErrorSingleDocJobParams(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SingleDocJobParamsApiResponse"/>
        /// </summary>
        public partial class SingleDocJobParamsApiResponse : C2M.Api.Client.ApiResponse, ISingleDocJobParamsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SingleDocJobParamsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SingleDocJobParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SingleDocJobParamsApiResponse(ILogger<SingleDocJobParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="SingleDocJobParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SingleDocJobParamsApiResponse(ILogger<SingleDocJobParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public C2M.Api.Model.StandardResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<C2M.Api.Model.StandardResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out C2M.Api.Model.StandardResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSplitPdfParams(SplitPdfParamsRequest splitPdfParamsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="splitPdfParamsRequest"></param>
        /// <returns></returns>
        private void ValidateSplitPdfParams(SplitPdfParamsRequest splitPdfParamsRequest)
        {
            if (splitPdfParamsRequest == null)
                throw new ArgumentNullException(nameof(splitPdfParamsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="splitPdfParamsRequest"></param>
        private void AfterSplitPdfParamsDefaultImplementation(ISplitPdfParamsApiResponse apiResponseLocalVar, SplitPdfParamsRequest splitPdfParamsRequest)
        {
            bool suppressDefaultLog = false;
            AfterSplitPdfParams(ref suppressDefaultLog, apiResponseLocalVar, splitPdfParamsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="splitPdfParamsRequest"></param>
        partial void AfterSplitPdfParams(ref bool suppressDefaultLog, ISplitPdfParamsApiResponse apiResponseLocalVar, SplitPdfParamsRequest splitPdfParamsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="splitPdfParamsRequest"></param>
        private void OnErrorSplitPdfParamsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SplitPdfParamsRequest splitPdfParamsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSplitPdfParams(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, splitPdfParamsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="splitPdfParamsRequest"></param>
        partial void OnErrorSplitPdfParams(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SplitPdfParamsRequest splitPdfParamsRequest);

        /// <summary>
        /// Operation for /jobs/single-pdf-split 
        /// </summary>
        /// <param name="splitPdfParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISplitPdfParamsApiResponse"/>&gt;</returns>
        public async Task<ISplitPdfParamsApiResponse?> SplitPdfParamsOrDefaultAsync(SplitPdfParamsRequest splitPdfParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SplitPdfParamsAsync(splitPdfParamsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Operation for /jobs/single-pdf-split 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="splitPdfParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISplitPdfParamsApiResponse"/>&gt;</returns>
        public async Task<ISplitPdfParamsApiResponse> SplitPdfParamsAsync(SplitPdfParamsRequest splitPdfParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSplitPdfParams(splitPdfParamsRequest);

                FormatSplitPdfParams(splitPdfParamsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/jobs/single-pdf-split"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/jobs/single-pdf-split");

                    httpRequestMessageLocalVar.Content = (splitPdfParamsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(splitPdfParamsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<SplitPdfParamsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SplitPdfParamsApiResponse>();
                        SplitPdfParamsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/jobs/single-pdf-split", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterSplitPdfParamsDefaultImplementation(apiResponseLocalVar, splitPdfParamsRequest);

                        Events.ExecuteOnSplitPdfParams(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSplitPdfParamsDefaultImplementation(e, "/jobs/single-pdf-split", uriBuilderLocalVar.Path, splitPdfParamsRequest);
                Events.ExecuteOnErrorSplitPdfParams(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SplitPdfParamsApiResponse"/>
        /// </summary>
        public partial class SplitPdfParamsApiResponse : C2M.Api.Client.ApiResponse, ISplitPdfParamsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SplitPdfParamsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SplitPdfParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SplitPdfParamsApiResponse(ILogger<SplitPdfParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="SplitPdfParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SplitPdfParamsApiResponse(ILogger<SplitPdfParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public C2M.Api.Model.StandardResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<C2M.Api.Model.StandardResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out C2M.Api.Model.StandardResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSplitPdfWithCaptureParams(SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="splitPdfWithCaptureParamsRequest"></param>
        /// <returns></returns>
        private void ValidateSplitPdfWithCaptureParams(SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest)
        {
            if (splitPdfWithCaptureParamsRequest == null)
                throw new ArgumentNullException(nameof(splitPdfWithCaptureParamsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="splitPdfWithCaptureParamsRequest"></param>
        private void AfterSplitPdfWithCaptureParamsDefaultImplementation(ISplitPdfWithCaptureParamsApiResponse apiResponseLocalVar, SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest)
        {
            bool suppressDefaultLog = false;
            AfterSplitPdfWithCaptureParams(ref suppressDefaultLog, apiResponseLocalVar, splitPdfWithCaptureParamsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="splitPdfWithCaptureParamsRequest"></param>
        partial void AfterSplitPdfWithCaptureParams(ref bool suppressDefaultLog, ISplitPdfWithCaptureParamsApiResponse apiResponseLocalVar, SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="splitPdfWithCaptureParamsRequest"></param>
        private void OnErrorSplitPdfWithCaptureParamsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSplitPdfWithCaptureParams(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, splitPdfWithCaptureParamsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="splitPdfWithCaptureParamsRequest"></param>
        partial void OnErrorSplitPdfWithCaptureParams(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest);

        /// <summary>
        /// Operation for /jobs/single-pdf-split-addressCapture 
        /// </summary>
        /// <param name="splitPdfWithCaptureParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISplitPdfWithCaptureParamsApiResponse"/>&gt;</returns>
        public async Task<ISplitPdfWithCaptureParamsApiResponse?> SplitPdfWithCaptureParamsOrDefaultAsync(SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SplitPdfWithCaptureParamsAsync(splitPdfWithCaptureParamsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Operation for /jobs/single-pdf-split-addressCapture 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="splitPdfWithCaptureParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISplitPdfWithCaptureParamsApiResponse"/>&gt;</returns>
        public async Task<ISplitPdfWithCaptureParamsApiResponse> SplitPdfWithCaptureParamsAsync(SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSplitPdfWithCaptureParams(splitPdfWithCaptureParamsRequest);

                FormatSplitPdfWithCaptureParams(splitPdfWithCaptureParamsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/jobs/single-pdf-split-addressCapture"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/jobs/single-pdf-split-addressCapture");

                    httpRequestMessageLocalVar.Content = (splitPdfWithCaptureParamsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(splitPdfWithCaptureParamsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<SplitPdfWithCaptureParamsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SplitPdfWithCaptureParamsApiResponse>();
                        SplitPdfWithCaptureParamsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/jobs/single-pdf-split-addressCapture", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterSplitPdfWithCaptureParamsDefaultImplementation(apiResponseLocalVar, splitPdfWithCaptureParamsRequest);

                        Events.ExecuteOnSplitPdfWithCaptureParams(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSplitPdfWithCaptureParamsDefaultImplementation(e, "/jobs/single-pdf-split-addressCapture", uriBuilderLocalVar.Path, splitPdfWithCaptureParamsRequest);
                Events.ExecuteOnErrorSplitPdfWithCaptureParams(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SplitPdfWithCaptureParamsApiResponse"/>
        /// </summary>
        public partial class SplitPdfWithCaptureParamsApiResponse : C2M.Api.Client.ApiResponse, ISplitPdfWithCaptureParamsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SplitPdfWithCaptureParamsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SplitPdfWithCaptureParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SplitPdfWithCaptureParamsApiResponse(ILogger<SplitPdfWithCaptureParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="SplitPdfWithCaptureParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SplitPdfWithCaptureParamsApiResponse(ILogger<SplitPdfWithCaptureParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public C2M.Api.Model.StandardResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<C2M.Api.Model.StandardResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out C2M.Api.Model.StandardResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSubmitMultiDocParams(SubmitMultiDocParamsRequest submitMultiDocParamsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="submitMultiDocParamsRequest"></param>
        /// <returns></returns>
        private void ValidateSubmitMultiDocParams(SubmitMultiDocParamsRequest submitMultiDocParamsRequest)
        {
            if (submitMultiDocParamsRequest == null)
                throw new ArgumentNullException(nameof(submitMultiDocParamsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="submitMultiDocParamsRequest"></param>
        private void AfterSubmitMultiDocParamsDefaultImplementation(ISubmitMultiDocParamsApiResponse apiResponseLocalVar, SubmitMultiDocParamsRequest submitMultiDocParamsRequest)
        {
            bool suppressDefaultLog = false;
            AfterSubmitMultiDocParams(ref suppressDefaultLog, apiResponseLocalVar, submitMultiDocParamsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="submitMultiDocParamsRequest"></param>
        partial void AfterSubmitMultiDocParams(ref bool suppressDefaultLog, ISubmitMultiDocParamsApiResponse apiResponseLocalVar, SubmitMultiDocParamsRequest submitMultiDocParamsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="submitMultiDocParamsRequest"></param>
        private void OnErrorSubmitMultiDocParamsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SubmitMultiDocParamsRequest submitMultiDocParamsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSubmitMultiDocParams(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, submitMultiDocParamsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="submitMultiDocParamsRequest"></param>
        partial void OnErrorSubmitMultiDocParams(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SubmitMultiDocParamsRequest submitMultiDocParamsRequest);

        /// <summary>
        /// Operation for /jobs/multi-doc 
        /// </summary>
        /// <param name="submitMultiDocParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitMultiDocParamsApiResponse"/>&gt;</returns>
        public async Task<ISubmitMultiDocParamsApiResponse?> SubmitMultiDocParamsOrDefaultAsync(SubmitMultiDocParamsRequest submitMultiDocParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SubmitMultiDocParamsAsync(submitMultiDocParamsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Operation for /jobs/multi-doc 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitMultiDocParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitMultiDocParamsApiResponse"/>&gt;</returns>
        public async Task<ISubmitMultiDocParamsApiResponse> SubmitMultiDocParamsAsync(SubmitMultiDocParamsRequest submitMultiDocParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSubmitMultiDocParams(submitMultiDocParamsRequest);

                FormatSubmitMultiDocParams(submitMultiDocParamsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/jobs/multi-doc"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/jobs/multi-doc");

                    httpRequestMessageLocalVar.Content = (submitMultiDocParamsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(submitMultiDocParamsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<SubmitMultiDocParamsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SubmitMultiDocParamsApiResponse>();
                        SubmitMultiDocParamsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/jobs/multi-doc", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterSubmitMultiDocParamsDefaultImplementation(apiResponseLocalVar, submitMultiDocParamsRequest);

                        Events.ExecuteOnSubmitMultiDocParams(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSubmitMultiDocParamsDefaultImplementation(e, "/jobs/multi-doc", uriBuilderLocalVar.Path, submitMultiDocParamsRequest);
                Events.ExecuteOnErrorSubmitMultiDocParams(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SubmitMultiDocParamsApiResponse"/>
        /// </summary>
        public partial class SubmitMultiDocParamsApiResponse : C2M.Api.Client.ApiResponse, ISubmitMultiDocParamsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SubmitMultiDocParamsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SubmitMultiDocParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SubmitMultiDocParamsApiResponse(ILogger<SubmitMultiDocParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="SubmitMultiDocParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SubmitMultiDocParamsApiResponse(ILogger<SubmitMultiDocParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public C2M.Api.Model.StandardResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<C2M.Api.Model.StandardResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out C2M.Api.Model.StandardResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSubmitMultiDocWithTemplateParams(SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="submitMultiDocWithTemplateParamsRequest"></param>
        /// <returns></returns>
        private void ValidateSubmitMultiDocWithTemplateParams(SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest)
        {
            if (submitMultiDocWithTemplateParamsRequest == null)
                throw new ArgumentNullException(nameof(submitMultiDocWithTemplateParamsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="submitMultiDocWithTemplateParamsRequest"></param>
        private void AfterSubmitMultiDocWithTemplateParamsDefaultImplementation(ISubmitMultiDocWithTemplateParamsApiResponse apiResponseLocalVar, SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest)
        {
            bool suppressDefaultLog = false;
            AfterSubmitMultiDocWithTemplateParams(ref suppressDefaultLog, apiResponseLocalVar, submitMultiDocWithTemplateParamsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="submitMultiDocWithTemplateParamsRequest"></param>
        partial void AfterSubmitMultiDocWithTemplateParams(ref bool suppressDefaultLog, ISubmitMultiDocWithTemplateParamsApiResponse apiResponseLocalVar, SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="submitMultiDocWithTemplateParamsRequest"></param>
        private void OnErrorSubmitMultiDocWithTemplateParamsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSubmitMultiDocWithTemplateParams(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, submitMultiDocWithTemplateParamsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="submitMultiDocWithTemplateParamsRequest"></param>
        partial void OnErrorSubmitMultiDocWithTemplateParams(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest);

        /// <summary>
        /// Operation for /jobs/multi-docs-job-template 
        /// </summary>
        /// <param name="submitMultiDocWithTemplateParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitMultiDocWithTemplateParamsApiResponse"/>&gt;</returns>
        public async Task<ISubmitMultiDocWithTemplateParamsApiResponse?> SubmitMultiDocWithTemplateParamsOrDefaultAsync(SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SubmitMultiDocWithTemplateParamsAsync(submitMultiDocWithTemplateParamsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Operation for /jobs/multi-docs-job-template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitMultiDocWithTemplateParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitMultiDocWithTemplateParamsApiResponse"/>&gt;</returns>
        public async Task<ISubmitMultiDocWithTemplateParamsApiResponse> SubmitMultiDocWithTemplateParamsAsync(SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSubmitMultiDocWithTemplateParams(submitMultiDocWithTemplateParamsRequest);

                FormatSubmitMultiDocWithTemplateParams(submitMultiDocWithTemplateParamsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/jobs/multi-docs-job-template"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/jobs/multi-docs-job-template");

                    httpRequestMessageLocalVar.Content = (submitMultiDocWithTemplateParamsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(submitMultiDocWithTemplateParamsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<SubmitMultiDocWithTemplateParamsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SubmitMultiDocWithTemplateParamsApiResponse>();
                        SubmitMultiDocWithTemplateParamsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/jobs/multi-docs-job-template", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterSubmitMultiDocWithTemplateParamsDefaultImplementation(apiResponseLocalVar, submitMultiDocWithTemplateParamsRequest);

                        Events.ExecuteOnSubmitMultiDocWithTemplateParams(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSubmitMultiDocWithTemplateParamsDefaultImplementation(e, "/jobs/multi-docs-job-template", uriBuilderLocalVar.Path, submitMultiDocWithTemplateParamsRequest);
                Events.ExecuteOnErrorSubmitMultiDocWithTemplateParams(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SubmitMultiDocWithTemplateParamsApiResponse"/>
        /// </summary>
        public partial class SubmitMultiDocWithTemplateParamsApiResponse : C2M.Api.Client.ApiResponse, ISubmitMultiDocWithTemplateParamsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SubmitMultiDocWithTemplateParamsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SubmitMultiDocWithTemplateParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SubmitMultiDocWithTemplateParamsApiResponse(ILogger<SubmitMultiDocWithTemplateParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="SubmitMultiDocWithTemplateParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SubmitMultiDocWithTemplateParamsApiResponse(ILogger<SubmitMultiDocWithTemplateParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public C2M.Api.Model.StandardResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<C2M.Api.Model.StandardResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out C2M.Api.Model.StandardResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSubmitSingleDocWithTemplateParams(SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="submitSingleDocWithTemplateParamsRequest"></param>
        /// <returns></returns>
        private void ValidateSubmitSingleDocWithTemplateParams(SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest)
        {
            if (submitSingleDocWithTemplateParamsRequest == null)
                throw new ArgumentNullException(nameof(submitSingleDocWithTemplateParamsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="submitSingleDocWithTemplateParamsRequest"></param>
        private void AfterSubmitSingleDocWithTemplateParamsDefaultImplementation(ISubmitSingleDocWithTemplateParamsApiResponse apiResponseLocalVar, SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest)
        {
            bool suppressDefaultLog = false;
            AfterSubmitSingleDocWithTemplateParams(ref suppressDefaultLog, apiResponseLocalVar, submitSingleDocWithTemplateParamsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="submitSingleDocWithTemplateParamsRequest"></param>
        partial void AfterSubmitSingleDocWithTemplateParams(ref bool suppressDefaultLog, ISubmitSingleDocWithTemplateParamsApiResponse apiResponseLocalVar, SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="submitSingleDocWithTemplateParamsRequest"></param>
        private void OnErrorSubmitSingleDocWithTemplateParamsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSubmitSingleDocWithTemplateParams(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, submitSingleDocWithTemplateParamsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="submitSingleDocWithTemplateParamsRequest"></param>
        partial void OnErrorSubmitSingleDocWithTemplateParams(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest);

        /// <summary>
        /// Operation for /jobs/single-doc-job-template 
        /// </summary>
        /// <param name="submitSingleDocWithTemplateParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitSingleDocWithTemplateParamsApiResponse"/>&gt;</returns>
        public async Task<ISubmitSingleDocWithTemplateParamsApiResponse?> SubmitSingleDocWithTemplateParamsOrDefaultAsync(SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SubmitSingleDocWithTemplateParamsAsync(submitSingleDocWithTemplateParamsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Operation for /jobs/single-doc-job-template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="submitSingleDocWithTemplateParamsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubmitSingleDocWithTemplateParamsApiResponse"/>&gt;</returns>
        public async Task<ISubmitSingleDocWithTemplateParamsApiResponse> SubmitSingleDocWithTemplateParamsAsync(SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSubmitSingleDocWithTemplateParams(submitSingleDocWithTemplateParamsRequest);

                FormatSubmitSingleDocWithTemplateParams(submitSingleDocWithTemplateParamsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/jobs/single-doc-job-template"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/jobs/single-doc-job-template");

                    httpRequestMessageLocalVar.Content = (submitSingleDocWithTemplateParamsRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(submitSingleDocWithTemplateParamsRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<SubmitSingleDocWithTemplateParamsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SubmitSingleDocWithTemplateParamsApiResponse>();
                        SubmitSingleDocWithTemplateParamsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/jobs/single-doc-job-template", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterSubmitSingleDocWithTemplateParamsDefaultImplementation(apiResponseLocalVar, submitSingleDocWithTemplateParamsRequest);

                        Events.ExecuteOnSubmitSingleDocWithTemplateParams(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSubmitSingleDocWithTemplateParamsDefaultImplementation(e, "/jobs/single-doc-job-template", uriBuilderLocalVar.Path, submitSingleDocWithTemplateParamsRequest);
                Events.ExecuteOnErrorSubmitSingleDocWithTemplateParams(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SubmitSingleDocWithTemplateParamsApiResponse"/>
        /// </summary>
        public partial class SubmitSingleDocWithTemplateParamsApiResponse : C2M.Api.Client.ApiResponse, ISubmitSingleDocWithTemplateParamsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SubmitSingleDocWithTemplateParamsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SubmitSingleDocWithTemplateParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SubmitSingleDocWithTemplateParamsApiResponse(ILogger<SubmitSingleDocWithTemplateParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="SubmitSingleDocWithTemplateParamsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SubmitSingleDocWithTemplateParamsApiResponse(ILogger<SubmitSingleDocWithTemplateParamsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public C2M.Api.Model.StandardResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<C2M.Api.Model.StandardResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out C2M.Api.Model.StandardResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
