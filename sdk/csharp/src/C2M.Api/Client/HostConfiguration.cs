/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using C2M.Api.Api;
using C2M.Api.Model;

namespace C2M.Api.Client
{
    /// <summary>
    /// Provides hosting configuration for C2M.Api
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new AchDetailsJsonConverter());
            _jsonOptions.Converters.Add(new AchPaymentJsonConverter());
            _jsonOptions.Converters.Add(new AddressListPdfJsonConverter());
            _jsonOptions.Converters.Add(new AddressRegionJsonConverter());
            _jsonOptions.Converters.Add(new ApplePayPaymentJsonConverter());
            _jsonOptions.Converters.Add(new AuthErrorJsonConverter());
            _jsonOptions.Converters.Add(new CardTypeJsonConverter());
            _jsonOptions.Converters.Add(new CardTypeNullableJsonConverter());
            _jsonOptions.Converters.Add(new CreditAmountJsonConverter());
            _jsonOptions.Converters.Add(new CreditCardDetailsJsonConverter());
            _jsonOptions.Converters.Add(new CreditCardPaymentJsonConverter());
            _jsonOptions.Converters.Add(new CurrencyJsonConverter());
            _jsonOptions.Converters.Add(new CurrencyNullableJsonConverter());
            _jsonOptions.Converters.Add(new DigitJsonConverter());
            _jsonOptions.Converters.Add(new DigitNullableJsonConverter());
            _jsonOptions.Converters.Add(new DocumentClassJsonConverter());
            _jsonOptions.Converters.Add(new DocumentClassNullableJsonConverter());
            _jsonOptions.Converters.Add(new DocumentFormatJsonConverter());
            _jsonOptions.Converters.Add(new DocumentFormatNullableJsonConverter());
            _jsonOptions.Converters.Add(new DocumentSourceIdentifierJsonConverter());
            _jsonOptions.Converters.Add(new DocumentSourceIdentifierOneOfJsonConverter());
            _jsonOptions.Converters.Add(new DocumentSourceIdentifierOneOf1JsonConverter());
            _jsonOptions.Converters.Add(new DocumentSourceIdentifierOneOf2JsonConverter());
            _jsonOptions.Converters.Add(new EnvelopeJsonConverter());
            _jsonOptions.Converters.Add(new EnvelopeNullableJsonConverter());
            _jsonOptions.Converters.Add(new ExpirationDateJsonConverter());
            _jsonOptions.Converters.Add(new ExtractionSpecJsonConverter());
            _jsonOptions.Converters.Add(new GooglePayPaymentJsonConverter());
            _jsonOptions.Converters.Add(new InvoiceDetailsJsonConverter());
            _jsonOptions.Converters.Add(new InvoicePaymentJsonConverter());
            _jsonOptions.Converters.Add(new JobOptionsJsonConverter());
            _jsonOptions.Converters.Add(new LayoutJsonConverter());
            _jsonOptions.Converters.Add(new LayoutNullableJsonConverter());
            _jsonOptions.Converters.Add(new LongTokenRequestJsonConverter());
            _jsonOptions.Converters.Add(new LongTokenResponseJsonConverter());
            _jsonOptions.Converters.Add(new MailclassJsonConverter());
            _jsonOptions.Converters.Add(new MailclassNullableJsonConverter());
            _jsonOptions.Converters.Add(new MergeMultiDocParamsJsonConverter());
            _jsonOptions.Converters.Add(new MergeMultiDocParamsRequestJsonConverter());
            _jsonOptions.Converters.Add(new MergeMultiDocWithTemplateParamsJsonConverter());
            _jsonOptions.Converters.Add(new MergeMultiDocWithTemplateParamsRequestJsonConverter());
            _jsonOptions.Converters.Add(new MultiPdfWithCaptureParamsJsonConverter());
            _jsonOptions.Converters.Add(new MultiPdfWithCaptureParamsRequestJsonConverter());
            _jsonOptions.Converters.Add(new PageRangeJsonConverter());
            _jsonOptions.Converters.Add(new PaperTypeJsonConverter());
            _jsonOptions.Converters.Add(new PaperTypeNullableJsonConverter());
            _jsonOptions.Converters.Add(new PaymentDetailsJsonConverter());
            _jsonOptions.Converters.Add(new PrintOptionJsonConverter());
            _jsonOptions.Converters.Add(new PrintOptionNullableJsonConverter());
            _jsonOptions.Converters.Add(new RecipientAddressJsonConverter());
            _jsonOptions.Converters.Add(new RecipientAddressSourceJsonConverter());
            _jsonOptions.Converters.Add(new ShortTokenRequestJsonConverter());
            _jsonOptions.Converters.Add(new ShortTokenResponseJsonConverter());
            _jsonOptions.Converters.Add(new SingleDocJobParamsJsonConverter());
            _jsonOptions.Converters.Add(new SingleDocJobParamsRequestJsonConverter());
            _jsonOptions.Converters.Add(new SplitPdfParamsJsonConverter());
            _jsonOptions.Converters.Add(new SplitPdfParamsRequestJsonConverter());
            _jsonOptions.Converters.Add(new SplitPdfParamsRequestItemsInnerJsonConverter());
            _jsonOptions.Converters.Add(new SplitPdfWithCaptureParamsJsonConverter());
            _jsonOptions.Converters.Add(new SplitPdfWithCaptureParamsRequestJsonConverter());
            _jsonOptions.Converters.Add(new StandardResponseJsonConverter());
            _jsonOptions.Converters.Add(new SubmitMultiDocParamsJsonConverter());
            _jsonOptions.Converters.Add(new SubmitMultiDocParamsRequestJsonConverter());
            _jsonOptions.Converters.Add(new SubmitMultiDocWithTemplateParamsJsonConverter());
            _jsonOptions.Converters.Add(new SubmitMultiDocWithTemplateParamsRequestJsonConverter());
            _jsonOptions.Converters.Add(new SubmitMultiDocWithTemplateParamsRequestItemsInnerJsonConverter());
            _jsonOptions.Converters.Add(new SubmitSingleDocWithTemplateParamsJsonConverter());
            _jsonOptions.Converters.Add(new SubmitSingleDocWithTemplateParamsRequestJsonConverter());
            _jsonOptions.Converters.Add(new UserCreditPaymentJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<AuthApiEvents>();
            _services.AddSingleton<DefaultApiEvents>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IAuthApi, AuthApi>(client));
            builders.Add(_services.AddHttpClient<IDefaultApi, DefaultApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
