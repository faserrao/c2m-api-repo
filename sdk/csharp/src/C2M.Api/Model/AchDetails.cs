// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// AchDetails
    /// </summary>
    public partial class AchDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AchDetails" /> class.
        /// </summary>
        /// <param name="routingNumber">routingNumber</param>
        /// <param name="accountNumber">accountNumber</param>
        /// <param name="checkDigit">checkDigit</param>
        [JsonConstructor]
        public AchDetails(string routingNumber, string accountNumber, int checkDigit)
        {
            RoutingNumber = routingNumber;
            AccountNumber = accountNumber;
            CheckDigit = checkDigit;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RoutingNumber
        /// </summary>
        [JsonPropertyName("routingNumber")]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [JsonPropertyName("accountNumber")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets CheckDigit
        /// </summary>
        [JsonPropertyName("checkDigit")]
        public int CheckDigit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AchDetails {\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  CheckDigit: ").Append(CheckDigit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AchDetails" />
    /// </summary>
    public class AchDetailsJsonConverter : JsonConverter<AchDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="AchDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AchDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> routingNumber = default;
            Option<string?> accountNumber = default;
            Option<int?> checkDigit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "routingNumber":
                            routingNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "accountNumber":
                            accountNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "checkDigit":
                            checkDigit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!routingNumber.IsSet)
                throw new ArgumentException("Property is required for class AchDetails.", nameof(routingNumber));

            if (!accountNumber.IsSet)
                throw new ArgumentException("Property is required for class AchDetails.", nameof(accountNumber));

            if (!checkDigit.IsSet)
                throw new ArgumentException("Property is required for class AchDetails.", nameof(checkDigit));

            if (routingNumber.IsSet && routingNumber.Value == null)
                throw new ArgumentNullException(nameof(routingNumber), "Property is not nullable for class AchDetails.");

            if (accountNumber.IsSet && accountNumber.Value == null)
                throw new ArgumentNullException(nameof(accountNumber), "Property is not nullable for class AchDetails.");

            if (checkDigit.IsSet && checkDigit.Value == null)
                throw new ArgumentNullException(nameof(checkDigit), "Property is not nullable for class AchDetails.");

            return new AchDetails(routingNumber.Value!, accountNumber.Value!, checkDigit.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AchDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="achDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AchDetails achDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, achDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AchDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="achDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AchDetails achDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (achDetails.RoutingNumber == null)
                throw new ArgumentNullException(nameof(achDetails.RoutingNumber), "Property is required for class AchDetails.");

            if (achDetails.AccountNumber == null)
                throw new ArgumentNullException(nameof(achDetails.AccountNumber), "Property is required for class AchDetails.");

            writer.WriteString("routingNumber", achDetails.RoutingNumber);

            writer.WriteString("accountNumber", achDetails.AccountNumber);

            writer.WriteNumber("checkDigit", achDetails.CheckDigit);
        }
    }
}
