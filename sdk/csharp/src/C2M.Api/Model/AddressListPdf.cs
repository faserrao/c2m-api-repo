// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// AddressListPdf
    /// </summary>
    public partial class AddressListPdf : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressListPdf" /> class.
        /// </summary>
        /// <param name="documentSourceIdentifier">documentSourceIdentifier</param>
        /// <param name="addressListRegion">addressListRegion</param>
        /// <param name="delimiter">delimiter</param>
        /// <param name="tags">tags</param>
        [JsonConstructor]
        public AddressListPdf(DocumentSourceIdentifier documentSourceIdentifier, string addressListRegion, Option<string?> delimiter = default, Option<List<string>?> tags = default)
        {
            DocumentSourceIdentifier = documentSourceIdentifier;
            AddressListRegion = addressListRegion;
            DelimiterOption = delimiter;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets DocumentSourceIdentifier
        /// </summary>
        [JsonPropertyName("documentSourceIdentifier")]
        public DocumentSourceIdentifier DocumentSourceIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets AddressListRegion
        /// </summary>
        [JsonPropertyName("addressListRegion")]
        public string AddressListRegion { get; set; }

        /// <summary>
        /// Used to track the state of Delimiter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DelimiterOption { get; private set; }

        /// <summary>
        /// Gets or Sets Delimiter
        /// </summary>
        [JsonPropertyName("delimiter")]
        public string? Delimiter { get { return this.DelimiterOption; } set { this.DelimiterOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressListPdf {\n");
            sb.Append("  DocumentSourceIdentifier: ").Append(DocumentSourceIdentifier).Append("\n");
            sb.Append("  AddressListRegion: ").Append(AddressListRegion).Append("\n");
            sb.Append("  Delimiter: ").Append(Delimiter).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddressListPdf" />
    /// </summary>
    public class AddressListPdfJsonConverter : JsonConverter<AddressListPdf>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddressListPdf" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddressListPdf Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DocumentSourceIdentifier?> documentSourceIdentifier = default;
            Option<string?> addressListRegion = default;
            Option<string?> delimiter = default;
            Option<List<string>?> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "documentSourceIdentifier":
                            documentSourceIdentifier = new Option<DocumentSourceIdentifier?>(JsonSerializer.Deserialize<DocumentSourceIdentifier>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "addressListRegion":
                            addressListRegion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "delimiter":
                            delimiter = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!documentSourceIdentifier.IsSet)
                throw new ArgumentException("Property is required for class AddressListPdf.", nameof(documentSourceIdentifier));

            if (!addressListRegion.IsSet)
                throw new ArgumentException("Property is required for class AddressListPdf.", nameof(addressListRegion));

            if (documentSourceIdentifier.IsSet && documentSourceIdentifier.Value == null)
                throw new ArgumentNullException(nameof(documentSourceIdentifier), "Property is not nullable for class AddressListPdf.");

            if (addressListRegion.IsSet && addressListRegion.Value == null)
                throw new ArgumentNullException(nameof(addressListRegion), "Property is not nullable for class AddressListPdf.");

            if (delimiter.IsSet && delimiter.Value == null)
                throw new ArgumentNullException(nameof(delimiter), "Property is not nullable for class AddressListPdf.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class AddressListPdf.");

            return new AddressListPdf(documentSourceIdentifier.Value!, addressListRegion.Value!, delimiter, tags);
        }

        /// <summary>
        /// Serializes a <see cref="AddressListPdf" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addressListPdf"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddressListPdf addressListPdf, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addressListPdf, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddressListPdf" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addressListPdf"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddressListPdf addressListPdf, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addressListPdf.DocumentSourceIdentifier == null)
                throw new ArgumentNullException(nameof(addressListPdf.DocumentSourceIdentifier), "Property is required for class AddressListPdf.");

            if (addressListPdf.AddressListRegion == null)
                throw new ArgumentNullException(nameof(addressListPdf.AddressListRegion), "Property is required for class AddressListPdf.");

            if (addressListPdf.DelimiterOption.IsSet && addressListPdf.Delimiter == null)
                throw new ArgumentNullException(nameof(addressListPdf.Delimiter), "Property is required for class AddressListPdf.");

            if (addressListPdf.TagsOption.IsSet && addressListPdf.Tags == null)
                throw new ArgumentNullException(nameof(addressListPdf.Tags), "Property is required for class AddressListPdf.");

            writer.WritePropertyName("documentSourceIdentifier");
            JsonSerializer.Serialize(writer, addressListPdf.DocumentSourceIdentifier, jsonSerializerOptions);
            writer.WriteString("addressListRegion", addressListPdf.AddressListRegion);

            if (addressListPdf.DelimiterOption.IsSet)
                writer.WriteString("delimiter", addressListPdf.Delimiter);

            if (addressListPdf.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, addressListPdf.Tags, jsonSerializerOptions);
            }
        }
    }
}
