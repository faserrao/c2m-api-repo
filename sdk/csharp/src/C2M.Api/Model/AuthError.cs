// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// AuthError
    /// </summary>
    public partial class AuthError : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthError" /> class.
        /// </summary>
        /// <param name="code">OAuth-style error code</param>
        /// <param name="message">Human-readable error message</param>
        /// <param name="details">Additional error details</param>
        [JsonConstructor]
        public AuthError(string code, string message, Option<Object?> details = default)
        {
            Code = code;
            Message = message;
            DetailsOption = details;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// OAuth-style error code
        /// </summary>
        /// <value>OAuth-style error code</value>
        /* <example>invalid_grant</example> */
        [JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Human-readable error message
        /// </summary>
        /// <value>Human-readable error message</value>
        /* <example>The provided client credentials are invalid.</example> */
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Used to track the state of Details
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DetailsOption { get; private set; }

        /// <summary>
        /// Additional error details
        /// </summary>
        /// <value>Additional error details</value>
        [JsonPropertyName("details")]
        public Object? Details { get { return this.DetailsOption; } set { this.DetailsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthError {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthError" />
    /// </summary>
    public class AuthErrorJsonConverter : JsonConverter<AuthError>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthError" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthError Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> message = default;
            Option<Object?> details = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "details":
                            details = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!code.IsSet)
                throw new ArgumentException("Property is required for class AuthError.", nameof(code));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class AuthError.", nameof(message));

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class AuthError.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class AuthError.");

            if (details.IsSet && details.Value == null)
                throw new ArgumentNullException(nameof(details), "Property is not nullable for class AuthError.");

            return new AuthError(code.Value!, message.Value!, details);
        }

        /// <summary>
        /// Serializes a <see cref="AuthError" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authError"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthError authError, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, authError, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthError" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authError"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthError authError, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authError.Code == null)
                throw new ArgumentNullException(nameof(authError.Code), "Property is required for class AuthError.");

            if (authError.Message == null)
                throw new ArgumentNullException(nameof(authError.Message), "Property is required for class AuthError.");

            if (authError.DetailsOption.IsSet && authError.Details == null)
                throw new ArgumentNullException(nameof(authError.Details), "Property is required for class AuthError.");

            writer.WriteString("code", authError.Code);

            writer.WriteString("message", authError.Message);

            if (authError.DetailsOption.IsSet)
            {
                writer.WritePropertyName("details");
                JsonSerializer.Serialize(writer, authError.Details, jsonSerializerOptions);
            }
        }
    }
}
