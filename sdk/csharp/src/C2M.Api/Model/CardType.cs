// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// Defines cardType
    /// </summary>
    public enum CardType
    {
        /// <summary>
        /// Enum Visa for value: visa
        /// </summary>
        Visa = 1,

        /// <summary>
        /// Enum Mastercard for value: mastercard
        /// </summary>
        Mastercard = 2,

        /// <summary>
        /// Enum Discover for value: discover
        /// </summary>
        Discover = 3,

        /// <summary>
        /// Enum AmericanExpress for value: americanExpress
        /// </summary>
        AmericanExpress = 4
    }

    /// <summary>
    /// Converts <see cref="CardType"/> to and from the JSON value
    /// </summary>
    public static class CardTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="CardType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CardType FromString(string value)
        {
            if (value.Equals("visa"))
                return CardType.Visa;

            if (value.Equals("mastercard"))
                return CardType.Mastercard;

            if (value.Equals("discover"))
                return CardType.Discover;

            if (value.Equals("americanExpress"))
                return CardType.AmericanExpress;

            throw new NotImplementedException($"Could not convert value to type CardType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="CardType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CardType? FromStringOrDefault(string value)
        {
            if (value.Equals("visa"))
                return CardType.Visa;

            if (value.Equals("mastercard"))
                return CardType.Mastercard;

            if (value.Equals("discover"))
                return CardType.Discover;

            if (value.Equals("americanExpress"))
                return CardType.AmericanExpress;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CardType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(CardType value)
        {
            if (value == CardType.Visa)
                return "visa";

            if (value == CardType.Mastercard)
                return "mastercard";

            if (value == CardType.Discover)
                return "discover";

            if (value == CardType.AmericanExpress)
                return "americanExpress";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CardType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CardTypeJsonConverter : JsonConverter<CardType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CardType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CardType? result = rawValue == null
                ? null
                : CardTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CardType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cardType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CardType cardType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(CardTypeValueConverter.ToJsonValue(cardType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CardType"/>
    /// </summary>
    public class CardTypeNullableJsonConverter : JsonConverter<CardType?>
    {
        /// <summary>
        /// Returns a CardType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CardType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CardType? result = rawValue == null
                ? null
                : CardTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CardType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cardType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CardType? cardType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(cardType.HasValue ? CardTypeValueConverter.ToJsonValue(cardType.Value).ToString() : "null");
        }
    }
}
