// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// CreditCardDetails
    /// </summary>
    public partial class CreditCardDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardDetails" /> class.
        /// </summary>
        /// <param name="cardType">cardType</param>
        /// <param name="cardNumber">cardNumber</param>
        /// <param name="expirationDate">expirationDate</param>
        /// <param name="cvv">cvv</param>
        [JsonConstructor]
        public CreditCardDetails(CardType cardType, string cardNumber, ExpirationDate expirationDate, int cvv)
        {
            CardType = cardType;
            CardNumber = cardNumber;
            ExpirationDate = expirationDate;
            Cvv = cvv;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CardType
        /// </summary>
        [JsonPropertyName("cardType")]
        public CardType CardType { get; set; }

        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [JsonPropertyName("cardNumber")]
        public string CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [JsonPropertyName("expirationDate")]
        public ExpirationDate ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets Cvv
        /// </summary>
        [JsonPropertyName("cvv")]
        public int Cvv { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditCardDetails {\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Cvv: ").Append(Cvv).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreditCardDetails" />
    /// </summary>
    public class CreditCardDetailsJsonConverter : JsonConverter<CreditCardDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreditCardDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreditCardDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CardType?> cardType = default;
            Option<string?> cardNumber = default;
            Option<ExpirationDate?> expirationDate = default;
            Option<int?> cvv = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cardType":
                            string? cardTypeRawValue = utf8JsonReader.GetString();
                            if (cardTypeRawValue != null)
                                cardType = new Option<CardType?>(CardTypeValueConverter.FromStringOrDefault(cardTypeRawValue));
                            break;
                        case "cardNumber":
                            cardNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expirationDate":
                            expirationDate = new Option<ExpirationDate?>(JsonSerializer.Deserialize<ExpirationDate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cvv":
                            cvv = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!cardType.IsSet)
                throw new ArgumentException("Property is required for class CreditCardDetails.", nameof(cardType));

            if (!cardNumber.IsSet)
                throw new ArgumentException("Property is required for class CreditCardDetails.", nameof(cardNumber));

            if (!expirationDate.IsSet)
                throw new ArgumentException("Property is required for class CreditCardDetails.", nameof(expirationDate));

            if (!cvv.IsSet)
                throw new ArgumentException("Property is required for class CreditCardDetails.", nameof(cvv));

            if (cardType.IsSet && cardType.Value == null)
                throw new ArgumentNullException(nameof(cardType), "Property is not nullable for class CreditCardDetails.");

            if (cardNumber.IsSet && cardNumber.Value == null)
                throw new ArgumentNullException(nameof(cardNumber), "Property is not nullable for class CreditCardDetails.");

            if (expirationDate.IsSet && expirationDate.Value == null)
                throw new ArgumentNullException(nameof(expirationDate), "Property is not nullable for class CreditCardDetails.");

            if (cvv.IsSet && cvv.Value == null)
                throw new ArgumentNullException(nameof(cvv), "Property is not nullable for class CreditCardDetails.");

            return new CreditCardDetails(cardType.Value!.Value!, cardNumber.Value!, expirationDate.Value!, cvv.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CreditCardDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="creditCardDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreditCardDetails creditCardDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, creditCardDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreditCardDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="creditCardDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreditCardDetails creditCardDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (creditCardDetails.CardNumber == null)
                throw new ArgumentNullException(nameof(creditCardDetails.CardNumber), "Property is required for class CreditCardDetails.");

            if (creditCardDetails.ExpirationDate == null)
                throw new ArgumentNullException(nameof(creditCardDetails.ExpirationDate), "Property is required for class CreditCardDetails.");

            var cardTypeRawValue = CardTypeValueConverter.ToJsonValue(creditCardDetails.CardType);
            writer.WriteString("cardType", cardTypeRawValue);

            writer.WriteString("cardNumber", creditCardDetails.CardNumber);

            writer.WritePropertyName("expirationDate");
            JsonSerializer.Serialize(writer, creditCardDetails.ExpirationDate, jsonSerializerOptions);
            writer.WriteNumber("cvv", creditCardDetails.Cvv);
        }
    }
}
