// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// Defines currency
    /// </summary>
    public enum Currency
    {
        /// <summary>
        /// Enum USD for value: USD
        /// </summary>
        USD = 1,

        /// <summary>
        /// Enum EUR for value: EUR
        /// </summary>
        EUR = 2,

        /// <summary>
        /// Enum GBP for value: GBP
        /// </summary>
        GBP = 3,

        /// <summary>
        /// Enum CAD for value: CAD
        /// </summary>
        CAD = 4,

        /// <summary>
        /// Enum AUD for value: AUD
        /// </summary>
        AUD = 5
    }

    /// <summary>
    /// Converts <see cref="Currency"/> to and from the JSON value
    /// </summary>
    public static class CurrencyValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Currency"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Currency FromString(string value)
        {
            if (value.Equals("USD"))
                return Currency.USD;

            if (value.Equals("EUR"))
                return Currency.EUR;

            if (value.Equals("GBP"))
                return Currency.GBP;

            if (value.Equals("CAD"))
                return Currency.CAD;

            if (value.Equals("AUD"))
                return Currency.AUD;

            throw new NotImplementedException($"Could not convert value to type Currency: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Currency"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Currency? FromStringOrDefault(string value)
        {
            if (value.Equals("USD"))
                return Currency.USD;

            if (value.Equals("EUR"))
                return Currency.EUR;

            if (value.Equals("GBP"))
                return Currency.GBP;

            if (value.Equals("CAD"))
                return Currency.CAD;

            if (value.Equals("AUD"))
                return Currency.AUD;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Currency"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Currency value)
        {
            if (value == Currency.USD)
                return "USD";

            if (value == Currency.EUR)
                return "EUR";

            if (value == Currency.GBP)
                return "GBP";

            if (value == Currency.CAD)
                return "CAD";

            if (value == Currency.AUD)
                return "AUD";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Currency"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CurrencyJsonConverter : JsonConverter<Currency>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Currency Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Currency? result = rawValue == null
                ? null
                : CurrencyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Currency to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currency"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Currency currency, JsonSerializerOptions options)
        {
            writer.WriteStringValue(CurrencyValueConverter.ToJsonValue(currency).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Currency"/>
    /// </summary>
    public class CurrencyNullableJsonConverter : JsonConverter<Currency?>
    {
        /// <summary>
        /// Returns a Currency from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Currency? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Currency? result = rawValue == null
                ? null
                : CurrencyValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Currency to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currency"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Currency? currency, JsonSerializerOptions options)
        {
            writer.WriteStringValue(currency.HasValue ? CurrencyValueConverter.ToJsonValue(currency.Value).ToString() : "null");
        }
    }
}
