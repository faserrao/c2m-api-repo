// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// Defines digit
    /// </summary>
    public enum Digit
    {
        /// <summary>
        /// Enum _0 for value: 0
        /// </summary>
        _0 = 1,

        /// <summary>
        /// Enum _1 for value: 1
        /// </summary>
        _1 = 2,

        /// <summary>
        /// Enum _2 for value: 2
        /// </summary>
        _2 = 3,

        /// <summary>
        /// Enum _3 for value: 3
        /// </summary>
        _3 = 4,

        /// <summary>
        /// Enum _4 for value: 4
        /// </summary>
        _4 = 5,

        /// <summary>
        /// Enum _5 for value: 5
        /// </summary>
        _5 = 6,

        /// <summary>
        /// Enum _6 for value: 6
        /// </summary>
        _6 = 7,

        /// <summary>
        /// Enum _7 for value: 7
        /// </summary>
        _7 = 8,

        /// <summary>
        /// Enum _8 for value: 8
        /// </summary>
        _8 = 9,

        /// <summary>
        /// Enum _9 for value: 9
        /// </summary>
        _9 = 10
    }

    /// <summary>
    /// Converts <see cref="Digit"/> to and from the JSON value
    /// </summary>
    public static class DigitValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Digit"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Digit FromString(string value)
        {
            if (value.Equals("0"))
                return Digit._0;

            if (value.Equals("1"))
                return Digit._1;

            if (value.Equals("2"))
                return Digit._2;

            if (value.Equals("3"))
                return Digit._3;

            if (value.Equals("4"))
                return Digit._4;

            if (value.Equals("5"))
                return Digit._5;

            if (value.Equals("6"))
                return Digit._6;

            if (value.Equals("7"))
                return Digit._7;

            if (value.Equals("8"))
                return Digit._8;

            if (value.Equals("9"))
                return Digit._9;

            throw new NotImplementedException($"Could not convert value to type Digit: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Digit"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Digit? FromStringOrDefault(string value)
        {
            if (value.Equals("0"))
                return Digit._0;

            if (value.Equals("1"))
                return Digit._1;

            if (value.Equals("2"))
                return Digit._2;

            if (value.Equals("3"))
                return Digit._3;

            if (value.Equals("4"))
                return Digit._4;

            if (value.Equals("5"))
                return Digit._5;

            if (value.Equals("6"))
                return Digit._6;

            if (value.Equals("7"))
                return Digit._7;

            if (value.Equals("8"))
                return Digit._8;

            if (value.Equals("9"))
                return Digit._9;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Digit"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Digit value)
        {
            if (value == Digit._0)
                return "0";

            if (value == Digit._1)
                return "1";

            if (value == Digit._2)
                return "2";

            if (value == Digit._3)
                return "3";

            if (value == Digit._4)
                return "4";

            if (value == Digit._5)
                return "5";

            if (value == Digit._6)
                return "6";

            if (value == Digit._7)
                return "7";

            if (value == Digit._8)
                return "8";

            if (value == Digit._9)
                return "9";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Digit"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DigitJsonConverter : JsonConverter<Digit>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Digit Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Digit? result = rawValue == null
                ? null
                : DigitValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Digit to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="digit"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Digit digit, JsonSerializerOptions options)
        {
            writer.WriteStringValue(DigitValueConverter.ToJsonValue(digit).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Digit"/>
    /// </summary>
    public class DigitNullableJsonConverter : JsonConverter<Digit?>
    {
        /// <summary>
        /// Returns a Digit from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Digit? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Digit? result = rawValue == null
                ? null
                : DigitValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Digit to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="digit"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Digit? digit, JsonSerializerOptions options)
        {
            writer.WriteStringValue(digit.HasValue ? DigitValueConverter.ToJsonValue(digit.Value).ToString() : "null");
        }
    }
}
