// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// Defines documentClass
    /// </summary>
    public enum DocumentClass
    {
        /// <summary>
        /// Enum BusinessLetter for value: businessLetter
        /// </summary>
        BusinessLetter = 1,

        /// <summary>
        /// Enum PersonalLetter for value: personalLetter
        /// </summary>
        PersonalLetter = 2
    }

    /// <summary>
    /// Converts <see cref="DocumentClass"/> to and from the JSON value
    /// </summary>
    public static class DocumentClassValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DocumentClass"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DocumentClass FromString(string value)
        {
            if (value.Equals("businessLetter"))
                return DocumentClass.BusinessLetter;

            if (value.Equals("personalLetter"))
                return DocumentClass.PersonalLetter;

            throw new NotImplementedException($"Could not convert value to type DocumentClass: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DocumentClass"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DocumentClass? FromStringOrDefault(string value)
        {
            if (value.Equals("businessLetter"))
                return DocumentClass.BusinessLetter;

            if (value.Equals("personalLetter"))
                return DocumentClass.PersonalLetter;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DocumentClass"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DocumentClass value)
        {
            if (value == DocumentClass.BusinessLetter)
                return "businessLetter";

            if (value == DocumentClass.PersonalLetter)
                return "personalLetter";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentClass"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DocumentClassJsonConverter : JsonConverter<DocumentClass>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DocumentClass Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DocumentClass? result = rawValue == null
                ? null
                : DocumentClassValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DocumentClass to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentClass"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DocumentClass documentClass, JsonSerializerOptions options)
        {
            writer.WriteStringValue(DocumentClassValueConverter.ToJsonValue(documentClass).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentClass"/>
    /// </summary>
    public class DocumentClassNullableJsonConverter : JsonConverter<DocumentClass?>
    {
        /// <summary>
        /// Returns a DocumentClass from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DocumentClass? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DocumentClass? result = rawValue == null
                ? null
                : DocumentClassValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DocumentClass to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentClass"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DocumentClass? documentClass, JsonSerializerOptions options)
        {
            writer.WriteStringValue(documentClass.HasValue ? DocumentClassValueConverter.ToJsonValue(documentClass.Value).ToString() : "null");
        }
    }
}
