// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// Defines documentFormat
    /// </summary>
    public enum DocumentFormat
    {
        /// <summary>
        /// Enum Pdf for value: pdf
        /// </summary>
        Pdf = 1,

        /// <summary>
        /// Enum Doc for value: doc
        /// </summary>
        Doc = 2,

        /// <summary>
        /// Enum Docx for value: docx
        /// </summary>
        Docx = 3,

        /// <summary>
        /// Enum Pub for value: pub
        /// </summary>
        Pub = 4,

        /// <summary>
        /// Enum Ppt for value: ppt
        /// </summary>
        Ppt = 5,

        /// <summary>
        /// Enum Pptx for value: pptx
        /// </summary>
        Pptx = 6,

        /// <summary>
        /// Enum Png for value: png
        /// </summary>
        Png = 7,

        /// <summary>
        /// Enum Jpeg for value: jpeg
        /// </summary>
        Jpeg = 8,

        /// <summary>
        /// Enum Odt for value: odt
        /// </summary>
        Odt = 9
    }

    /// <summary>
    /// Converts <see cref="DocumentFormat"/> to and from the JSON value
    /// </summary>
    public static class DocumentFormatValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DocumentFormat"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DocumentFormat FromString(string value)
        {
            if (value.Equals("pdf"))
                return DocumentFormat.Pdf;

            if (value.Equals("doc"))
                return DocumentFormat.Doc;

            if (value.Equals("docx"))
                return DocumentFormat.Docx;

            if (value.Equals("pub"))
                return DocumentFormat.Pub;

            if (value.Equals("ppt"))
                return DocumentFormat.Ppt;

            if (value.Equals("pptx"))
                return DocumentFormat.Pptx;

            if (value.Equals("png"))
                return DocumentFormat.Png;

            if (value.Equals("jpeg"))
                return DocumentFormat.Jpeg;

            if (value.Equals("odt"))
                return DocumentFormat.Odt;

            throw new NotImplementedException($"Could not convert value to type DocumentFormat: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DocumentFormat"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DocumentFormat? FromStringOrDefault(string value)
        {
            if (value.Equals("pdf"))
                return DocumentFormat.Pdf;

            if (value.Equals("doc"))
                return DocumentFormat.Doc;

            if (value.Equals("docx"))
                return DocumentFormat.Docx;

            if (value.Equals("pub"))
                return DocumentFormat.Pub;

            if (value.Equals("ppt"))
                return DocumentFormat.Ppt;

            if (value.Equals("pptx"))
                return DocumentFormat.Pptx;

            if (value.Equals("png"))
                return DocumentFormat.Png;

            if (value.Equals("jpeg"))
                return DocumentFormat.Jpeg;

            if (value.Equals("odt"))
                return DocumentFormat.Odt;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DocumentFormat"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DocumentFormat value)
        {
            if (value == DocumentFormat.Pdf)
                return "pdf";

            if (value == DocumentFormat.Doc)
                return "doc";

            if (value == DocumentFormat.Docx)
                return "docx";

            if (value == DocumentFormat.Pub)
                return "pub";

            if (value == DocumentFormat.Ppt)
                return "ppt";

            if (value == DocumentFormat.Pptx)
                return "pptx";

            if (value == DocumentFormat.Png)
                return "png";

            if (value == DocumentFormat.Jpeg)
                return "jpeg";

            if (value == DocumentFormat.Odt)
                return "odt";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentFormat"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DocumentFormatJsonConverter : JsonConverter<DocumentFormat>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DocumentFormat Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DocumentFormat? result = rawValue == null
                ? null
                : DocumentFormatValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DocumentFormat to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentFormat"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DocumentFormat documentFormat, JsonSerializerOptions options)
        {
            writer.WriteStringValue(DocumentFormatValueConverter.ToJsonValue(documentFormat).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentFormat"/>
    /// </summary>
    public class DocumentFormatNullableJsonConverter : JsonConverter<DocumentFormat?>
    {
        /// <summary>
        /// Returns a DocumentFormat from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DocumentFormat? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DocumentFormat? result = rawValue == null
                ? null
                : DocumentFormatValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DocumentFormat to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentFormat"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DocumentFormat? documentFormat, JsonSerializerOptions options)
        {
            writer.WriteStringValue(documentFormat.HasValue ? DocumentFormatValueConverter.ToJsonValue(documentFormat.Value).ToString() : "null");
        }
    }
}
