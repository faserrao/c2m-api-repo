// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// DocumentSourceIdentifier
    /// </summary>
    public partial class DocumentSourceIdentifier : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSourceIdentifier" /> class.
        /// </summary>
        /// <param name="int"></param>
        public DocumentSourceIdentifier(int @int)
        {
            Int = @int;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSourceIdentifier" /> class.
        /// </summary>
        /// <param name="string"></param>
        public DocumentSourceIdentifier(string @string)
        {
            String = @string;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSourceIdentifier" /> class.
        /// </summary>
        /// <param name="documentSourceIdentifierOneOf"></param>
        public DocumentSourceIdentifier(DocumentSourceIdentifierOneOf documentSourceIdentifierOneOf)
        {
            DocumentSourceIdentifierOneOf = documentSourceIdentifierOneOf;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSourceIdentifier" /> class.
        /// </summary>
        /// <param name="documentSourceIdentifierOneOf1"></param>
        public DocumentSourceIdentifier(DocumentSourceIdentifierOneOf1 documentSourceIdentifierOneOf1)
        {
            DocumentSourceIdentifierOneOf1 = documentSourceIdentifierOneOf1;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSourceIdentifier" /> class.
        /// </summary>
        /// <param name="documentSourceIdentifierOneOf2"></param>
        public DocumentSourceIdentifier(DocumentSourceIdentifierOneOf2 documentSourceIdentifierOneOf2)
        {
            DocumentSourceIdentifierOneOf2 = documentSourceIdentifierOneOf2;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Int
        /// </summary>
        public int? Int { get; set; }

        /// <summary>
        /// Gets or Sets String
        /// </summary>
        public string? String { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSourceIdentifierOneOf
        /// </summary>
        public DocumentSourceIdentifierOneOf? DocumentSourceIdentifierOneOf { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSourceIdentifierOneOf1
        /// </summary>
        public DocumentSourceIdentifierOneOf1? DocumentSourceIdentifierOneOf1 { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSourceIdentifierOneOf2
        /// </summary>
        public DocumentSourceIdentifierOneOf2? DocumentSourceIdentifierOneOf2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentSourceIdentifier {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentSourceIdentifier" />
    /// </summary>
    public class DocumentSourceIdentifierJsonConverter : JsonConverter<DocumentSourceIdentifier>
    {
        /// <summary>
        /// Deserializes json to <see cref="DocumentSourceIdentifier" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DocumentSourceIdentifier Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            int? varInt = default;
            string? varString = default;
            DocumentSourceIdentifierOneOf? documentSourceIdentifierOneOf = default;
            DocumentSourceIdentifierOneOf1? documentSourceIdentifierOneOf1 = default;
            DocumentSourceIdentifierOneOf2? documentSourceIdentifierOneOf2 = default;

            Utf8JsonReader utf8JsonReaderOneOf = utf8JsonReader;
            while (utf8JsonReaderOneOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (utf8JsonReaderOneOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderOneOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderInt = utf8JsonReader;
                    ClientUtils.TryDeserialize<int?>(ref utf8JsonReaderInt, jsonSerializerOptions, out varInt);

                    Utf8JsonReader utf8JsonReaderString = utf8JsonReader;
                    ClientUtils.TryDeserialize<string?>(ref utf8JsonReaderString, jsonSerializerOptions, out varString);

                    Utf8JsonReader utf8JsonReaderDocumentSourceIdentifierOneOf = utf8JsonReader;
                    ClientUtils.TryDeserialize<DocumentSourceIdentifierOneOf?>(ref utf8JsonReaderDocumentSourceIdentifierOneOf, jsonSerializerOptions, out documentSourceIdentifierOneOf);

                    Utf8JsonReader utf8JsonReaderDocumentSourceIdentifierOneOf1 = utf8JsonReader;
                    ClientUtils.TryDeserialize<DocumentSourceIdentifierOneOf1?>(ref utf8JsonReaderDocumentSourceIdentifierOneOf1, jsonSerializerOptions, out documentSourceIdentifierOneOf1);

                    Utf8JsonReader utf8JsonReaderDocumentSourceIdentifierOneOf2 = utf8JsonReader;
                    ClientUtils.TryDeserialize<DocumentSourceIdentifierOneOf2?>(ref utf8JsonReaderDocumentSourceIdentifierOneOf2, jsonSerializerOptions, out documentSourceIdentifierOneOf2);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            if (varInt != null)
                return new DocumentSourceIdentifier(varInt.Value);

            if (varString != null)
                return new DocumentSourceIdentifier(varString);

            if (documentSourceIdentifierOneOf != null)
                return new DocumentSourceIdentifier(documentSourceIdentifierOneOf);

            if (documentSourceIdentifierOneOf1 != null)
                return new DocumentSourceIdentifier(documentSourceIdentifierOneOf1);

            if (documentSourceIdentifierOneOf2 != null)
                return new DocumentSourceIdentifier(documentSourceIdentifierOneOf2);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="DocumentSourceIdentifier" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentSourceIdentifier"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DocumentSourceIdentifier documentSourceIdentifier, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, documentSourceIdentifier, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DocumentSourceIdentifier" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentSourceIdentifier"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DocumentSourceIdentifier documentSourceIdentifier, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
