// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// Defines envelope
    /// </summary>
    public enum Envelope
    {
        /// <summary>
        /// Enum Flat for value: flat
        /// </summary>
        Flat = 1,

        /// <summary>
        /// Enum WindowedFlat for value: windowedFlat
        /// </summary>
        WindowedFlat = 2,

        /// <summary>
        /// Enum Letter for value: letter
        /// </summary>
        Letter = 3,

        /// <summary>
        /// Enum Legal for value: legal
        /// </summary>
        Legal = 4,

        /// <summary>
        /// Enum Postcard for value: postcard
        /// </summary>
        Postcard = 5
    }

    /// <summary>
    /// Converts <see cref="Envelope"/> to and from the JSON value
    /// </summary>
    public static class EnvelopeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Envelope"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Envelope FromString(string value)
        {
            if (value.Equals("flat"))
                return Envelope.Flat;

            if (value.Equals("windowedFlat"))
                return Envelope.WindowedFlat;

            if (value.Equals("letter"))
                return Envelope.Letter;

            if (value.Equals("legal"))
                return Envelope.Legal;

            if (value.Equals("postcard"))
                return Envelope.Postcard;

            throw new NotImplementedException($"Could not convert value to type Envelope: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Envelope"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Envelope? FromStringOrDefault(string value)
        {
            if (value.Equals("flat"))
                return Envelope.Flat;

            if (value.Equals("windowedFlat"))
                return Envelope.WindowedFlat;

            if (value.Equals("letter"))
                return Envelope.Letter;

            if (value.Equals("legal"))
                return Envelope.Legal;

            if (value.Equals("postcard"))
                return Envelope.Postcard;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Envelope"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Envelope value)
        {
            if (value == Envelope.Flat)
                return "flat";

            if (value == Envelope.WindowedFlat)
                return "windowedFlat";

            if (value == Envelope.Letter)
                return "letter";

            if (value == Envelope.Legal)
                return "legal";

            if (value == Envelope.Postcard)
                return "postcard";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Envelope"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class EnvelopeJsonConverter : JsonConverter<Envelope>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Envelope Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Envelope? result = rawValue == null
                ? null
                : EnvelopeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Envelope to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="envelope"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Envelope envelope, JsonSerializerOptions options)
        {
            writer.WriteStringValue(EnvelopeValueConverter.ToJsonValue(envelope).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Envelope"/>
    /// </summary>
    public class EnvelopeNullableJsonConverter : JsonConverter<Envelope?>
    {
        /// <summary>
        /// Returns a Envelope from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Envelope? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Envelope? result = rawValue == null
                ? null
                : EnvelopeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Envelope to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="envelope"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Envelope? envelope, JsonSerializerOptions options)
        {
            writer.WriteStringValue(envelope.HasValue ? EnvelopeValueConverter.ToJsonValue(envelope.Value).ToString() : "null");
        }
    }
}
