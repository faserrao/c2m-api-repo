// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// InvoiceDetails
    /// </summary>
    public partial class InvoiceDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceDetails" /> class.
        /// </summary>
        /// <param name="invoiceNumber">invoiceNumber</param>
        /// <param name="amountDue">amountDue</param>
        [JsonConstructor]
        public InvoiceDetails(string invoiceNumber, decimal amountDue)
        {
            InvoiceNumber = invoiceNumber;
            AmountDue = amountDue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [JsonPropertyName("invoiceNumber")]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets AmountDue
        /// </summary>
        [JsonPropertyName("amountDue")]
        public decimal AmountDue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceDetails {\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InvoiceDetails" />
    /// </summary>
    public class InvoiceDetailsJsonConverter : JsonConverter<InvoiceDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="InvoiceDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InvoiceDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> invoiceNumber = default;
            Option<decimal?> amountDue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "invoiceNumber":
                            invoiceNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "amountDue":
                            amountDue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!invoiceNumber.IsSet)
                throw new ArgumentException("Property is required for class InvoiceDetails.", nameof(invoiceNumber));

            if (!amountDue.IsSet)
                throw new ArgumentException("Property is required for class InvoiceDetails.", nameof(amountDue));

            if (invoiceNumber.IsSet && invoiceNumber.Value == null)
                throw new ArgumentNullException(nameof(invoiceNumber), "Property is not nullable for class InvoiceDetails.");

            if (amountDue.IsSet && amountDue.Value == null)
                throw new ArgumentNullException(nameof(amountDue), "Property is not nullable for class InvoiceDetails.");

            return new InvoiceDetails(invoiceNumber.Value!, amountDue.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="InvoiceDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="invoiceDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InvoiceDetails invoiceDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, invoiceDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InvoiceDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="invoiceDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InvoiceDetails invoiceDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (invoiceDetails.InvoiceNumber == null)
                throw new ArgumentNullException(nameof(invoiceDetails.InvoiceNumber), "Property is required for class InvoiceDetails.");

            writer.WriteString("invoiceNumber", invoiceDetails.InvoiceNumber);

            writer.WriteNumber("amountDue", invoiceDetails.AmountDue);
        }
    }
}
