// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// JobOptions
    /// </summary>
    public partial class JobOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobOptions" /> class.
        /// </summary>
        /// <param name="documentClass">documentClass</param>
        /// <param name="layout">layout</param>
        /// <param name="mailclass">mailclass</param>
        /// <param name="paperType">paperType</param>
        /// <param name="printOption">printOption</param>
        /// <param name="envelope">envelope</param>
        [JsonConstructor]
        public JobOptions(DocumentClass documentClass, Layout layout, Mailclass mailclass, PaperType paperType, PrintOption printOption, Envelope envelope)
        {
            DocumentClass = documentClass;
            Layout = layout;
            Mailclass = mailclass;
            PaperType = paperType;
            PrintOption = printOption;
            Envelope = envelope;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets DocumentClass
        /// </summary>
        [JsonPropertyName("documentClass")]
        public DocumentClass DocumentClass { get; set; }

        /// <summary>
        /// Gets or Sets Layout
        /// </summary>
        [JsonPropertyName("layout")]
        public Layout Layout { get; set; }

        /// <summary>
        /// Gets or Sets Mailclass
        /// </summary>
        [JsonPropertyName("mailclass")]
        public Mailclass Mailclass { get; set; }

        /// <summary>
        /// Gets or Sets PaperType
        /// </summary>
        [JsonPropertyName("paperType")]
        public PaperType PaperType { get; set; }

        /// <summary>
        /// Gets or Sets PrintOption
        /// </summary>
        [JsonPropertyName("printOption")]
        public PrintOption PrintOption { get; set; }

        /// <summary>
        /// Gets or Sets Envelope
        /// </summary>
        [JsonPropertyName("envelope")]
        public Envelope Envelope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobOptions {\n");
            sb.Append("  DocumentClass: ").Append(DocumentClass).Append("\n");
            sb.Append("  Layout: ").Append(Layout).Append("\n");
            sb.Append("  Mailclass: ").Append(Mailclass).Append("\n");
            sb.Append("  PaperType: ").Append(PaperType).Append("\n");
            sb.Append("  PrintOption: ").Append(PrintOption).Append("\n");
            sb.Append("  Envelope: ").Append(Envelope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="JobOptions" />
    /// </summary>
    public class JobOptionsJsonConverter : JsonConverter<JobOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="JobOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override JobOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DocumentClass?> documentClass = default;
            Option<Layout?> layout = default;
            Option<Mailclass?> mailclass = default;
            Option<PaperType?> paperType = default;
            Option<PrintOption?> printOption = default;
            Option<Envelope?> envelope = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "documentClass":
                            string? documentClassRawValue = utf8JsonReader.GetString();
                            if (documentClassRawValue != null)
                                documentClass = new Option<DocumentClass?>(DocumentClassValueConverter.FromStringOrDefault(documentClassRawValue));
                            break;
                        case "layout":
                            string? layoutRawValue = utf8JsonReader.GetString();
                            if (layoutRawValue != null)
                                layout = new Option<Layout?>(LayoutValueConverter.FromStringOrDefault(layoutRawValue));
                            break;
                        case "mailclass":
                            string? mailclassRawValue = utf8JsonReader.GetString();
                            if (mailclassRawValue != null)
                                mailclass = new Option<Mailclass?>(MailclassValueConverter.FromStringOrDefault(mailclassRawValue));
                            break;
                        case "paperType":
                            string? paperTypeRawValue = utf8JsonReader.GetString();
                            if (paperTypeRawValue != null)
                                paperType = new Option<PaperType?>(PaperTypeValueConverter.FromStringOrDefault(paperTypeRawValue));
                            break;
                        case "printOption":
                            string? printOptionRawValue = utf8JsonReader.GetString();
                            if (printOptionRawValue != null)
                                printOption = new Option<PrintOption?>(PrintOptionValueConverter.FromStringOrDefault(printOptionRawValue));
                            break;
                        case "envelope":
                            string? envelopeRawValue = utf8JsonReader.GetString();
                            if (envelopeRawValue != null)
                                envelope = new Option<Envelope?>(EnvelopeValueConverter.FromStringOrDefault(envelopeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!documentClass.IsSet)
                throw new ArgumentException("Property is required for class JobOptions.", nameof(documentClass));

            if (!layout.IsSet)
                throw new ArgumentException("Property is required for class JobOptions.", nameof(layout));

            if (!mailclass.IsSet)
                throw new ArgumentException("Property is required for class JobOptions.", nameof(mailclass));

            if (!paperType.IsSet)
                throw new ArgumentException("Property is required for class JobOptions.", nameof(paperType));

            if (!printOption.IsSet)
                throw new ArgumentException("Property is required for class JobOptions.", nameof(printOption));

            if (!envelope.IsSet)
                throw new ArgumentException("Property is required for class JobOptions.", nameof(envelope));

            if (documentClass.IsSet && documentClass.Value == null)
                throw new ArgumentNullException(nameof(documentClass), "Property is not nullable for class JobOptions.");

            if (layout.IsSet && layout.Value == null)
                throw new ArgumentNullException(nameof(layout), "Property is not nullable for class JobOptions.");

            if (mailclass.IsSet && mailclass.Value == null)
                throw new ArgumentNullException(nameof(mailclass), "Property is not nullable for class JobOptions.");

            if (paperType.IsSet && paperType.Value == null)
                throw new ArgumentNullException(nameof(paperType), "Property is not nullable for class JobOptions.");

            if (printOption.IsSet && printOption.Value == null)
                throw new ArgumentNullException(nameof(printOption), "Property is not nullable for class JobOptions.");

            if (envelope.IsSet && envelope.Value == null)
                throw new ArgumentNullException(nameof(envelope), "Property is not nullable for class JobOptions.");

            return new JobOptions(documentClass.Value!.Value!, layout.Value!.Value!, mailclass.Value!.Value!, paperType.Value!.Value!, printOption.Value!.Value!, envelope.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="JobOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, JobOptions jobOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, jobOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="JobOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, JobOptions jobOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            var documentClassRawValue = DocumentClassValueConverter.ToJsonValue(jobOptions.DocumentClass);
            writer.WriteString("documentClass", documentClassRawValue);

            var layoutRawValue = LayoutValueConverter.ToJsonValue(jobOptions.Layout);
            writer.WriteString("layout", layoutRawValue);

            var mailclassRawValue = MailclassValueConverter.ToJsonValue(jobOptions.Mailclass);
            writer.WriteString("mailclass", mailclassRawValue);

            var paperTypeRawValue = PaperTypeValueConverter.ToJsonValue(jobOptions.PaperType);
            writer.WriteString("paperType", paperTypeRawValue);

            var printOptionRawValue = PrintOptionValueConverter.ToJsonValue(jobOptions.PrintOption);
            writer.WriteString("printOption", printOptionRawValue);

            var envelopeRawValue = EnvelopeValueConverter.ToJsonValue(jobOptions.Envelope);
            writer.WriteString("envelope", envelopeRawValue);
        }
    }
}
