// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// Defines layout
    /// </summary>
    public enum Layout
    {
        /// <summary>
        /// Enum Portrait for value: portrait
        /// </summary>
        Portrait = 1,

        /// <summary>
        /// Enum Landscape for value: landscape
        /// </summary>
        Landscape = 2
    }

    /// <summary>
    /// Converts <see cref="Layout"/> to and from the JSON value
    /// </summary>
    public static class LayoutValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Layout"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Layout FromString(string value)
        {
            if (value.Equals("portrait"))
                return Layout.Portrait;

            if (value.Equals("landscape"))
                return Layout.Landscape;

            throw new NotImplementedException($"Could not convert value to type Layout: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Layout"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Layout? FromStringOrDefault(string value)
        {
            if (value.Equals("portrait"))
                return Layout.Portrait;

            if (value.Equals("landscape"))
                return Layout.Landscape;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Layout"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Layout value)
        {
            if (value == Layout.Portrait)
                return "portrait";

            if (value == Layout.Landscape)
                return "landscape";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Layout"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class LayoutJsonConverter : JsonConverter<Layout>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Layout Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Layout? result = rawValue == null
                ? null
                : LayoutValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Layout to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="layout"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Layout layout, JsonSerializerOptions options)
        {
            writer.WriteStringValue(LayoutValueConverter.ToJsonValue(layout).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Layout"/>
    /// </summary>
    public class LayoutNullableJsonConverter : JsonConverter<Layout?>
    {
        /// <summary>
        /// Returns a Layout from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Layout? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Layout? result = rawValue == null
                ? null
                : LayoutValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Layout to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="layout"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Layout? layout, JsonSerializerOptions options)
        {
            writer.WriteStringValue(layout.HasValue ? LayoutValueConverter.ToJsonValue(layout.Value).ToString() : "null");
        }
    }
}
