// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// Defines mailclass
    /// </summary>
    public enum Mailclass
    {
        /// <summary>
        /// Enum FirstClassMail for value: firstClassMail
        /// </summary>
        FirstClassMail = 1,

        /// <summary>
        /// Enum PriorityMail for value: priorityMail
        /// </summary>
        PriorityMail = 2,

        /// <summary>
        /// Enum LargeEnvelope for value: largeEnvelope
        /// </summary>
        LargeEnvelope = 3
    }

    /// <summary>
    /// Converts <see cref="Mailclass"/> to and from the JSON value
    /// </summary>
    public static class MailclassValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Mailclass"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Mailclass FromString(string value)
        {
            if (value.Equals("firstClassMail"))
                return Mailclass.FirstClassMail;

            if (value.Equals("priorityMail"))
                return Mailclass.PriorityMail;

            if (value.Equals("largeEnvelope"))
                return Mailclass.LargeEnvelope;

            throw new NotImplementedException($"Could not convert value to type Mailclass: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Mailclass"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Mailclass? FromStringOrDefault(string value)
        {
            if (value.Equals("firstClassMail"))
                return Mailclass.FirstClassMail;

            if (value.Equals("priorityMail"))
                return Mailclass.PriorityMail;

            if (value.Equals("largeEnvelope"))
                return Mailclass.LargeEnvelope;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Mailclass"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Mailclass value)
        {
            if (value == Mailclass.FirstClassMail)
                return "firstClassMail";

            if (value == Mailclass.PriorityMail)
                return "priorityMail";

            if (value == Mailclass.LargeEnvelope)
                return "largeEnvelope";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Mailclass"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class MailclassJsonConverter : JsonConverter<Mailclass>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Mailclass Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Mailclass? result = rawValue == null
                ? null
                : MailclassValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Mailclass to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mailclass"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Mailclass mailclass, JsonSerializerOptions options)
        {
            writer.WriteStringValue(MailclassValueConverter.ToJsonValue(mailclass).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Mailclass"/>
    /// </summary>
    public class MailclassNullableJsonConverter : JsonConverter<Mailclass?>
    {
        /// <summary>
        /// Returns a Mailclass from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Mailclass? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Mailclass? result = rawValue == null
                ? null
                : MailclassValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Mailclass to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mailclass"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Mailclass? mailclass, JsonSerializerOptions options)
        {
            writer.WriteStringValue(mailclass.HasValue ? MailclassValueConverter.ToJsonValue(mailclass.Value).ToString() : "null");
        }
    }
}
