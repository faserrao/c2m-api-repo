// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// PaymentDetails
    /// </summary>
    public partial class PaymentDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetails" /> class.
        /// </summary>
        /// <param name="creditCardPayment"></param>
        public PaymentDetails(CreditCardPayment creditCardPayment)
        {
            CreditCardPayment = creditCardPayment;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetails" /> class.
        /// </summary>
        /// <param name="invoicePayment"></param>
        public PaymentDetails(InvoicePayment invoicePayment)
        {
            InvoicePayment = invoicePayment;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetails" /> class.
        /// </summary>
        /// <param name="achPayment"></param>
        public PaymentDetails(AchPayment achPayment)
        {
            AchPayment = achPayment;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetails" /> class.
        /// </summary>
        /// <param name="userCreditPayment"></param>
        public PaymentDetails(UserCreditPayment userCreditPayment)
        {
            UserCreditPayment = userCreditPayment;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetails" /> class.
        /// </summary>
        /// <param name="applePayPayment"></param>
        public PaymentDetails(ApplePayPayment applePayPayment)
        {
            ApplePayPayment = applePayPayment;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetails" /> class.
        /// </summary>
        /// <param name="googlePayPayment"></param>
        public PaymentDetails(GooglePayPayment googlePayPayment)
        {
            GooglePayPayment = googlePayPayment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CreditCardPayment
        /// </summary>
        public CreditCardPayment? CreditCardPayment { get; set; }

        /// <summary>
        /// Gets or Sets InvoicePayment
        /// </summary>
        public InvoicePayment? InvoicePayment { get; set; }

        /// <summary>
        /// Gets or Sets AchPayment
        /// </summary>
        public AchPayment? AchPayment { get; set; }

        /// <summary>
        /// Gets or Sets UserCreditPayment
        /// </summary>
        public UserCreditPayment? UserCreditPayment { get; set; }

        /// <summary>
        /// Gets or Sets ApplePayPayment
        /// </summary>
        public ApplePayPayment? ApplePayPayment { get; set; }

        /// <summary>
        /// Gets or Sets GooglePayPayment
        /// </summary>
        public GooglePayPayment? GooglePayPayment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentDetails {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentDetails" />
    /// </summary>
    public class PaymentDetailsJsonConverter : JsonConverter<PaymentDetails>
    {
        /// <summary>
        /// Deserializes json to <see cref="PaymentDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PaymentDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            CreditCardPayment? creditCardPayment = default;
            InvoicePayment? invoicePayment = default;
            AchPayment? achPayment = default;
            UserCreditPayment? userCreditPayment = default;
            ApplePayPayment? applePayPayment = default;
            GooglePayPayment? googlePayPayment = default;

            Utf8JsonReader utf8JsonReaderOneOf = utf8JsonReader;
            while (utf8JsonReaderOneOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (utf8JsonReaderOneOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderOneOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderCreditCardPayment = utf8JsonReader;
                    ClientUtils.TryDeserialize<CreditCardPayment?>(ref utf8JsonReaderCreditCardPayment, jsonSerializerOptions, out creditCardPayment);

                    Utf8JsonReader utf8JsonReaderInvoicePayment = utf8JsonReader;
                    ClientUtils.TryDeserialize<InvoicePayment?>(ref utf8JsonReaderInvoicePayment, jsonSerializerOptions, out invoicePayment);

                    Utf8JsonReader utf8JsonReaderAchPayment = utf8JsonReader;
                    ClientUtils.TryDeserialize<AchPayment?>(ref utf8JsonReaderAchPayment, jsonSerializerOptions, out achPayment);

                    Utf8JsonReader utf8JsonReaderUserCreditPayment = utf8JsonReader;
                    ClientUtils.TryDeserialize<UserCreditPayment?>(ref utf8JsonReaderUserCreditPayment, jsonSerializerOptions, out userCreditPayment);

                    Utf8JsonReader utf8JsonReaderApplePayPayment = utf8JsonReader;
                    ClientUtils.TryDeserialize<ApplePayPayment?>(ref utf8JsonReaderApplePayPayment, jsonSerializerOptions, out applePayPayment);

                    Utf8JsonReader utf8JsonReaderGooglePayPayment = utf8JsonReader;
                    ClientUtils.TryDeserialize<GooglePayPayment?>(ref utf8JsonReaderGooglePayPayment, jsonSerializerOptions, out googlePayPayment);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            if (creditCardPayment != null)
                return new PaymentDetails(creditCardPayment);

            if (invoicePayment != null)
                return new PaymentDetails(invoicePayment);

            if (achPayment != null)
                return new PaymentDetails(achPayment);

            if (userCreditPayment != null)
                return new PaymentDetails(userCreditPayment);

            if (applePayPayment != null)
                return new PaymentDetails(applePayPayment);

            if (googlePayPayment != null)
                return new PaymentDetails(googlePayPayment);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="PaymentDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PaymentDetails paymentDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, paymentDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PaymentDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PaymentDetails paymentDetails, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
