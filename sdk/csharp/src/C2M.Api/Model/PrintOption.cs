// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// Defines printOption
    /// </summary>
    public enum PrintOption
    {
        /// <summary>
        /// Enum None for value: none
        /// </summary>
        None = 1,

        /// <summary>
        /// Enum Color for value: color
        /// </summary>
        Color = 2,

        /// <summary>
        /// Enum Grayscale for value: grayscale
        /// </summary>
        Grayscale = 3
    }

    /// <summary>
    /// Converts <see cref="PrintOption"/> to and from the JSON value
    /// </summary>
    public static class PrintOptionValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PrintOption"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PrintOption FromString(string value)
        {
            if (value.Equals("none"))
                return PrintOption.None;

            if (value.Equals("color"))
                return PrintOption.Color;

            if (value.Equals("grayscale"))
                return PrintOption.Grayscale;

            throw new NotImplementedException($"Could not convert value to type PrintOption: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PrintOption"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PrintOption? FromStringOrDefault(string value)
        {
            if (value.Equals("none"))
                return PrintOption.None;

            if (value.Equals("color"))
                return PrintOption.Color;

            if (value.Equals("grayscale"))
                return PrintOption.Grayscale;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PrintOption"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PrintOption value)
        {
            if (value == PrintOption.None)
                return "none";

            if (value == PrintOption.Color)
                return "color";

            if (value == PrintOption.Grayscale)
                return "grayscale";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PrintOption"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PrintOptionJsonConverter : JsonConverter<PrintOption>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PrintOption Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PrintOption? result = rawValue == null
                ? null
                : PrintOptionValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PrintOption to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="printOption"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PrintOption printOption, JsonSerializerOptions options)
        {
            writer.WriteStringValue(PrintOptionValueConverter.ToJsonValue(printOption).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PrintOption"/>
    /// </summary>
    public class PrintOptionNullableJsonConverter : JsonConverter<PrintOption?>
    {
        /// <summary>
        /// Returns a PrintOption from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PrintOption? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PrintOption? result = rawValue == null
                ? null
                : PrintOptionValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PrintOption to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="printOption"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PrintOption? printOption, JsonSerializerOptions options)
        {
            writer.WriteStringValue(printOption.HasValue ? PrintOptionValueConverter.ToJsonValue(printOption.Value).ToString() : "null");
        }
    }
}
