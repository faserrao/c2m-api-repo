// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// RecipientAddress
    /// </summary>
    public partial class RecipientAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipientAddress" /> class.
        /// </summary>
        /// <param name="firstName">firstName</param>
        /// <param name="lastName">lastName</param>
        /// <param name="address1">address1</param>
        /// <param name="city">city</param>
        /// <param name="state">state</param>
        /// <param name="zip">zip</param>
        /// <param name="country">country</param>
        /// <param name="nickName">nickName</param>
        /// <param name="address2">address2</param>
        /// <param name="address3">address3</param>
        /// <param name="phoneNumber">phoneNumber</param>
        [JsonConstructor]
        public RecipientAddress(string firstName, string lastName, string address1, string city, string state, string zip, string country, Option<string?> nickName = default, Option<string?> address2 = default, Option<string?> address3 = default, Option<string?> phoneNumber = default)
        {
            FirstName = firstName;
            LastName = lastName;
            Address1 = address1;
            City = city;
            State = state;
            Zip = zip;
            Country = country;
            NickNameOption = nickName;
            Address2Option = address2;
            Address3Option = address3;
            PhoneNumberOption = phoneNumber;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Address1
        /// </summary>
        [JsonPropertyName("address1")]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [JsonPropertyName("city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Zip
        /// </summary>
        [JsonPropertyName("zip")]
        public string Zip { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [JsonPropertyName("country")]
        public string Country { get; set; }

        /// <summary>
        /// Used to track the state of NickName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NickNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets NickName
        /// </summary>
        [JsonPropertyName("nickName")]
        public string? NickName { get { return this.NickNameOption; } set { this.NickNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Address2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Address2Option { get; private set; }

        /// <summary>
        /// Gets or Sets Address2
        /// </summary>
        [JsonPropertyName("address2")]
        public string? Address2 { get { return this.Address2Option; } set { this.Address2Option = new(value); } }

        /// <summary>
        /// Used to track the state of Address3
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Address3Option { get; private set; }

        /// <summary>
        /// Gets or Sets Address3
        /// </summary>
        [JsonPropertyName("address3")]
        public string? Address3 { get { return this.Address3Option; } set { this.Address3Option = new(value); } }

        /// <summary>
        /// Used to track the state of PhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get { return this.PhoneNumberOption; } set { this.PhoneNumberOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecipientAddress {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  NickName: ").Append(NickName).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  Address3: ").Append(Address3).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RecipientAddress" />
    /// </summary>
    public class RecipientAddressJsonConverter : JsonConverter<RecipientAddress>
    {
        /// <summary>
        /// Deserializes json to <see cref="RecipientAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RecipientAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<string?> address1 = default;
            Option<string?> city = default;
            Option<string?> state = default;
            Option<string?> zip = default;
            Option<string?> country = default;
            Option<string?> nickName = default;
            Option<string?> address2 = default;
            Option<string?> address3 = default;
            Option<string?> phoneNumber = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "address1":
                            address1 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "city":
                            city = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "zip":
                            zip = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "country":
                            country = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nickName":
                            nickName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "address2":
                            address2 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "address3":
                            address3 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "phoneNumber":
                            phoneNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class RecipientAddress.", nameof(firstName));

            if (!lastName.IsSet)
                throw new ArgumentException("Property is required for class RecipientAddress.", nameof(lastName));

            if (!address1.IsSet)
                throw new ArgumentException("Property is required for class RecipientAddress.", nameof(address1));

            if (!city.IsSet)
                throw new ArgumentException("Property is required for class RecipientAddress.", nameof(city));

            if (!state.IsSet)
                throw new ArgumentException("Property is required for class RecipientAddress.", nameof(state));

            if (!zip.IsSet)
                throw new ArgumentException("Property is required for class RecipientAddress.", nameof(zip));

            if (!country.IsSet)
                throw new ArgumentException("Property is required for class RecipientAddress.", nameof(country));

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class RecipientAddress.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class RecipientAddress.");

            if (address1.IsSet && address1.Value == null)
                throw new ArgumentNullException(nameof(address1), "Property is not nullable for class RecipientAddress.");

            if (city.IsSet && city.Value == null)
                throw new ArgumentNullException(nameof(city), "Property is not nullable for class RecipientAddress.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class RecipientAddress.");

            if (zip.IsSet && zip.Value == null)
                throw new ArgumentNullException(nameof(zip), "Property is not nullable for class RecipientAddress.");

            if (country.IsSet && country.Value == null)
                throw new ArgumentNullException(nameof(country), "Property is not nullable for class RecipientAddress.");

            if (nickName.IsSet && nickName.Value == null)
                throw new ArgumentNullException(nameof(nickName), "Property is not nullable for class RecipientAddress.");

            if (address2.IsSet && address2.Value == null)
                throw new ArgumentNullException(nameof(address2), "Property is not nullable for class RecipientAddress.");

            if (address3.IsSet && address3.Value == null)
                throw new ArgumentNullException(nameof(address3), "Property is not nullable for class RecipientAddress.");

            if (phoneNumber.IsSet && phoneNumber.Value == null)
                throw new ArgumentNullException(nameof(phoneNumber), "Property is not nullable for class RecipientAddress.");

            return new RecipientAddress(firstName.Value!, lastName.Value!, address1.Value!, city.Value!, state.Value!, zip.Value!, country.Value!, nickName, address2, address3, phoneNumber);
        }

        /// <summary>
        /// Serializes a <see cref="RecipientAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recipientAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RecipientAddress recipientAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, recipientAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RecipientAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recipientAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RecipientAddress recipientAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (recipientAddress.FirstName == null)
                throw new ArgumentNullException(nameof(recipientAddress.FirstName), "Property is required for class RecipientAddress.");

            if (recipientAddress.LastName == null)
                throw new ArgumentNullException(nameof(recipientAddress.LastName), "Property is required for class RecipientAddress.");

            if (recipientAddress.Address1 == null)
                throw new ArgumentNullException(nameof(recipientAddress.Address1), "Property is required for class RecipientAddress.");

            if (recipientAddress.City == null)
                throw new ArgumentNullException(nameof(recipientAddress.City), "Property is required for class RecipientAddress.");

            if (recipientAddress.State == null)
                throw new ArgumentNullException(nameof(recipientAddress.State), "Property is required for class RecipientAddress.");

            if (recipientAddress.Zip == null)
                throw new ArgumentNullException(nameof(recipientAddress.Zip), "Property is required for class RecipientAddress.");

            if (recipientAddress.Country == null)
                throw new ArgumentNullException(nameof(recipientAddress.Country), "Property is required for class RecipientAddress.");

            if (recipientAddress.NickNameOption.IsSet && recipientAddress.NickName == null)
                throw new ArgumentNullException(nameof(recipientAddress.NickName), "Property is required for class RecipientAddress.");

            if (recipientAddress.Address2Option.IsSet && recipientAddress.Address2 == null)
                throw new ArgumentNullException(nameof(recipientAddress.Address2), "Property is required for class RecipientAddress.");

            if (recipientAddress.Address3Option.IsSet && recipientAddress.Address3 == null)
                throw new ArgumentNullException(nameof(recipientAddress.Address3), "Property is required for class RecipientAddress.");

            if (recipientAddress.PhoneNumberOption.IsSet && recipientAddress.PhoneNumber == null)
                throw new ArgumentNullException(nameof(recipientAddress.PhoneNumber), "Property is required for class RecipientAddress.");

            writer.WriteString("firstName", recipientAddress.FirstName);

            writer.WriteString("lastName", recipientAddress.LastName);

            writer.WriteString("address1", recipientAddress.Address1);

            writer.WriteString("city", recipientAddress.City);

            writer.WriteString("state", recipientAddress.State);

            writer.WriteString("zip", recipientAddress.Zip);

            writer.WriteString("country", recipientAddress.Country);

            if (recipientAddress.NickNameOption.IsSet)
                writer.WriteString("nickName", recipientAddress.NickName);

            if (recipientAddress.Address2Option.IsSet)
                writer.WriteString("address2", recipientAddress.Address2);

            if (recipientAddress.Address3Option.IsSet)
                writer.WriteString("address3", recipientAddress.Address3);

            if (recipientAddress.PhoneNumberOption.IsSet)
                writer.WriteString("phoneNumber", recipientAddress.PhoneNumber);
        }
    }
}
