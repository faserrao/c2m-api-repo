// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// ShortTokenRequest
    /// </summary>
    public partial class ShortTokenRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShortTokenRequest" /> class.
        /// </summary>
        /// <param name="longToken">Optional if the long-term token is provided in Authorization header</param>
        /// <param name="scopes">Optional scope narrowing; defaults to the long-term token&#39;s scopes</param>
        [JsonConstructor]
        public ShortTokenRequest(Option<string?> longToken = default, Option<List<string>?> scopes = default)
        {
            LongTokenOption = longToken;
            ScopesOption = scopes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of LongToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LongTokenOption { get; private set; }

        /// <summary>
        /// Optional if the long-term token is provided in Authorization header
        /// </summary>
        /// <value>Optional if the long-term token is provided in Authorization header</value>
        [JsonPropertyName("long_token")]
        public string? LongToken { get { return this.LongTokenOption; } set { this.LongTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of Scopes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ScopesOption { get; private set; }

        /// <summary>
        /// Optional scope narrowing; defaults to the long-term token&#39;s scopes
        /// </summary>
        /// <value>Optional scope narrowing; defaults to the long-term token&#39;s scopes</value>
        [JsonPropertyName("scopes")]
        public List<string>? Scopes { get { return this.ScopesOption; } set { this.ScopesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShortTokenRequest {\n");
            sb.Append("  LongToken: ").Append(LongToken).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShortTokenRequest" />
    /// </summary>
    public class ShortTokenRequestJsonConverter : JsonConverter<ShortTokenRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ShortTokenRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShortTokenRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> longToken = default;
            Option<List<string>?> scopes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "long_token":
                            longToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scopes":
                            scopes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (longToken.IsSet && longToken.Value == null)
                throw new ArgumentNullException(nameof(longToken), "Property is not nullable for class ShortTokenRequest.");

            if (scopes.IsSet && scopes.Value == null)
                throw new ArgumentNullException(nameof(scopes), "Property is not nullable for class ShortTokenRequest.");

            return new ShortTokenRequest(longToken, scopes);
        }

        /// <summary>
        /// Serializes a <see cref="ShortTokenRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shortTokenRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShortTokenRequest shortTokenRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shortTokenRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShortTokenRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shortTokenRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShortTokenRequest shortTokenRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shortTokenRequest.LongTokenOption.IsSet && shortTokenRequest.LongToken == null)
                throw new ArgumentNullException(nameof(shortTokenRequest.LongToken), "Property is required for class ShortTokenRequest.");

            if (shortTokenRequest.ScopesOption.IsSet && shortTokenRequest.Scopes == null)
                throw new ArgumentNullException(nameof(shortTokenRequest.Scopes), "Property is required for class ShortTokenRequest.");

            if (shortTokenRequest.LongTokenOption.IsSet)
                writer.WriteString("long_token", shortTokenRequest.LongToken);

            if (shortTokenRequest.ScopesOption.IsSet)
            {
                writer.WritePropertyName("scopes");
                JsonSerializer.Serialize(writer, shortTokenRequest.Scopes, jsonSerializerOptions);
            }
        }
    }
}
