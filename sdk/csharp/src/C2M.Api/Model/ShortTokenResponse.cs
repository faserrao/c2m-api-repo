// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// ShortTokenResponse
    /// </summary>
    public partial class ShortTokenResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShortTokenResponse" /> class.
        /// </summary>
        /// <param name="tokenType">tokenType</param>
        /// <param name="accessToken">Short-lived JWT</param>
        /// <param name="expiresIn">Lifetime in seconds (e.g., 900 for 15 minutes)</param>
        /// <param name="expiresAt">ISO 8601 timestamp of expiration</param>
        /// <param name="scopes">Granted scopes</param>
        /// <param name="tokenId">Server-issued identifier for this token</param>
        [JsonConstructor]
        public ShortTokenResponse(TokenTypeEnum tokenType, string accessToken, int expiresIn, DateTime expiresAt, Option<List<string>?> scopes = default, Option<string?> tokenId = default)
        {
            TokenType = tokenType;
            AccessToken = accessToken;
            ExpiresIn = expiresIn;
            ExpiresAt = expiresAt;
            ScopesOption = scopes;
            TokenIdOption = tokenId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines TokenType
        /// </summary>
        public enum TokenTypeEnum
        {
            /// <summary>
            /// Enum Bearer for value: Bearer
            /// </summary>
            Bearer = 1
        }

        /// <summary>
        /// Returns a <see cref="TokenTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TokenTypeEnum TokenTypeEnumFromString(string value)
        {
            if (value.Equals("Bearer"))
                return TokenTypeEnum.Bearer;

            throw new NotImplementedException($"Could not convert value to type TokenTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TokenTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TokenTypeEnum? TokenTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Bearer"))
                return TokenTypeEnum.Bearer;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TokenTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TokenTypeEnumToJsonValue(TokenTypeEnum value)
        {
            if (value == TokenTypeEnum.Bearer)
                return "Bearer";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets TokenType
        /// </summary>
        [JsonPropertyName("token_type")]
        public TokenTypeEnum TokenType { get; set; }

        /// <summary>
        /// Short-lived JWT
        /// </summary>
        /// <value>Short-lived JWT</value>
        [JsonPropertyName("access_token")]
        public string AccessToken { get; set; }

        /// <summary>
        /// Lifetime in seconds (e.g., 900 for 15 minutes)
        /// </summary>
        /// <value>Lifetime in seconds (e.g., 900 for 15 minutes)</value>
        [JsonPropertyName("expires_in")]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// ISO 8601 timestamp of expiration
        /// </summary>
        /// <value>ISO 8601 timestamp of expiration</value>
        [JsonPropertyName("expires_at")]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// Used to track the state of Scopes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ScopesOption { get; private set; }

        /// <summary>
        /// Granted scopes
        /// </summary>
        /// <value>Granted scopes</value>
        [JsonPropertyName("scopes")]
        public List<string>? Scopes { get { return this.ScopesOption; } set { this.ScopesOption = new(value); } }

        /// <summary>
        /// Used to track the state of TokenId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TokenIdOption { get; private set; }

        /// <summary>
        /// Server-issued identifier for this token
        /// </summary>
        /// <value>Server-issued identifier for this token</value>
        [JsonPropertyName("token_id")]
        public string? TokenId { get { return this.TokenIdOption; } set { this.TokenIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShortTokenResponse {\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShortTokenResponse" />
    /// </summary>
    public class ShortTokenResponseJsonConverter : JsonConverter<ShortTokenResponse>
    {
        /// <summary>
        /// The format to use to serialize ExpiresAt
        /// </summary>
        public static string ExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ShortTokenResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ShortTokenResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ShortTokenResponse.TokenTypeEnum?> tokenType = default;
            Option<string?> accessToken = default;
            Option<int?> expiresIn = default;
            Option<DateTime?> expiresAt = default;
            Option<List<string>?> scopes = default;
            Option<string?> tokenId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "token_type":
                            string? tokenTypeRawValue = utf8JsonReader.GetString();
                            if (tokenTypeRawValue != null)
                                tokenType = new Option<ShortTokenResponse.TokenTypeEnum?>(ShortTokenResponse.TokenTypeEnumFromStringOrDefault(tokenTypeRawValue));
                            break;
                        case "access_token":
                            accessToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expires_in":
                            expiresIn = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "expires_at":
                            expiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "scopes":
                            scopes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "token_id":
                            tokenId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!tokenType.IsSet)
                throw new ArgumentException("Property is required for class ShortTokenResponse.", nameof(tokenType));

            if (!accessToken.IsSet)
                throw new ArgumentException("Property is required for class ShortTokenResponse.", nameof(accessToken));

            if (!expiresIn.IsSet)
                throw new ArgumentException("Property is required for class ShortTokenResponse.", nameof(expiresIn));

            if (!expiresAt.IsSet)
                throw new ArgumentException("Property is required for class ShortTokenResponse.", nameof(expiresAt));

            if (tokenType.IsSet && tokenType.Value == null)
                throw new ArgumentNullException(nameof(tokenType), "Property is not nullable for class ShortTokenResponse.");

            if (accessToken.IsSet && accessToken.Value == null)
                throw new ArgumentNullException(nameof(accessToken), "Property is not nullable for class ShortTokenResponse.");

            if (expiresIn.IsSet && expiresIn.Value == null)
                throw new ArgumentNullException(nameof(expiresIn), "Property is not nullable for class ShortTokenResponse.");

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class ShortTokenResponse.");

            if (scopes.IsSet && scopes.Value == null)
                throw new ArgumentNullException(nameof(scopes), "Property is not nullable for class ShortTokenResponse.");

            if (tokenId.IsSet && tokenId.Value == null)
                throw new ArgumentNullException(nameof(tokenId), "Property is not nullable for class ShortTokenResponse.");

            return new ShortTokenResponse(tokenType.Value!.Value!, accessToken.Value!, expiresIn.Value!.Value!, expiresAt.Value!.Value!, scopes, tokenId);
        }

        /// <summary>
        /// Serializes a <see cref="ShortTokenResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shortTokenResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ShortTokenResponse shortTokenResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, shortTokenResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ShortTokenResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="shortTokenResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ShortTokenResponse shortTokenResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (shortTokenResponse.AccessToken == null)
                throw new ArgumentNullException(nameof(shortTokenResponse.AccessToken), "Property is required for class ShortTokenResponse.");

            if (shortTokenResponse.ScopesOption.IsSet && shortTokenResponse.Scopes == null)
                throw new ArgumentNullException(nameof(shortTokenResponse.Scopes), "Property is required for class ShortTokenResponse.");

            if (shortTokenResponse.TokenIdOption.IsSet && shortTokenResponse.TokenId == null)
                throw new ArgumentNullException(nameof(shortTokenResponse.TokenId), "Property is required for class ShortTokenResponse.");

            var tokenTypeRawValue = ShortTokenResponse.TokenTypeEnumToJsonValue(shortTokenResponse.TokenType);
            writer.WriteString("token_type", tokenTypeRawValue);
            writer.WriteString("access_token", shortTokenResponse.AccessToken);

            writer.WriteNumber("expires_in", shortTokenResponse.ExpiresIn);

            writer.WriteString("expires_at", shortTokenResponse.ExpiresAt.ToString(ExpiresAtFormat));

            if (shortTokenResponse.ScopesOption.IsSet)
            {
                writer.WritePropertyName("scopes");
                JsonSerializer.Serialize(writer, shortTokenResponse.Scopes, jsonSerializerOptions);
            }
            if (shortTokenResponse.TokenIdOption.IsSet)
                writer.WriteString("token_id", shortTokenResponse.TokenId);
        }
    }
}
