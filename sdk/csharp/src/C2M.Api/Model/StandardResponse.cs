// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// StandardResponse
    /// </summary>
    public partial class StandardResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardResponse" /> class.
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="message">message</param>
        /// <param name="jobId">jobId</param>
        [JsonConstructor]
        public StandardResponse(Option<string?> status = default, Option<string?> message = default, Option<string?> jobId = default)
        {
            StatusOption = status;
            MessageOption = message;
            JobIdOption = jobId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of JobId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> JobIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [JsonPropertyName("jobId")]
        public string? JobId { get { return this.JobIdOption; } set { this.JobIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StandardResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StandardResponse" />
    /// </summary>
    public class StandardResponseJsonConverter : JsonConverter<StandardResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="StandardResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override StandardResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> status = default;
            Option<string?> message = default;
            Option<string?> jobId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "jobId":
                            jobId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class StandardResponse.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class StandardResponse.");

            if (jobId.IsSet && jobId.Value == null)
                throw new ArgumentNullException(nameof(jobId), "Property is not nullable for class StandardResponse.");

            return new StandardResponse(status, message, jobId);
        }

        /// <summary>
        /// Serializes a <see cref="StandardResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="standardResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, StandardResponse standardResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, standardResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="StandardResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="standardResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, StandardResponse standardResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (standardResponse.StatusOption.IsSet && standardResponse.Status == null)
                throw new ArgumentNullException(nameof(standardResponse.Status), "Property is required for class StandardResponse.");

            if (standardResponse.MessageOption.IsSet && standardResponse.Message == null)
                throw new ArgumentNullException(nameof(standardResponse.Message), "Property is required for class StandardResponse.");

            if (standardResponse.JobIdOption.IsSet && standardResponse.JobId == null)
                throw new ArgumentNullException(nameof(standardResponse.JobId), "Property is required for class StandardResponse.");

            if (standardResponse.StatusOption.IsSet)
                writer.WriteString("status", standardResponse.Status);

            if (standardResponse.MessageOption.IsSet)
                writer.WriteString("message", standardResponse.Message);

            if (standardResponse.JobIdOption.IsSet)
                writer.WriteString("jobId", standardResponse.JobId);
        }
    }
}
