// <auto-generated>
/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using C2M.Api.Client;

namespace C2M.Api.Model
{
    /// <summary>
    /// SubmitMultiDocParamsRequest
    /// </summary>
    public partial class SubmitMultiDocParamsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitMultiDocParamsRequest" /> class.
        /// </summary>
        /// <param name="items">items</param>
        /// <param name="jobOptions">jobOptions</param>
        /// <param name="paymentDetails">paymentDetails</param>
        /// <param name="tags">tags</param>
        [JsonConstructor]
        public SubmitMultiDocParamsRequest(List<SubmitMultiDocWithTemplateParamsRequestItemsInner> items, JobOptions jobOptions, Option<PaymentDetails?> paymentDetails = default, Option<List<string>?> tags = default)
        {
            Items = items;
            JobOptions = jobOptions;
            PaymentDetailsOption = paymentDetails;
            TagsOption = tags;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [JsonPropertyName("items")]
        public List<SubmitMultiDocWithTemplateParamsRequestItemsInner> Items { get; set; }

        /// <summary>
        /// Gets or Sets JobOptions
        /// </summary>
        [JsonPropertyName("jobOptions")]
        public JobOptions JobOptions { get; set; }

        /// <summary>
        /// Used to track the state of PaymentDetails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PaymentDetails?> PaymentDetailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PaymentDetails
        /// </summary>
        [JsonPropertyName("paymentDetails")]
        public PaymentDetails? PaymentDetails { get { return this.PaymentDetailsOption; } set { this.PaymentDetailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get { return this.TagsOption; } set { this.TagsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmitMultiDocParamsRequest {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  JobOptions: ").Append(JobOptions).Append("\n");
            sb.Append("  PaymentDetails: ").Append(PaymentDetails).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubmitMultiDocParamsRequest" />
    /// </summary>
    public class SubmitMultiDocParamsRequestJsonConverter : JsonConverter<SubmitMultiDocParamsRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SubmitMultiDocParamsRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SubmitMultiDocParamsRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<SubmitMultiDocWithTemplateParamsRequestItemsInner>?> items = default;
            Option<JobOptions?> jobOptions = default;
            Option<PaymentDetails?> paymentDetails = default;
            Option<List<string>?> tags = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "items":
                            items = new Option<List<SubmitMultiDocWithTemplateParamsRequestItemsInner>?>(JsonSerializer.Deserialize<List<SubmitMultiDocWithTemplateParamsRequestItemsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "jobOptions":
                            jobOptions = new Option<JobOptions?>(JsonSerializer.Deserialize<JobOptions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "paymentDetails":
                            paymentDetails = new Option<PaymentDetails?>(JsonSerializer.Deserialize<PaymentDetails>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tags":
                            tags = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!items.IsSet)
                throw new ArgumentException("Property is required for class SubmitMultiDocParamsRequest.", nameof(items));

            if (!jobOptions.IsSet)
                throw new ArgumentException("Property is required for class SubmitMultiDocParamsRequest.", nameof(jobOptions));

            if (items.IsSet && items.Value == null)
                throw new ArgumentNullException(nameof(items), "Property is not nullable for class SubmitMultiDocParamsRequest.");

            if (jobOptions.IsSet && jobOptions.Value == null)
                throw new ArgumentNullException(nameof(jobOptions), "Property is not nullable for class SubmitMultiDocParamsRequest.");

            if (paymentDetails.IsSet && paymentDetails.Value == null)
                throw new ArgumentNullException(nameof(paymentDetails), "Property is not nullable for class SubmitMultiDocParamsRequest.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class SubmitMultiDocParamsRequest.");

            return new SubmitMultiDocParamsRequest(items.Value!, jobOptions.Value!, paymentDetails, tags);
        }

        /// <summary>
        /// Serializes a <see cref="SubmitMultiDocParamsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="submitMultiDocParamsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SubmitMultiDocParamsRequest submitMultiDocParamsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, submitMultiDocParamsRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SubmitMultiDocParamsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="submitMultiDocParamsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SubmitMultiDocParamsRequest submitMultiDocParamsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (submitMultiDocParamsRequest.Items == null)
                throw new ArgumentNullException(nameof(submitMultiDocParamsRequest.Items), "Property is required for class SubmitMultiDocParamsRequest.");

            if (submitMultiDocParamsRequest.JobOptions == null)
                throw new ArgumentNullException(nameof(submitMultiDocParamsRequest.JobOptions), "Property is required for class SubmitMultiDocParamsRequest.");

            if (submitMultiDocParamsRequest.PaymentDetailsOption.IsSet && submitMultiDocParamsRequest.PaymentDetails == null)
                throw new ArgumentNullException(nameof(submitMultiDocParamsRequest.PaymentDetails), "Property is required for class SubmitMultiDocParamsRequest.");

            if (submitMultiDocParamsRequest.TagsOption.IsSet && submitMultiDocParamsRequest.Tags == null)
                throw new ArgumentNullException(nameof(submitMultiDocParamsRequest.Tags), "Property is required for class SubmitMultiDocParamsRequest.");

            writer.WritePropertyName("items");
            JsonSerializer.Serialize(writer, submitMultiDocParamsRequest.Items, jsonSerializerOptions);
            writer.WritePropertyName("jobOptions");
            JsonSerializer.Serialize(writer, submitMultiDocParamsRequest.JobOptions, jsonSerializerOptions);
            if (submitMultiDocParamsRequest.PaymentDetailsOption.IsSet)
            {
                writer.WritePropertyName("paymentDetails");
                JsonSerializer.Serialize(writer, submitMultiDocParamsRequest.PaymentDetails, jsonSerializerOptions);
            }
            if (submitMultiDocParamsRequest.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, submitMultiDocParamsRequest.Tags, jsonSerializerOptions);
            }
        }
    }
}
