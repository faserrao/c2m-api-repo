/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressRegion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressRegion{}

// AddressRegion struct for AddressRegion
type AddressRegion struct {
	X float32 `json:"x"`
	Y float32 `json:"y"`
	Width float32 `json:"width"`
	Height float32 `json:"height"`
	PageOffset int32 `json:"pageOffset"`
}

type _AddressRegion AddressRegion

// NewAddressRegion instantiates a new AddressRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressRegion(x float32, y float32, width float32, height float32, pageOffset int32) *AddressRegion {
	this := AddressRegion{}
	this.X = x
	this.Y = y
	this.Width = width
	this.Height = height
	this.PageOffset = pageOffset
	return &this
}

// NewAddressRegionWithDefaults instantiates a new AddressRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressRegionWithDefaults() *AddressRegion {
	this := AddressRegion{}
	return &this
}

// GetX returns the X field value
func (o *AddressRegion) GetX() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *AddressRegion) GetXOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *AddressRegion) SetX(v float32) {
	o.X = v
}

// GetY returns the Y field value
func (o *AddressRegion) GetY() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *AddressRegion) GetYOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *AddressRegion) SetY(v float32) {
	o.Y = v
}

// GetWidth returns the Width field value
func (o *AddressRegion) GetWidth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *AddressRegion) GetWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *AddressRegion) SetWidth(v float32) {
	o.Width = v
}

// GetHeight returns the Height field value
func (o *AddressRegion) GetHeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *AddressRegion) GetHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *AddressRegion) SetHeight(v float32) {
	o.Height = v
}

// GetPageOffset returns the PageOffset field value
func (o *AddressRegion) GetPageOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PageOffset
}

// GetPageOffsetOk returns a tuple with the PageOffset field value
// and a boolean to check if the value has been set.
func (o *AddressRegion) GetPageOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageOffset, true
}

// SetPageOffset sets field value
func (o *AddressRegion) SetPageOffset(v int32) {
	o.PageOffset = v
}

func (o AddressRegion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressRegion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	toSerialize["width"] = o.Width
	toSerialize["height"] = o.Height
	toSerialize["pageOffset"] = o.PageOffset
	return toSerialize, nil
}

func (o *AddressRegion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"x",
		"y",
		"width",
		"height",
		"pageOffset",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressRegion := _AddressRegion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressRegion)

	if err != nil {
		return err
	}

	*o = AddressRegion(varAddressRegion)

	return err
}

type NullableAddressRegion struct {
	value *AddressRegion
	isSet bool
}

func (v NullableAddressRegion) Get() *AddressRegion {
	return v.value
}

func (v *NullableAddressRegion) Set(val *AddressRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressRegion(val *AddressRegion) *NullableAddressRegion {
	return &NullableAddressRegion{value: val, isSet: true}
}

func (v NullableAddressRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


