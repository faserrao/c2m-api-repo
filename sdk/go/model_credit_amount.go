/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreditAmount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditAmount{}

// CreditAmount struct for CreditAmount
type CreditAmount struct {
	Amount float32 `json:"amount"`
	Currency Currency `json:"currency"`
}

type _CreditAmount CreditAmount

// NewCreditAmount instantiates a new CreditAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditAmount(amount float32, currency Currency) *CreditAmount {
	this := CreditAmount{}
	this.Amount = amount
	this.Currency = currency
	return &this
}

// NewCreditAmountWithDefaults instantiates a new CreditAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditAmountWithDefaults() *CreditAmount {
	this := CreditAmount{}
	return &this
}

// GetAmount returns the Amount field value
func (o *CreditAmount) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CreditAmount) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CreditAmount) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *CreditAmount) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *CreditAmount) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *CreditAmount) SetCurrency(v Currency) {
	o.Currency = v
}

func (o CreditAmount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditAmount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	return toSerialize, nil
}

func (o *CreditAmount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditAmount := _CreditAmount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreditAmount)

	if err != nil {
		return err
	}

	*o = CreditAmount(varCreditAmount)

	return err
}

type NullableCreditAmount struct {
	value *CreditAmount
	isSet bool
}

func (v NullableCreditAmount) Get() *CreditAmount {
	return v.value
}

func (v *NullableCreditAmount) Set(val *CreditAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditAmount(val *CreditAmount) *NullableCreditAmount {
	return &NullableCreditAmount{value: val, isSet: true}
}

func (v NullableCreditAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


