/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreditCardPayment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditCardPayment{}

// CreditCardPayment struct for CreditCardPayment
type CreditCardPayment struct {
	CreditCardDetails CreditCardDetails `json:"creditCardDetails"`
}

type _CreditCardPayment CreditCardPayment

// NewCreditCardPayment instantiates a new CreditCardPayment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditCardPayment(creditCardDetails CreditCardDetails) *CreditCardPayment {
	this := CreditCardPayment{}
	this.CreditCardDetails = creditCardDetails
	return &this
}

// NewCreditCardPaymentWithDefaults instantiates a new CreditCardPayment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditCardPaymentWithDefaults() *CreditCardPayment {
	this := CreditCardPayment{}
	return &this
}

// GetCreditCardDetails returns the CreditCardDetails field value
func (o *CreditCardPayment) GetCreditCardDetails() CreditCardDetails {
	if o == nil {
		var ret CreditCardDetails
		return ret
	}

	return o.CreditCardDetails
}

// GetCreditCardDetailsOk returns a tuple with the CreditCardDetails field value
// and a boolean to check if the value has been set.
func (o *CreditCardPayment) GetCreditCardDetailsOk() (*CreditCardDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditCardDetails, true
}

// SetCreditCardDetails sets field value
func (o *CreditCardPayment) SetCreditCardDetails(v CreditCardDetails) {
	o.CreditCardDetails = v
}

func (o CreditCardPayment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditCardPayment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["creditCardDetails"] = o.CreditCardDetails
	return toSerialize, nil
}

func (o *CreditCardPayment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"creditCardDetails",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditCardPayment := _CreditCardPayment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreditCardPayment)

	if err != nil {
		return err
	}

	*o = CreditCardPayment(varCreditCardPayment)

	return err
}

type NullableCreditCardPayment struct {
	value *CreditCardPayment
	isSet bool
}

func (v NullableCreditCardPayment) Get() *CreditCardPayment {
	return v.value
}

func (v *NullableCreditCardPayment) Set(val *CreditCardPayment) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditCardPayment) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditCardPayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditCardPayment(val *CreditCardPayment) *NullableCreditCardPayment {
	return &NullableCreditCardPayment{value: val, isSet: true}
}

func (v NullableCreditCardPayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditCardPayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


