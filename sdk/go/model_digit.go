/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"fmt"
)

// Digit the model 'Digit'
type Digit string

// List of digit
const (
	_0 Digit = "0"
	_1 Digit = "1"
	_2 Digit = "2"
	_3 Digit = "3"
	_4 Digit = "4"
	_5 Digit = "5"
	_6 Digit = "6"
	_7 Digit = "7"
	_8 Digit = "8"
	_9 Digit = "9"
)

// All allowed values of Digit enum
var AllowedDigitEnumValues = []Digit{
	"0",
	"1",
	"2",
	"3",
	"4",
	"5",
	"6",
	"7",
	"8",
	"9",
}

func (v *Digit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Digit(value)
	for _, existing := range AllowedDigitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Digit", value)
}

// NewDigitFromValue returns a pointer to a valid Digit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDigitFromValue(v string) (*Digit, error) {
	ev := Digit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Digit: valid values are %v", v, AllowedDigitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Digit) IsValid() bool {
	for _, existing := range AllowedDigitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to digit value
func (v Digit) Ptr() *Digit {
	return &v
}

type NullableDigit struct {
	value *Digit
	isSet bool
}

func (v NullableDigit) Get() *Digit {
	return v.value
}

func (v *NullableDigit) Set(val *Digit) {
	v.value = val
	v.isSet = true
}

func (v NullableDigit) IsSet() bool {
	return v.isSet
}

func (v *NullableDigit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigit(val *Digit) *NullableDigit {
	return &NullableDigit{value: val, isSet: true}
}

func (v NullableDigit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

