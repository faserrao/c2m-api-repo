/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"fmt"
)

// DocumentClass the model 'DocumentClass'
type DocumentClass string

// List of documentClass
const (
	BUSINESS_LETTER DocumentClass = "businessLetter"
	PERSONAL_LETTER DocumentClass = "personalLetter"
)

// All allowed values of DocumentClass enum
var AllowedDocumentClassEnumValues = []DocumentClass{
	"businessLetter",
	"personalLetter",
}

func (v *DocumentClass) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DocumentClass(value)
	for _, existing := range AllowedDocumentClassEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DocumentClass", value)
}

// NewDocumentClassFromValue returns a pointer to a valid DocumentClass
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDocumentClassFromValue(v string) (*DocumentClass, error) {
	ev := DocumentClass(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DocumentClass: valid values are %v", v, AllowedDocumentClassEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DocumentClass) IsValid() bool {
	for _, existing := range AllowedDocumentClassEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to documentClass value
func (v DocumentClass) Ptr() *DocumentClass {
	return &v
}

type NullableDocumentClass struct {
	value *DocumentClass
	isSet bool
}

func (v NullableDocumentClass) Get() *DocumentClass {
	return v.value
}

func (v *NullableDocumentClass) Set(val *DocumentClass) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentClass) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentClass(val *DocumentClass) *NullableDocumentClass {
	return &NullableDocumentClass{value: val, isSet: true}
}

func (v NullableDocumentClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

