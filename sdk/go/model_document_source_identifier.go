/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DocumentSourceIdentifier - struct for DocumentSourceIdentifier
type DocumentSourceIdentifier struct {
	DocumentSourceIdentifierOneOf *DocumentSourceIdentifierOneOf
	DocumentSourceIdentifierOneOf1 *DocumentSourceIdentifierOneOf1
	DocumentSourceIdentifierOneOf2 *DocumentSourceIdentifierOneOf2
	Int32 *int32
	String *string
}

// DocumentSourceIdentifierOneOfAsDocumentSourceIdentifier is a convenience function that returns DocumentSourceIdentifierOneOf wrapped in DocumentSourceIdentifier
func DocumentSourceIdentifierOneOfAsDocumentSourceIdentifier(v *DocumentSourceIdentifierOneOf) DocumentSourceIdentifier {
	return DocumentSourceIdentifier{
		DocumentSourceIdentifierOneOf: v,
	}
}

// DocumentSourceIdentifierOneOf1AsDocumentSourceIdentifier is a convenience function that returns DocumentSourceIdentifierOneOf1 wrapped in DocumentSourceIdentifier
func DocumentSourceIdentifierOneOf1AsDocumentSourceIdentifier(v *DocumentSourceIdentifierOneOf1) DocumentSourceIdentifier {
	return DocumentSourceIdentifier{
		DocumentSourceIdentifierOneOf1: v,
	}
}

// DocumentSourceIdentifierOneOf2AsDocumentSourceIdentifier is a convenience function that returns DocumentSourceIdentifierOneOf2 wrapped in DocumentSourceIdentifier
func DocumentSourceIdentifierOneOf2AsDocumentSourceIdentifier(v *DocumentSourceIdentifierOneOf2) DocumentSourceIdentifier {
	return DocumentSourceIdentifier{
		DocumentSourceIdentifierOneOf2: v,
	}
}

// int32AsDocumentSourceIdentifier is a convenience function that returns int32 wrapped in DocumentSourceIdentifier
func Int32AsDocumentSourceIdentifier(v *int32) DocumentSourceIdentifier {
	return DocumentSourceIdentifier{
		Int32: v,
	}
}

// stringAsDocumentSourceIdentifier is a convenience function that returns string wrapped in DocumentSourceIdentifier
func StringAsDocumentSourceIdentifier(v *string) DocumentSourceIdentifier {
	return DocumentSourceIdentifier{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DocumentSourceIdentifier) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DocumentSourceIdentifierOneOf
	err = newStrictDecoder(data).Decode(&dst.DocumentSourceIdentifierOneOf)
	if err == nil {
		jsonDocumentSourceIdentifierOneOf, _ := json.Marshal(dst.DocumentSourceIdentifierOneOf)
		if string(jsonDocumentSourceIdentifierOneOf) == "{}" { // empty struct
			dst.DocumentSourceIdentifierOneOf = nil
		} else {
			if err = validator.Validate(dst.DocumentSourceIdentifierOneOf); err != nil {
				dst.DocumentSourceIdentifierOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.DocumentSourceIdentifierOneOf = nil
	}

	// try to unmarshal data into DocumentSourceIdentifierOneOf1
	err = newStrictDecoder(data).Decode(&dst.DocumentSourceIdentifierOneOf1)
	if err == nil {
		jsonDocumentSourceIdentifierOneOf1, _ := json.Marshal(dst.DocumentSourceIdentifierOneOf1)
		if string(jsonDocumentSourceIdentifierOneOf1) == "{}" { // empty struct
			dst.DocumentSourceIdentifierOneOf1 = nil
		} else {
			if err = validator.Validate(dst.DocumentSourceIdentifierOneOf1); err != nil {
				dst.DocumentSourceIdentifierOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DocumentSourceIdentifierOneOf1 = nil
	}

	// try to unmarshal data into DocumentSourceIdentifierOneOf2
	err = newStrictDecoder(data).Decode(&dst.DocumentSourceIdentifierOneOf2)
	if err == nil {
		jsonDocumentSourceIdentifierOneOf2, _ := json.Marshal(dst.DocumentSourceIdentifierOneOf2)
		if string(jsonDocumentSourceIdentifierOneOf2) == "{}" { // empty struct
			dst.DocumentSourceIdentifierOneOf2 = nil
		} else {
			if err = validator.Validate(dst.DocumentSourceIdentifierOneOf2); err != nil {
				dst.DocumentSourceIdentifierOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DocumentSourceIdentifierOneOf2 = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DocumentSourceIdentifierOneOf = nil
		dst.DocumentSourceIdentifierOneOf1 = nil
		dst.DocumentSourceIdentifierOneOf2 = nil
		dst.Int32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DocumentSourceIdentifier)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DocumentSourceIdentifier)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DocumentSourceIdentifier) MarshalJSON() ([]byte, error) {
	if src.DocumentSourceIdentifierOneOf != nil {
		return json.Marshal(&src.DocumentSourceIdentifierOneOf)
	}

	if src.DocumentSourceIdentifierOneOf1 != nil {
		return json.Marshal(&src.DocumentSourceIdentifierOneOf1)
	}

	if src.DocumentSourceIdentifierOneOf2 != nil {
		return json.Marshal(&src.DocumentSourceIdentifierOneOf2)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DocumentSourceIdentifier) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DocumentSourceIdentifierOneOf != nil {
		return obj.DocumentSourceIdentifierOneOf
	}

	if obj.DocumentSourceIdentifierOneOf1 != nil {
		return obj.DocumentSourceIdentifierOneOf1
	}

	if obj.DocumentSourceIdentifierOneOf2 != nil {
		return obj.DocumentSourceIdentifierOneOf2
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DocumentSourceIdentifier) GetActualInstanceValue() (interface{}) {
	if obj.DocumentSourceIdentifierOneOf != nil {
		return *obj.DocumentSourceIdentifierOneOf
	}

	if obj.DocumentSourceIdentifierOneOf1 != nil {
		return *obj.DocumentSourceIdentifierOneOf1
	}

	if obj.DocumentSourceIdentifierOneOf2 != nil {
		return *obj.DocumentSourceIdentifierOneOf2
	}

	if obj.Int32 != nil {
		return *obj.Int32
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableDocumentSourceIdentifier struct {
	value *DocumentSourceIdentifier
	isSet bool
}

func (v NullableDocumentSourceIdentifier) Get() *DocumentSourceIdentifier {
	return v.value
}

func (v *NullableDocumentSourceIdentifier) Set(val *DocumentSourceIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentSourceIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentSourceIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentSourceIdentifier(val *DocumentSourceIdentifier) *NullableDocumentSourceIdentifier {
	return &NullableDocumentSourceIdentifier{value: val, isSet: true}
}

func (v NullableDocumentSourceIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentSourceIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


