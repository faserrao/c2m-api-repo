/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DocumentSourceIdentifierOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentSourceIdentifierOneOf{}

// DocumentSourceIdentifierOneOf struct for DocumentSourceIdentifierOneOf
type DocumentSourceIdentifierOneOf struct {
	UploadRequestId int32 `json:"uploadRequestId"`
	DocumentName string `json:"documentName"`
}

type _DocumentSourceIdentifierOneOf DocumentSourceIdentifierOneOf

// NewDocumentSourceIdentifierOneOf instantiates a new DocumentSourceIdentifierOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentSourceIdentifierOneOf(uploadRequestId int32, documentName string) *DocumentSourceIdentifierOneOf {
	this := DocumentSourceIdentifierOneOf{}
	this.UploadRequestId = uploadRequestId
	this.DocumentName = documentName
	return &this
}

// NewDocumentSourceIdentifierOneOfWithDefaults instantiates a new DocumentSourceIdentifierOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentSourceIdentifierOneOfWithDefaults() *DocumentSourceIdentifierOneOf {
	this := DocumentSourceIdentifierOneOf{}
	return &this
}

// GetUploadRequestId returns the UploadRequestId field value
func (o *DocumentSourceIdentifierOneOf) GetUploadRequestId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UploadRequestId
}

// GetUploadRequestIdOk returns a tuple with the UploadRequestId field value
// and a boolean to check if the value has been set.
func (o *DocumentSourceIdentifierOneOf) GetUploadRequestIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadRequestId, true
}

// SetUploadRequestId sets field value
func (o *DocumentSourceIdentifierOneOf) SetUploadRequestId(v int32) {
	o.UploadRequestId = v
}

// GetDocumentName returns the DocumentName field value
func (o *DocumentSourceIdentifierOneOf) GetDocumentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentName
}

// GetDocumentNameOk returns a tuple with the DocumentName field value
// and a boolean to check if the value has been set.
func (o *DocumentSourceIdentifierOneOf) GetDocumentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentName, true
}

// SetDocumentName sets field value
func (o *DocumentSourceIdentifierOneOf) SetDocumentName(v string) {
	o.DocumentName = v
}

func (o DocumentSourceIdentifierOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentSourceIdentifierOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uploadRequestId"] = o.UploadRequestId
	toSerialize["documentName"] = o.DocumentName
	return toSerialize, nil
}

func (o *DocumentSourceIdentifierOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uploadRequestId",
		"documentName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentSourceIdentifierOneOf := _DocumentSourceIdentifierOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentSourceIdentifierOneOf)

	if err != nil {
		return err
	}

	*o = DocumentSourceIdentifierOneOf(varDocumentSourceIdentifierOneOf)

	return err
}

type NullableDocumentSourceIdentifierOneOf struct {
	value *DocumentSourceIdentifierOneOf
	isSet bool
}

func (v NullableDocumentSourceIdentifierOneOf) Get() *DocumentSourceIdentifierOneOf {
	return v.value
}

func (v *NullableDocumentSourceIdentifierOneOf) Set(val *DocumentSourceIdentifierOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentSourceIdentifierOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentSourceIdentifierOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentSourceIdentifierOneOf(val *DocumentSourceIdentifierOneOf) *NullableDocumentSourceIdentifierOneOf {
	return &NullableDocumentSourceIdentifierOneOf{value: val, isSet: true}
}

func (v NullableDocumentSourceIdentifierOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentSourceIdentifierOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


