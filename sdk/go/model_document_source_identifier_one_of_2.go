/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DocumentSourceIdentifierOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentSourceIdentifierOneOf2{}

// DocumentSourceIdentifierOneOf2 struct for DocumentSourceIdentifierOneOf2
type DocumentSourceIdentifierOneOf2 struct {
	ZipId int32 `json:"zipId"`
	DocumentName string `json:"documentName"`
}

type _DocumentSourceIdentifierOneOf2 DocumentSourceIdentifierOneOf2

// NewDocumentSourceIdentifierOneOf2 instantiates a new DocumentSourceIdentifierOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentSourceIdentifierOneOf2(zipId int32, documentName string) *DocumentSourceIdentifierOneOf2 {
	this := DocumentSourceIdentifierOneOf2{}
	this.ZipId = zipId
	this.DocumentName = documentName
	return &this
}

// NewDocumentSourceIdentifierOneOf2WithDefaults instantiates a new DocumentSourceIdentifierOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentSourceIdentifierOneOf2WithDefaults() *DocumentSourceIdentifierOneOf2 {
	this := DocumentSourceIdentifierOneOf2{}
	return &this
}

// GetZipId returns the ZipId field value
func (o *DocumentSourceIdentifierOneOf2) GetZipId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ZipId
}

// GetZipIdOk returns a tuple with the ZipId field value
// and a boolean to check if the value has been set.
func (o *DocumentSourceIdentifierOneOf2) GetZipIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZipId, true
}

// SetZipId sets field value
func (o *DocumentSourceIdentifierOneOf2) SetZipId(v int32) {
	o.ZipId = v
}

// GetDocumentName returns the DocumentName field value
func (o *DocumentSourceIdentifierOneOf2) GetDocumentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentName
}

// GetDocumentNameOk returns a tuple with the DocumentName field value
// and a boolean to check if the value has been set.
func (o *DocumentSourceIdentifierOneOf2) GetDocumentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentName, true
}

// SetDocumentName sets field value
func (o *DocumentSourceIdentifierOneOf2) SetDocumentName(v string) {
	o.DocumentName = v
}

func (o DocumentSourceIdentifierOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentSourceIdentifierOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["zipId"] = o.ZipId
	toSerialize["documentName"] = o.DocumentName
	return toSerialize, nil
}

func (o *DocumentSourceIdentifierOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"zipId",
		"documentName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentSourceIdentifierOneOf2 := _DocumentSourceIdentifierOneOf2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentSourceIdentifierOneOf2)

	if err != nil {
		return err
	}

	*o = DocumentSourceIdentifierOneOf2(varDocumentSourceIdentifierOneOf2)

	return err
}

type NullableDocumentSourceIdentifierOneOf2 struct {
	value *DocumentSourceIdentifierOneOf2
	isSet bool
}

func (v NullableDocumentSourceIdentifierOneOf2) Get() *DocumentSourceIdentifierOneOf2 {
	return v.value
}

func (v *NullableDocumentSourceIdentifierOneOf2) Set(val *DocumentSourceIdentifierOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentSourceIdentifierOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentSourceIdentifierOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentSourceIdentifierOneOf2(val *DocumentSourceIdentifierOneOf2) *NullableDocumentSourceIdentifierOneOf2 {
	return &NullableDocumentSourceIdentifierOneOf2{value: val, isSet: true}
}

func (v NullableDocumentSourceIdentifierOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentSourceIdentifierOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


