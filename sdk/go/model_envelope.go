/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"fmt"
)

// Envelope the model 'Envelope'
type Envelope string

// List of envelope
const (
	FLAT Envelope = "flat"
	WINDOWED_FLAT Envelope = "windowedFlat"
	LETTER Envelope = "letter"
	LEGAL Envelope = "legal"
	POSTCARD Envelope = "postcard"
)

// All allowed values of Envelope enum
var AllowedEnvelopeEnumValues = []Envelope{
	"flat",
	"windowedFlat",
	"letter",
	"legal",
	"postcard",
}

func (v *Envelope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Envelope(value)
	for _, existing := range AllowedEnvelopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Envelope", value)
}

// NewEnvelopeFromValue returns a pointer to a valid Envelope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnvelopeFromValue(v string) (*Envelope, error) {
	ev := Envelope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Envelope: valid values are %v", v, AllowedEnvelopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Envelope) IsValid() bool {
	for _, existing := range AllowedEnvelopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to envelope value
func (v Envelope) Ptr() *Envelope {
	return &v
}

type NullableEnvelope struct {
	value *Envelope
	isSet bool
}

func (v NullableEnvelope) Get() *Envelope {
	return v.value
}

func (v *NullableEnvelope) Set(val *Envelope) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvelope) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvelope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvelope(val *Envelope) *NullableEnvelope {
	return &NullableEnvelope{value: val, isSet: true}
}

func (v NullableEnvelope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvelope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

