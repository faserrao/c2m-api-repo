/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExpirationDate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpirationDate{}

// ExpirationDate struct for ExpirationDate
type ExpirationDate struct {
	Month int32 `json:"month"`
	Year int32 `json:"year"`
}

type _ExpirationDate ExpirationDate

// NewExpirationDate instantiates a new ExpirationDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpirationDate(month int32, year int32) *ExpirationDate {
	this := ExpirationDate{}
	this.Month = month
	this.Year = year
	return &this
}

// NewExpirationDateWithDefaults instantiates a new ExpirationDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpirationDateWithDefaults() *ExpirationDate {
	this := ExpirationDate{}
	return &this
}

// GetMonth returns the Month field value
func (o *ExpirationDate) GetMonth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *ExpirationDate) GetMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *ExpirationDate) SetMonth(v int32) {
	o.Month = v
}

// GetYear returns the Year field value
func (o *ExpirationDate) GetYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *ExpirationDate) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *ExpirationDate) SetYear(v int32) {
	o.Year = v
}

func (o ExpirationDate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpirationDate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["month"] = o.Month
	toSerialize["year"] = o.Year
	return toSerialize, nil
}

func (o *ExpirationDate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"month",
		"year",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExpirationDate := _ExpirationDate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExpirationDate)

	if err != nil {
		return err
	}

	*o = ExpirationDate(varExpirationDate)

	return err
}

type NullableExpirationDate struct {
	value *ExpirationDate
	isSet bool
}

func (v NullableExpirationDate) Get() *ExpirationDate {
	return v.value
}

func (v *NullableExpirationDate) Set(val *ExpirationDate) {
	v.value = val
	v.isSet = true
}

func (v NullableExpirationDate) IsSet() bool {
	return v.isSet
}

func (v *NullableExpirationDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpirationDate(val *ExpirationDate) *NullableExpirationDate {
	return &NullableExpirationDate{value: val, isSet: true}
}

func (v NullableExpirationDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpirationDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


