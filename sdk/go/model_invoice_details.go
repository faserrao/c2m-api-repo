/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InvoiceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoiceDetails{}

// InvoiceDetails struct for InvoiceDetails
type InvoiceDetails struct {
	InvoiceNumber string `json:"invoiceNumber"`
	AmountDue float32 `json:"amountDue"`
}

type _InvoiceDetails InvoiceDetails

// NewInvoiceDetails instantiates a new InvoiceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceDetails(invoiceNumber string, amountDue float32) *InvoiceDetails {
	this := InvoiceDetails{}
	this.InvoiceNumber = invoiceNumber
	this.AmountDue = amountDue
	return &this
}

// NewInvoiceDetailsWithDefaults instantiates a new InvoiceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceDetailsWithDefaults() *InvoiceDetails {
	this := InvoiceDetails{}
	return &this
}

// GetInvoiceNumber returns the InvoiceNumber field value
func (o *InvoiceDetails) GetInvoiceNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvoiceNumber
}

// GetInvoiceNumberOk returns a tuple with the InvoiceNumber field value
// and a boolean to check if the value has been set.
func (o *InvoiceDetails) GetInvoiceNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoiceNumber, true
}

// SetInvoiceNumber sets field value
func (o *InvoiceDetails) SetInvoiceNumber(v string) {
	o.InvoiceNumber = v
}

// GetAmountDue returns the AmountDue field value
func (o *InvoiceDetails) GetAmountDue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AmountDue
}

// GetAmountDueOk returns a tuple with the AmountDue field value
// and a boolean to check if the value has been set.
func (o *InvoiceDetails) GetAmountDueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountDue, true
}

// SetAmountDue sets field value
func (o *InvoiceDetails) SetAmountDue(v float32) {
	o.AmountDue = v
}

func (o InvoiceDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoiceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["invoiceNumber"] = o.InvoiceNumber
	toSerialize["amountDue"] = o.AmountDue
	return toSerialize, nil
}

func (o *InvoiceDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"invoiceNumber",
		"amountDue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvoiceDetails := _InvoiceDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInvoiceDetails)

	if err != nil {
		return err
	}

	*o = InvoiceDetails(varInvoiceDetails)

	return err
}

type NullableInvoiceDetails struct {
	value *InvoiceDetails
	isSet bool
}

func (v NullableInvoiceDetails) Get() *InvoiceDetails {
	return v.value
}

func (v *NullableInvoiceDetails) Set(val *InvoiceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceDetails(val *InvoiceDetails) *NullableInvoiceDetails {
	return &NullableInvoiceDetails{value: val, isSet: true}
}

func (v NullableInvoiceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


