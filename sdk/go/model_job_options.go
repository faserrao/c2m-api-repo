/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JobOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobOptions{}

// JobOptions struct for JobOptions
type JobOptions struct {
	DocumentClass DocumentClass `json:"documentClass"`
	Layout Layout `json:"layout"`
	Mailclass Mailclass `json:"mailclass"`
	PaperType PaperType `json:"paperType"`
	PrintOption PrintOption `json:"printOption"`
	Envelope Envelope `json:"envelope"`
}

type _JobOptions JobOptions

// NewJobOptions instantiates a new JobOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobOptions(documentClass DocumentClass, layout Layout, mailclass Mailclass, paperType PaperType, printOption PrintOption, envelope Envelope) *JobOptions {
	this := JobOptions{}
	this.DocumentClass = documentClass
	this.Layout = layout
	this.Mailclass = mailclass
	this.PaperType = paperType
	this.PrintOption = printOption
	this.Envelope = envelope
	return &this
}

// NewJobOptionsWithDefaults instantiates a new JobOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobOptionsWithDefaults() *JobOptions {
	this := JobOptions{}
	return &this
}

// GetDocumentClass returns the DocumentClass field value
func (o *JobOptions) GetDocumentClass() DocumentClass {
	if o == nil {
		var ret DocumentClass
		return ret
	}

	return o.DocumentClass
}

// GetDocumentClassOk returns a tuple with the DocumentClass field value
// and a boolean to check if the value has been set.
func (o *JobOptions) GetDocumentClassOk() (*DocumentClass, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentClass, true
}

// SetDocumentClass sets field value
func (o *JobOptions) SetDocumentClass(v DocumentClass) {
	o.DocumentClass = v
}

// GetLayout returns the Layout field value
func (o *JobOptions) GetLayout() Layout {
	if o == nil {
		var ret Layout
		return ret
	}

	return o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value
// and a boolean to check if the value has been set.
func (o *JobOptions) GetLayoutOk() (*Layout, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Layout, true
}

// SetLayout sets field value
func (o *JobOptions) SetLayout(v Layout) {
	o.Layout = v
}

// GetMailclass returns the Mailclass field value
func (o *JobOptions) GetMailclass() Mailclass {
	if o == nil {
		var ret Mailclass
		return ret
	}

	return o.Mailclass
}

// GetMailclassOk returns a tuple with the Mailclass field value
// and a boolean to check if the value has been set.
func (o *JobOptions) GetMailclassOk() (*Mailclass, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mailclass, true
}

// SetMailclass sets field value
func (o *JobOptions) SetMailclass(v Mailclass) {
	o.Mailclass = v
}

// GetPaperType returns the PaperType field value
func (o *JobOptions) GetPaperType() PaperType {
	if o == nil {
		var ret PaperType
		return ret
	}

	return o.PaperType
}

// GetPaperTypeOk returns a tuple with the PaperType field value
// and a boolean to check if the value has been set.
func (o *JobOptions) GetPaperTypeOk() (*PaperType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaperType, true
}

// SetPaperType sets field value
func (o *JobOptions) SetPaperType(v PaperType) {
	o.PaperType = v
}

// GetPrintOption returns the PrintOption field value
func (o *JobOptions) GetPrintOption() PrintOption {
	if o == nil {
		var ret PrintOption
		return ret
	}

	return o.PrintOption
}

// GetPrintOptionOk returns a tuple with the PrintOption field value
// and a boolean to check if the value has been set.
func (o *JobOptions) GetPrintOptionOk() (*PrintOption, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrintOption, true
}

// SetPrintOption sets field value
func (o *JobOptions) SetPrintOption(v PrintOption) {
	o.PrintOption = v
}

// GetEnvelope returns the Envelope field value
func (o *JobOptions) GetEnvelope() Envelope {
	if o == nil {
		var ret Envelope
		return ret
	}

	return o.Envelope
}

// GetEnvelopeOk returns a tuple with the Envelope field value
// and a boolean to check if the value has been set.
func (o *JobOptions) GetEnvelopeOk() (*Envelope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Envelope, true
}

// SetEnvelope sets field value
func (o *JobOptions) SetEnvelope(v Envelope) {
	o.Envelope = v
}

func (o JobOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["documentClass"] = o.DocumentClass
	toSerialize["layout"] = o.Layout
	toSerialize["mailclass"] = o.Mailclass
	toSerialize["paperType"] = o.PaperType
	toSerialize["printOption"] = o.PrintOption
	toSerialize["envelope"] = o.Envelope
	return toSerialize, nil
}

func (o *JobOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"documentClass",
		"layout",
		"mailclass",
		"paperType",
		"printOption",
		"envelope",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobOptions := _JobOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobOptions)

	if err != nil {
		return err
	}

	*o = JobOptions(varJobOptions)

	return err
}

type NullableJobOptions struct {
	value *JobOptions
	isSet bool
}

func (v NullableJobOptions) Get() *JobOptions {
	return v.value
}

func (v *NullableJobOptions) Set(val *JobOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableJobOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableJobOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobOptions(val *JobOptions) *NullableJobOptions {
	return &NullableJobOptions{value: val, isSet: true}
}

func (v NullableJobOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


