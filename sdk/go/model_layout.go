/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"fmt"
)

// Layout the model 'Layout'
type Layout string

// List of layout
const (
	PORTRAIT Layout = "portrait"
	LANDSCAPE Layout = "landscape"
)

// All allowed values of Layout enum
var AllowedLayoutEnumValues = []Layout{
	"portrait",
	"landscape",
}

func (v *Layout) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Layout(value)
	for _, existing := range AllowedLayoutEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Layout", value)
}

// NewLayoutFromValue returns a pointer to a valid Layout
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLayoutFromValue(v string) (*Layout, error) {
	ev := Layout(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Layout: valid values are %v", v, AllowedLayoutEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Layout) IsValid() bool {
	for _, existing := range AllowedLayoutEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to layout value
func (v Layout) Ptr() *Layout {
	return &v
}

type NullableLayout struct {
	value *Layout
	isSet bool
}

func (v NullableLayout) Get() *Layout {
	return v.value
}

func (v *NullableLayout) Set(val *Layout) {
	v.value = val
	v.isSet = true
}

func (v NullableLayout) IsSet() bool {
	return v.isSet
}

func (v *NullableLayout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLayout(val *Layout) *NullableLayout {
	return &NullableLayout{value: val, isSet: true}
}

func (v NullableLayout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLayout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

