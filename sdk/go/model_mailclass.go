/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"fmt"
)

// Mailclass the model 'Mailclass'
type Mailclass string

// List of mailclass
const (
	FIRST_CLASS_MAIL Mailclass = "firstClassMail"
	PRIORITY_MAIL Mailclass = "priorityMail"
	LARGE_ENVELOPE Mailclass = "largeEnvelope"
)

// All allowed values of Mailclass enum
var AllowedMailclassEnumValues = []Mailclass{
	"firstClassMail",
	"priorityMail",
	"largeEnvelope",
}

func (v *Mailclass) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Mailclass(value)
	for _, existing := range AllowedMailclassEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Mailclass", value)
}

// NewMailclassFromValue returns a pointer to a valid Mailclass
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMailclassFromValue(v string) (*Mailclass, error) {
	ev := Mailclass(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Mailclass: valid values are %v", v, AllowedMailclassEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Mailclass) IsValid() bool {
	for _, existing := range AllowedMailclassEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to mailclass value
func (v Mailclass) Ptr() *Mailclass {
	return &v
}

type NullableMailclass struct {
	value *Mailclass
	isSet bool
}

func (v NullableMailclass) Get() *Mailclass {
	return v.value
}

func (v *NullableMailclass) Set(val *Mailclass) {
	v.value = val
	v.isSet = true
}

func (v NullableMailclass) IsSet() bool {
	return v.isSet
}

func (v *NullableMailclass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailclass(val *Mailclass) *NullableMailclass {
	return &NullableMailclass{value: val, isSet: true}
}

func (v NullableMailclass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailclass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

