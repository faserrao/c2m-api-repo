/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MergeMultiDocWithTemplateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MergeMultiDocWithTemplateParams{}

// MergeMultiDocWithTemplateParams struct for MergeMultiDocWithTemplateParams
type MergeMultiDocWithTemplateParams struct {
	DocumentsToMerge []DocumentSourceIdentifier `json:"documentsToMerge"`
	RecipientAddressSource RecipientAddressSource `json:"recipientAddressSource"`
	JobTemplate string `json:"jobTemplate"`
	PaymentDetails *PaymentDetails `json:"paymentDetails,omitempty"`
	Tags []string `json:"tags,omitempty"`
}

type _MergeMultiDocWithTemplateParams MergeMultiDocWithTemplateParams

// NewMergeMultiDocWithTemplateParams instantiates a new MergeMultiDocWithTemplateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeMultiDocWithTemplateParams(documentsToMerge []DocumentSourceIdentifier, recipientAddressSource RecipientAddressSource, jobTemplate string) *MergeMultiDocWithTemplateParams {
	this := MergeMultiDocWithTemplateParams{}
	this.DocumentsToMerge = documentsToMerge
	this.RecipientAddressSource = recipientAddressSource
	this.JobTemplate = jobTemplate
	return &this
}

// NewMergeMultiDocWithTemplateParamsWithDefaults instantiates a new MergeMultiDocWithTemplateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeMultiDocWithTemplateParamsWithDefaults() *MergeMultiDocWithTemplateParams {
	this := MergeMultiDocWithTemplateParams{}
	return &this
}

// GetDocumentsToMerge returns the DocumentsToMerge field value
func (o *MergeMultiDocWithTemplateParams) GetDocumentsToMerge() []DocumentSourceIdentifier {
	if o == nil {
		var ret []DocumentSourceIdentifier
		return ret
	}

	return o.DocumentsToMerge
}

// GetDocumentsToMergeOk returns a tuple with the DocumentsToMerge field value
// and a boolean to check if the value has been set.
func (o *MergeMultiDocWithTemplateParams) GetDocumentsToMergeOk() ([]DocumentSourceIdentifier, bool) {
	if o == nil {
		return nil, false
	}
	return o.DocumentsToMerge, true
}

// SetDocumentsToMerge sets field value
func (o *MergeMultiDocWithTemplateParams) SetDocumentsToMerge(v []DocumentSourceIdentifier) {
	o.DocumentsToMerge = v
}

// GetRecipientAddressSource returns the RecipientAddressSource field value
func (o *MergeMultiDocWithTemplateParams) GetRecipientAddressSource() RecipientAddressSource {
	if o == nil {
		var ret RecipientAddressSource
		return ret
	}

	return o.RecipientAddressSource
}

// GetRecipientAddressSourceOk returns a tuple with the RecipientAddressSource field value
// and a boolean to check if the value has been set.
func (o *MergeMultiDocWithTemplateParams) GetRecipientAddressSourceOk() (*RecipientAddressSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecipientAddressSource, true
}

// SetRecipientAddressSource sets field value
func (o *MergeMultiDocWithTemplateParams) SetRecipientAddressSource(v RecipientAddressSource) {
	o.RecipientAddressSource = v
}

// GetJobTemplate returns the JobTemplate field value
func (o *MergeMultiDocWithTemplateParams) GetJobTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobTemplate
}

// GetJobTemplateOk returns a tuple with the JobTemplate field value
// and a boolean to check if the value has been set.
func (o *MergeMultiDocWithTemplateParams) GetJobTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobTemplate, true
}

// SetJobTemplate sets field value
func (o *MergeMultiDocWithTemplateParams) SetJobTemplate(v string) {
	o.JobTemplate = v
}

// GetPaymentDetails returns the PaymentDetails field value if set, zero value otherwise.
func (o *MergeMultiDocWithTemplateParams) GetPaymentDetails() PaymentDetails {
	if o == nil || IsNil(o.PaymentDetails) {
		var ret PaymentDetails
		return ret
	}
	return *o.PaymentDetails
}

// GetPaymentDetailsOk returns a tuple with the PaymentDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeMultiDocWithTemplateParams) GetPaymentDetailsOk() (*PaymentDetails, bool) {
	if o == nil || IsNil(o.PaymentDetails) {
		return nil, false
	}
	return o.PaymentDetails, true
}

// HasPaymentDetails returns a boolean if a field has been set.
func (o *MergeMultiDocWithTemplateParams) HasPaymentDetails() bool {
	if o != nil && !IsNil(o.PaymentDetails) {
		return true
	}

	return false
}

// SetPaymentDetails gets a reference to the given PaymentDetails and assigns it to the PaymentDetails field.
func (o *MergeMultiDocWithTemplateParams) SetPaymentDetails(v PaymentDetails) {
	o.PaymentDetails = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *MergeMultiDocWithTemplateParams) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeMultiDocWithTemplateParams) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *MergeMultiDocWithTemplateParams) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *MergeMultiDocWithTemplateParams) SetTags(v []string) {
	o.Tags = v
}

func (o MergeMultiDocWithTemplateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeMultiDocWithTemplateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["documentsToMerge"] = o.DocumentsToMerge
	toSerialize["recipientAddressSource"] = o.RecipientAddressSource
	toSerialize["jobTemplate"] = o.JobTemplate
	if !IsNil(o.PaymentDetails) {
		toSerialize["paymentDetails"] = o.PaymentDetails
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *MergeMultiDocWithTemplateParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"documentsToMerge",
		"recipientAddressSource",
		"jobTemplate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMergeMultiDocWithTemplateParams := _MergeMultiDocWithTemplateParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMergeMultiDocWithTemplateParams)

	if err != nil {
		return err
	}

	*o = MergeMultiDocWithTemplateParams(varMergeMultiDocWithTemplateParams)

	return err
}

type NullableMergeMultiDocWithTemplateParams struct {
	value *MergeMultiDocWithTemplateParams
	isSet bool
}

func (v NullableMergeMultiDocWithTemplateParams) Get() *MergeMultiDocWithTemplateParams {
	return v.value
}

func (v *NullableMergeMultiDocWithTemplateParams) Set(val *MergeMultiDocWithTemplateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeMultiDocWithTemplateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeMultiDocWithTemplateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeMultiDocWithTemplateParams(val *MergeMultiDocWithTemplateParams) *NullableMergeMultiDocWithTemplateParams {
	return &NullableMergeMultiDocWithTemplateParams{value: val, isSet: true}
}

func (v NullableMergeMultiDocWithTemplateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeMultiDocWithTemplateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


