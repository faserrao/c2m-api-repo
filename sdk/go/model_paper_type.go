/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"fmt"
)

// PaperType the model 'PaperType'
type PaperType string

// List of paperType
const (
	LETTER PaperType = "letter"
	LEGAL PaperType = "legal"
	POSTCARD PaperType = "postcard"
)

// All allowed values of PaperType enum
var AllowedPaperTypeEnumValues = []PaperType{
	"letter",
	"legal",
	"postcard",
}

func (v *PaperType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaperType(value)
	for _, existing := range AllowedPaperTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaperType", value)
}

// NewPaperTypeFromValue returns a pointer to a valid PaperType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaperTypeFromValue(v string) (*PaperType, error) {
	ev := PaperType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaperType: valid values are %v", v, AllowedPaperTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaperType) IsValid() bool {
	for _, existing := range AllowedPaperTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to paperType value
func (v PaperType) Ptr() *PaperType {
	return &v
}

type NullablePaperType struct {
	value *PaperType
	isSet bool
}

func (v NullablePaperType) Get() *PaperType {
	return v.value
}

func (v *NullablePaperType) Set(val *PaperType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaperType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaperType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaperType(val *PaperType) *NullablePaperType {
	return &NullablePaperType{value: val, isSet: true}
}

func (v NullablePaperType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaperType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

