/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PaymentDetails - struct for PaymentDetails
type PaymentDetails struct {
	AchPayment *AchPayment
	ApplePayPayment *ApplePayPayment
	CreditCardPayment *CreditCardPayment
	GooglePayPayment *GooglePayPayment
	InvoicePayment *InvoicePayment
	UserCreditPayment *UserCreditPayment
}

// AchPaymentAsPaymentDetails is a convenience function that returns AchPayment wrapped in PaymentDetails
func AchPaymentAsPaymentDetails(v *AchPayment) PaymentDetails {
	return PaymentDetails{
		AchPayment: v,
	}
}

// ApplePayPaymentAsPaymentDetails is a convenience function that returns ApplePayPayment wrapped in PaymentDetails
func ApplePayPaymentAsPaymentDetails(v *ApplePayPayment) PaymentDetails {
	return PaymentDetails{
		ApplePayPayment: v,
	}
}

// CreditCardPaymentAsPaymentDetails is a convenience function that returns CreditCardPayment wrapped in PaymentDetails
func CreditCardPaymentAsPaymentDetails(v *CreditCardPayment) PaymentDetails {
	return PaymentDetails{
		CreditCardPayment: v,
	}
}

// GooglePayPaymentAsPaymentDetails is a convenience function that returns GooglePayPayment wrapped in PaymentDetails
func GooglePayPaymentAsPaymentDetails(v *GooglePayPayment) PaymentDetails {
	return PaymentDetails{
		GooglePayPayment: v,
	}
}

// InvoicePaymentAsPaymentDetails is a convenience function that returns InvoicePayment wrapped in PaymentDetails
func InvoicePaymentAsPaymentDetails(v *InvoicePayment) PaymentDetails {
	return PaymentDetails{
		InvoicePayment: v,
	}
}

// UserCreditPaymentAsPaymentDetails is a convenience function that returns UserCreditPayment wrapped in PaymentDetails
func UserCreditPaymentAsPaymentDetails(v *UserCreditPayment) PaymentDetails {
	return PaymentDetails{
		UserCreditPayment: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PaymentDetails) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AchPayment
	err = newStrictDecoder(data).Decode(&dst.AchPayment)
	if err == nil {
		jsonAchPayment, _ := json.Marshal(dst.AchPayment)
		if string(jsonAchPayment) == "{}" { // empty struct
			dst.AchPayment = nil
		} else {
			if err = validator.Validate(dst.AchPayment); err != nil {
				dst.AchPayment = nil
			} else {
				match++
			}
		}
	} else {
		dst.AchPayment = nil
	}

	// try to unmarshal data into ApplePayPayment
	err = newStrictDecoder(data).Decode(&dst.ApplePayPayment)
	if err == nil {
		jsonApplePayPayment, _ := json.Marshal(dst.ApplePayPayment)
		if string(jsonApplePayPayment) == "{}" { // empty struct
			dst.ApplePayPayment = nil
		} else {
			if err = validator.Validate(dst.ApplePayPayment); err != nil {
				dst.ApplePayPayment = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApplePayPayment = nil
	}

	// try to unmarshal data into CreditCardPayment
	err = newStrictDecoder(data).Decode(&dst.CreditCardPayment)
	if err == nil {
		jsonCreditCardPayment, _ := json.Marshal(dst.CreditCardPayment)
		if string(jsonCreditCardPayment) == "{}" { // empty struct
			dst.CreditCardPayment = nil
		} else {
			if err = validator.Validate(dst.CreditCardPayment); err != nil {
				dst.CreditCardPayment = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreditCardPayment = nil
	}

	// try to unmarshal data into GooglePayPayment
	err = newStrictDecoder(data).Decode(&dst.GooglePayPayment)
	if err == nil {
		jsonGooglePayPayment, _ := json.Marshal(dst.GooglePayPayment)
		if string(jsonGooglePayPayment) == "{}" { // empty struct
			dst.GooglePayPayment = nil
		} else {
			if err = validator.Validate(dst.GooglePayPayment); err != nil {
				dst.GooglePayPayment = nil
			} else {
				match++
			}
		}
	} else {
		dst.GooglePayPayment = nil
	}

	// try to unmarshal data into InvoicePayment
	err = newStrictDecoder(data).Decode(&dst.InvoicePayment)
	if err == nil {
		jsonInvoicePayment, _ := json.Marshal(dst.InvoicePayment)
		if string(jsonInvoicePayment) == "{}" { // empty struct
			dst.InvoicePayment = nil
		} else {
			if err = validator.Validate(dst.InvoicePayment); err != nil {
				dst.InvoicePayment = nil
			} else {
				match++
			}
		}
	} else {
		dst.InvoicePayment = nil
	}

	// try to unmarshal data into UserCreditPayment
	err = newStrictDecoder(data).Decode(&dst.UserCreditPayment)
	if err == nil {
		jsonUserCreditPayment, _ := json.Marshal(dst.UserCreditPayment)
		if string(jsonUserCreditPayment) == "{}" { // empty struct
			dst.UserCreditPayment = nil
		} else {
			if err = validator.Validate(dst.UserCreditPayment); err != nil {
				dst.UserCreditPayment = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserCreditPayment = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AchPayment = nil
		dst.ApplePayPayment = nil
		dst.CreditCardPayment = nil
		dst.GooglePayPayment = nil
		dst.InvoicePayment = nil
		dst.UserCreditPayment = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PaymentDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PaymentDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PaymentDetails) MarshalJSON() ([]byte, error) {
	if src.AchPayment != nil {
		return json.Marshal(&src.AchPayment)
	}

	if src.ApplePayPayment != nil {
		return json.Marshal(&src.ApplePayPayment)
	}

	if src.CreditCardPayment != nil {
		return json.Marshal(&src.CreditCardPayment)
	}

	if src.GooglePayPayment != nil {
		return json.Marshal(&src.GooglePayPayment)
	}

	if src.InvoicePayment != nil {
		return json.Marshal(&src.InvoicePayment)
	}

	if src.UserCreditPayment != nil {
		return json.Marshal(&src.UserCreditPayment)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PaymentDetails) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AchPayment != nil {
		return obj.AchPayment
	}

	if obj.ApplePayPayment != nil {
		return obj.ApplePayPayment
	}

	if obj.CreditCardPayment != nil {
		return obj.CreditCardPayment
	}

	if obj.GooglePayPayment != nil {
		return obj.GooglePayPayment
	}

	if obj.InvoicePayment != nil {
		return obj.InvoicePayment
	}

	if obj.UserCreditPayment != nil {
		return obj.UserCreditPayment
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PaymentDetails) GetActualInstanceValue() (interface{}) {
	if obj.AchPayment != nil {
		return *obj.AchPayment
	}

	if obj.ApplePayPayment != nil {
		return *obj.ApplePayPayment
	}

	if obj.CreditCardPayment != nil {
		return *obj.CreditCardPayment
	}

	if obj.GooglePayPayment != nil {
		return *obj.GooglePayPayment
	}

	if obj.InvoicePayment != nil {
		return *obj.InvoicePayment
	}

	if obj.UserCreditPayment != nil {
		return *obj.UserCreditPayment
	}

	// all schemas are nil
	return nil
}

type NullablePaymentDetails struct {
	value *PaymentDetails
	isSet bool
}

func (v NullablePaymentDetails) Get() *PaymentDetails {
	return v.value
}

func (v *NullablePaymentDetails) Set(val *PaymentDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentDetails(val *PaymentDetails) *NullablePaymentDetails {
	return &NullablePaymentDetails{value: val, isSet: true}
}

func (v NullablePaymentDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


