/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"fmt"
)

// PrintOption the model 'PrintOption'
type PrintOption string

// List of printOption
const (
	NONE PrintOption = "none"
	COLOR PrintOption = "color"
	GRAYSCALE PrintOption = "grayscale"
)

// All allowed values of PrintOption enum
var AllowedPrintOptionEnumValues = []PrintOption{
	"none",
	"color",
	"grayscale",
}

func (v *PrintOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrintOption(value)
	for _, existing := range AllowedPrintOptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrintOption", value)
}

// NewPrintOptionFromValue returns a pointer to a valid PrintOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrintOptionFromValue(v string) (*PrintOption, error) {
	ev := PrintOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrintOption: valid values are %v", v, AllowedPrintOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrintOption) IsValid() bool {
	for _, existing := range AllowedPrintOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to printOption value
func (v PrintOption) Ptr() *PrintOption {
	return &v
}

type NullablePrintOption struct {
	value *PrintOption
	isSet bool
}

func (v NullablePrintOption) Get() *PrintOption {
	return v.value
}

func (v *NullablePrintOption) Set(val *PrintOption) {
	v.value = val
	v.isSet = true
}

func (v NullablePrintOption) IsSet() bool {
	return v.isSet
}

func (v *NullablePrintOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrintOption(val *PrintOption) *NullablePrintOption {
	return &NullablePrintOption{value: val, isSet: true}
}

func (v NullablePrintOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrintOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

