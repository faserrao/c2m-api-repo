/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecipientAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecipientAddress{}

// RecipientAddress struct for RecipientAddress
type RecipientAddress struct {
	FirstName string `json:"firstName"`
	LastName string `json:"lastName"`
	Address1 string `json:"address1"`
	City string `json:"city"`
	State string `json:"state"`
	Zip string `json:"zip"`
	Country string `json:"country"`
	NickName *string `json:"nickName,omitempty"`
	Address2 *string `json:"address2,omitempty"`
	Address3 *string `json:"address3,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

type _RecipientAddress RecipientAddress

// NewRecipientAddress instantiates a new RecipientAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecipientAddress(firstName string, lastName string, address1 string, city string, state string, zip string, country string) *RecipientAddress {
	this := RecipientAddress{}
	this.FirstName = firstName
	this.LastName = lastName
	this.Address1 = address1
	this.City = city
	this.State = state
	this.Zip = zip
	this.Country = country
	return &this
}

// NewRecipientAddressWithDefaults instantiates a new RecipientAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecipientAddressWithDefaults() *RecipientAddress {
	this := RecipientAddress{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *RecipientAddress) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *RecipientAddress) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *RecipientAddress) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *RecipientAddress) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *RecipientAddress) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *RecipientAddress) SetLastName(v string) {
	o.LastName = v
}

// GetAddress1 returns the Address1 field value
func (o *RecipientAddress) GetAddress1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value
// and a boolean to check if the value has been set.
func (o *RecipientAddress) GetAddress1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address1, true
}

// SetAddress1 sets field value
func (o *RecipientAddress) SetAddress1(v string) {
	o.Address1 = v
}

// GetCity returns the City field value
func (o *RecipientAddress) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *RecipientAddress) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *RecipientAddress) SetCity(v string) {
	o.City = v
}

// GetState returns the State field value
func (o *RecipientAddress) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *RecipientAddress) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *RecipientAddress) SetState(v string) {
	o.State = v
}

// GetZip returns the Zip field value
func (o *RecipientAddress) GetZip() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Zip
}

// GetZipOk returns a tuple with the Zip field value
// and a boolean to check if the value has been set.
func (o *RecipientAddress) GetZipOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zip, true
}

// SetZip sets field value
func (o *RecipientAddress) SetZip(v string) {
	o.Zip = v
}

// GetCountry returns the Country field value
func (o *RecipientAddress) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *RecipientAddress) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *RecipientAddress) SetCountry(v string) {
	o.Country = v
}

// GetNickName returns the NickName field value if set, zero value otherwise.
func (o *RecipientAddress) GetNickName() string {
	if o == nil || IsNil(o.NickName) {
		var ret string
		return ret
	}
	return *o.NickName
}

// GetNickNameOk returns a tuple with the NickName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientAddress) GetNickNameOk() (*string, bool) {
	if o == nil || IsNil(o.NickName) {
		return nil, false
	}
	return o.NickName, true
}

// HasNickName returns a boolean if a field has been set.
func (o *RecipientAddress) HasNickName() bool {
	if o != nil && !IsNil(o.NickName) {
		return true
	}

	return false
}

// SetNickName gets a reference to the given string and assigns it to the NickName field.
func (o *RecipientAddress) SetNickName(v string) {
	o.NickName = &v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *RecipientAddress) GetAddress2() string {
	if o == nil || IsNil(o.Address2) {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientAddress) GetAddress2Ok() (*string, bool) {
	if o == nil || IsNil(o.Address2) {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *RecipientAddress) HasAddress2() bool {
	if o != nil && !IsNil(o.Address2) {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *RecipientAddress) SetAddress2(v string) {
	o.Address2 = &v
}

// GetAddress3 returns the Address3 field value if set, zero value otherwise.
func (o *RecipientAddress) GetAddress3() string {
	if o == nil || IsNil(o.Address3) {
		var ret string
		return ret
	}
	return *o.Address3
}

// GetAddress3Ok returns a tuple with the Address3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientAddress) GetAddress3Ok() (*string, bool) {
	if o == nil || IsNil(o.Address3) {
		return nil, false
	}
	return o.Address3, true
}

// HasAddress3 returns a boolean if a field has been set.
func (o *RecipientAddress) HasAddress3() bool {
	if o != nil && !IsNil(o.Address3) {
		return true
	}

	return false
}

// SetAddress3 gets a reference to the given string and assigns it to the Address3 field.
func (o *RecipientAddress) SetAddress3(v string) {
	o.Address3 = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *RecipientAddress) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecipientAddress) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *RecipientAddress) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *RecipientAddress) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

func (o RecipientAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecipientAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firstName"] = o.FirstName
	toSerialize["lastName"] = o.LastName
	toSerialize["address1"] = o.Address1
	toSerialize["city"] = o.City
	toSerialize["state"] = o.State
	toSerialize["zip"] = o.Zip
	toSerialize["country"] = o.Country
	if !IsNil(o.NickName) {
		toSerialize["nickName"] = o.NickName
	}
	if !IsNil(o.Address2) {
		toSerialize["address2"] = o.Address2
	}
	if !IsNil(o.Address3) {
		toSerialize["address3"] = o.Address3
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	return toSerialize, nil
}

func (o *RecipientAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firstName",
		"lastName",
		"address1",
		"city",
		"state",
		"zip",
		"country",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecipientAddress := _RecipientAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecipientAddress)

	if err != nil {
		return err
	}

	*o = RecipientAddress(varRecipientAddress)

	return err
}

type NullableRecipientAddress struct {
	value *RecipientAddress
	isSet bool
}

func (v NullableRecipientAddress) Get() *RecipientAddress {
	return v.value
}

func (v *NullableRecipientAddress) Set(val *RecipientAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipientAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipientAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipientAddress(val *RecipientAddress) *NullableRecipientAddress {
	return &NullableRecipientAddress{value: val, isSet: true}
}

func (v NullableRecipientAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipientAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


