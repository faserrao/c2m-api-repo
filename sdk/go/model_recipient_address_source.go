/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RecipientAddressSource - struct for RecipientAddressSource
type RecipientAddressSource struct {
	RecipientAddress *RecipientAddress
	Int32 *int32
}

// RecipientAddressAsRecipientAddressSource is a convenience function that returns RecipientAddress wrapped in RecipientAddressSource
func RecipientAddressAsRecipientAddressSource(v *RecipientAddress) RecipientAddressSource {
	return RecipientAddressSource{
		RecipientAddress: v,
	}
}

// int32AsRecipientAddressSource is a convenience function that returns int32 wrapped in RecipientAddressSource
func Int32AsRecipientAddressSource(v *int32) RecipientAddressSource {
	return RecipientAddressSource{
		Int32: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RecipientAddressSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RecipientAddress
	err = newStrictDecoder(data).Decode(&dst.RecipientAddress)
	if err == nil {
		jsonRecipientAddress, _ := json.Marshal(dst.RecipientAddress)
		if string(jsonRecipientAddress) == "{}" { // empty struct
			dst.RecipientAddress = nil
		} else {
			if err = validator.Validate(dst.RecipientAddress); err != nil {
				dst.RecipientAddress = nil
			} else {
				match++
			}
		}
	} else {
		dst.RecipientAddress = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RecipientAddress = nil
		dst.Int32 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RecipientAddressSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RecipientAddressSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RecipientAddressSource) MarshalJSON() ([]byte, error) {
	if src.RecipientAddress != nil {
		return json.Marshal(&src.RecipientAddress)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RecipientAddressSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RecipientAddress != nil {
		return obj.RecipientAddress
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RecipientAddressSource) GetActualInstanceValue() (interface{}) {
	if obj.RecipientAddress != nil {
		return *obj.RecipientAddress
	}

	if obj.Int32 != nil {
		return *obj.Int32
	}

	// all schemas are nil
	return nil
}

type NullableRecipientAddressSource struct {
	value *RecipientAddressSource
	isSet bool
}

func (v NullableRecipientAddressSource) Get() *RecipientAddressSource {
	return v.value
}

func (v *NullableRecipientAddressSource) Set(val *RecipientAddressSource) {
	v.value = val
	v.isSet = true
}

func (v NullableRecipientAddressSource) IsSet() bool {
	return v.isSet
}

func (v *NullableRecipientAddressSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecipientAddressSource(val *RecipientAddressSource) *NullableRecipientAddressSource {
	return &NullableRecipientAddressSource{value: val, isSet: true}
}

func (v NullableRecipientAddressSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecipientAddressSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


