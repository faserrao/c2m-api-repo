/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
)

// checks if the ShortTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShortTokenRequest{}

// ShortTokenRequest struct for ShortTokenRequest
type ShortTokenRequest struct {
	// Optional if the long-term token is provided in Authorization header
	LongToken *string `json:"long_token,omitempty"`
	// Optional scope narrowing; defaults to the long-term token's scopes
	Scopes []string `json:"scopes,omitempty"`
}

// NewShortTokenRequest instantiates a new ShortTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShortTokenRequest() *ShortTokenRequest {
	this := ShortTokenRequest{}
	return &this
}

// NewShortTokenRequestWithDefaults instantiates a new ShortTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShortTokenRequestWithDefaults() *ShortTokenRequest {
	this := ShortTokenRequest{}
	return &this
}

// GetLongToken returns the LongToken field value if set, zero value otherwise.
func (o *ShortTokenRequest) GetLongToken() string {
	if o == nil || IsNil(o.LongToken) {
		var ret string
		return ret
	}
	return *o.LongToken
}

// GetLongTokenOk returns a tuple with the LongToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortTokenRequest) GetLongTokenOk() (*string, bool) {
	if o == nil || IsNil(o.LongToken) {
		return nil, false
	}
	return o.LongToken, true
}

// HasLongToken returns a boolean if a field has been set.
func (o *ShortTokenRequest) HasLongToken() bool {
	if o != nil && !IsNil(o.LongToken) {
		return true
	}

	return false
}

// SetLongToken gets a reference to the given string and assigns it to the LongToken field.
func (o *ShortTokenRequest) SetLongToken(v string) {
	o.LongToken = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *ShortTokenRequest) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortTokenRequest) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *ShortTokenRequest) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *ShortTokenRequest) SetScopes(v []string) {
	o.Scopes = v
}

func (o ShortTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShortTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LongToken) {
		toSerialize["long_token"] = o.LongToken
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

type NullableShortTokenRequest struct {
	value *ShortTokenRequest
	isSet bool
}

func (v NullableShortTokenRequest) Get() *ShortTokenRequest {
	return v.value
}

func (v *NullableShortTokenRequest) Set(val *ShortTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableShortTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableShortTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShortTokenRequest(val *ShortTokenRequest) *NullableShortTokenRequest {
	return &NullableShortTokenRequest{value: val, isSet: true}
}

func (v NullableShortTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShortTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


