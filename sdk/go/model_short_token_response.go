/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ShortTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShortTokenResponse{}

// ShortTokenResponse struct for ShortTokenResponse
type ShortTokenResponse struct {
	TokenType string `json:"token_type"`
	// Short-lived JWT
	AccessToken string `json:"access_token"`
	// Lifetime in seconds (e.g., 900 for 15 minutes)
	ExpiresIn int32 `json:"expires_in"`
	// ISO 8601 timestamp of expiration
	ExpiresAt time.Time `json:"expires_at"`
	// Granted scopes
	Scopes []string `json:"scopes,omitempty"`
	// Server-issued identifier for this token
	TokenId *string `json:"token_id,omitempty"`
}

type _ShortTokenResponse ShortTokenResponse

// NewShortTokenResponse instantiates a new ShortTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShortTokenResponse(tokenType string, accessToken string, expiresIn int32, expiresAt time.Time) *ShortTokenResponse {
	this := ShortTokenResponse{}
	this.TokenType = tokenType
	this.AccessToken = accessToken
	this.ExpiresIn = expiresIn
	this.ExpiresAt = expiresAt
	return &this
}

// NewShortTokenResponseWithDefaults instantiates a new ShortTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShortTokenResponseWithDefaults() *ShortTokenResponse {
	this := ShortTokenResponse{}
	return &this
}

// GetTokenType returns the TokenType field value
func (o *ShortTokenResponse) GetTokenType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value
// and a boolean to check if the value has been set.
func (o *ShortTokenResponse) GetTokenTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenType, true
}

// SetTokenType sets field value
func (o *ShortTokenResponse) SetTokenType(v string) {
	o.TokenType = v
}

// GetAccessToken returns the AccessToken field value
func (o *ShortTokenResponse) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *ShortTokenResponse) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *ShortTokenResponse) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetExpiresIn returns the ExpiresIn field value
func (o *ShortTokenResponse) GetExpiresIn() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value
// and a boolean to check if the value has been set.
func (o *ShortTokenResponse) GetExpiresInOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresIn, true
}

// SetExpiresIn sets field value
func (o *ShortTokenResponse) SetExpiresIn(v int32) {
	o.ExpiresIn = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *ShortTokenResponse) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *ShortTokenResponse) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *ShortTokenResponse) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *ShortTokenResponse) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortTokenResponse) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *ShortTokenResponse) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *ShortTokenResponse) SetScopes(v []string) {
	o.Scopes = v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *ShortTokenResponse) GetTokenId() string {
	if o == nil || IsNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortTokenResponse) GetTokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *ShortTokenResponse) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *ShortTokenResponse) SetTokenId(v string) {
	o.TokenId = &v
}

func (o ShortTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShortTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token_type"] = o.TokenType
	toSerialize["access_token"] = o.AccessToken
	toSerialize["expires_in"] = o.ExpiresIn
	toSerialize["expires_at"] = o.ExpiresAt
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	return toSerialize, nil
}

func (o *ShortTokenResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token_type",
		"access_token",
		"expires_in",
		"expires_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShortTokenResponse := _ShortTokenResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShortTokenResponse)

	if err != nil {
		return err
	}

	*o = ShortTokenResponse(varShortTokenResponse)

	return err
}

type NullableShortTokenResponse struct {
	value *ShortTokenResponse
	isSet bool
}

func (v NullableShortTokenResponse) Get() *ShortTokenResponse {
	return v.value
}

func (v *NullableShortTokenResponse) Set(val *ShortTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableShortTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableShortTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShortTokenResponse(val *ShortTokenResponse) *NullableShortTokenResponse {
	return &NullableShortTokenResponse{value: val, isSet: true}
}

func (v NullableShortTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShortTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


