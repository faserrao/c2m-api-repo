/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SplitPdfParamsRequestItemsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SplitPdfParamsRequestItemsInner{}

// SplitPdfParamsRequestItemsInner struct for SplitPdfParamsRequestItemsInner
type SplitPdfParamsRequestItemsInner struct {
	PageRange PageRange `json:"pageRange"`
	RecipientAddressSources []RecipientAddressSource `json:"recipientAddressSources"`
}

type _SplitPdfParamsRequestItemsInner SplitPdfParamsRequestItemsInner

// NewSplitPdfParamsRequestItemsInner instantiates a new SplitPdfParamsRequestItemsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplitPdfParamsRequestItemsInner(pageRange PageRange, recipientAddressSources []RecipientAddressSource) *SplitPdfParamsRequestItemsInner {
	this := SplitPdfParamsRequestItemsInner{}
	this.PageRange = pageRange
	this.RecipientAddressSources = recipientAddressSources
	return &this
}

// NewSplitPdfParamsRequestItemsInnerWithDefaults instantiates a new SplitPdfParamsRequestItemsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplitPdfParamsRequestItemsInnerWithDefaults() *SplitPdfParamsRequestItemsInner {
	this := SplitPdfParamsRequestItemsInner{}
	return &this
}

// GetPageRange returns the PageRange field value
func (o *SplitPdfParamsRequestItemsInner) GetPageRange() PageRange {
	if o == nil {
		var ret PageRange
		return ret
	}

	return o.PageRange
}

// GetPageRangeOk returns a tuple with the PageRange field value
// and a boolean to check if the value has been set.
func (o *SplitPdfParamsRequestItemsInner) GetPageRangeOk() (*PageRange, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageRange, true
}

// SetPageRange sets field value
func (o *SplitPdfParamsRequestItemsInner) SetPageRange(v PageRange) {
	o.PageRange = v
}

// GetRecipientAddressSources returns the RecipientAddressSources field value
func (o *SplitPdfParamsRequestItemsInner) GetRecipientAddressSources() []RecipientAddressSource {
	if o == nil {
		var ret []RecipientAddressSource
		return ret
	}

	return o.RecipientAddressSources
}

// GetRecipientAddressSourcesOk returns a tuple with the RecipientAddressSources field value
// and a boolean to check if the value has been set.
func (o *SplitPdfParamsRequestItemsInner) GetRecipientAddressSourcesOk() ([]RecipientAddressSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecipientAddressSources, true
}

// SetRecipientAddressSources sets field value
func (o *SplitPdfParamsRequestItemsInner) SetRecipientAddressSources(v []RecipientAddressSource) {
	o.RecipientAddressSources = v
}

func (o SplitPdfParamsRequestItemsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SplitPdfParamsRequestItemsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pageRange"] = o.PageRange
	toSerialize["recipientAddressSources"] = o.RecipientAddressSources
	return toSerialize, nil
}

func (o *SplitPdfParamsRequestItemsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pageRange",
		"recipientAddressSources",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSplitPdfParamsRequestItemsInner := _SplitPdfParamsRequestItemsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSplitPdfParamsRequestItemsInner)

	if err != nil {
		return err
	}

	*o = SplitPdfParamsRequestItemsInner(varSplitPdfParamsRequestItemsInner)

	return err
}

type NullableSplitPdfParamsRequestItemsInner struct {
	value *SplitPdfParamsRequestItemsInner
	isSet bool
}

func (v NullableSplitPdfParamsRequestItemsInner) Get() *SplitPdfParamsRequestItemsInner {
	return v.value
}

func (v *NullableSplitPdfParamsRequestItemsInner) Set(val *SplitPdfParamsRequestItemsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSplitPdfParamsRequestItemsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSplitPdfParamsRequestItemsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplitPdfParamsRequestItemsInner(val *SplitPdfParamsRequestItemsInner) *NullableSplitPdfParamsRequestItemsInner {
	return &NullableSplitPdfParamsRequestItemsInner{value: val, isSet: true}
}

func (v NullableSplitPdfParamsRequestItemsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplitPdfParamsRequestItemsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


