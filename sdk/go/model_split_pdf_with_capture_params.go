/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SplitPdfWithCaptureParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SplitPdfWithCaptureParams{}

// SplitPdfWithCaptureParams struct for SplitPdfWithCaptureParams
type SplitPdfWithCaptureParams struct {
	DocumentSourceIdentifier DocumentSourceIdentifier `json:"documentSourceIdentifier"`
	EmbeddedExtractionSpecs []ExtractionSpec `json:"embeddedExtractionSpecs"`
	PaymentDetails *PaymentDetails `json:"paymentDetails,omitempty"`
	Tags []string `json:"tags,omitempty"`
}

type _SplitPdfWithCaptureParams SplitPdfWithCaptureParams

// NewSplitPdfWithCaptureParams instantiates a new SplitPdfWithCaptureParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplitPdfWithCaptureParams(documentSourceIdentifier DocumentSourceIdentifier, embeddedExtractionSpecs []ExtractionSpec) *SplitPdfWithCaptureParams {
	this := SplitPdfWithCaptureParams{}
	this.DocumentSourceIdentifier = documentSourceIdentifier
	this.EmbeddedExtractionSpecs = embeddedExtractionSpecs
	return &this
}

// NewSplitPdfWithCaptureParamsWithDefaults instantiates a new SplitPdfWithCaptureParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplitPdfWithCaptureParamsWithDefaults() *SplitPdfWithCaptureParams {
	this := SplitPdfWithCaptureParams{}
	return &this
}

// GetDocumentSourceIdentifier returns the DocumentSourceIdentifier field value
func (o *SplitPdfWithCaptureParams) GetDocumentSourceIdentifier() DocumentSourceIdentifier {
	if o == nil {
		var ret DocumentSourceIdentifier
		return ret
	}

	return o.DocumentSourceIdentifier
}

// GetDocumentSourceIdentifierOk returns a tuple with the DocumentSourceIdentifier field value
// and a boolean to check if the value has been set.
func (o *SplitPdfWithCaptureParams) GetDocumentSourceIdentifierOk() (*DocumentSourceIdentifier, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentSourceIdentifier, true
}

// SetDocumentSourceIdentifier sets field value
func (o *SplitPdfWithCaptureParams) SetDocumentSourceIdentifier(v DocumentSourceIdentifier) {
	o.DocumentSourceIdentifier = v
}

// GetEmbeddedExtractionSpecs returns the EmbeddedExtractionSpecs field value
func (o *SplitPdfWithCaptureParams) GetEmbeddedExtractionSpecs() []ExtractionSpec {
	if o == nil {
		var ret []ExtractionSpec
		return ret
	}

	return o.EmbeddedExtractionSpecs
}

// GetEmbeddedExtractionSpecsOk returns a tuple with the EmbeddedExtractionSpecs field value
// and a boolean to check if the value has been set.
func (o *SplitPdfWithCaptureParams) GetEmbeddedExtractionSpecsOk() ([]ExtractionSpec, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmbeddedExtractionSpecs, true
}

// SetEmbeddedExtractionSpecs sets field value
func (o *SplitPdfWithCaptureParams) SetEmbeddedExtractionSpecs(v []ExtractionSpec) {
	o.EmbeddedExtractionSpecs = v
}

// GetPaymentDetails returns the PaymentDetails field value if set, zero value otherwise.
func (o *SplitPdfWithCaptureParams) GetPaymentDetails() PaymentDetails {
	if o == nil || IsNil(o.PaymentDetails) {
		var ret PaymentDetails
		return ret
	}
	return *o.PaymentDetails
}

// GetPaymentDetailsOk returns a tuple with the PaymentDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitPdfWithCaptureParams) GetPaymentDetailsOk() (*PaymentDetails, bool) {
	if o == nil || IsNil(o.PaymentDetails) {
		return nil, false
	}
	return o.PaymentDetails, true
}

// HasPaymentDetails returns a boolean if a field has been set.
func (o *SplitPdfWithCaptureParams) HasPaymentDetails() bool {
	if o != nil && !IsNil(o.PaymentDetails) {
		return true
	}

	return false
}

// SetPaymentDetails gets a reference to the given PaymentDetails and assigns it to the PaymentDetails field.
func (o *SplitPdfWithCaptureParams) SetPaymentDetails(v PaymentDetails) {
	o.PaymentDetails = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SplitPdfWithCaptureParams) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitPdfWithCaptureParams) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SplitPdfWithCaptureParams) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SplitPdfWithCaptureParams) SetTags(v []string) {
	o.Tags = v
}

func (o SplitPdfWithCaptureParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SplitPdfWithCaptureParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["documentSourceIdentifier"] = o.DocumentSourceIdentifier
	toSerialize["embeddedExtractionSpecs"] = o.EmbeddedExtractionSpecs
	if !IsNil(o.PaymentDetails) {
		toSerialize["paymentDetails"] = o.PaymentDetails
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *SplitPdfWithCaptureParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"documentSourceIdentifier",
		"embeddedExtractionSpecs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSplitPdfWithCaptureParams := _SplitPdfWithCaptureParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSplitPdfWithCaptureParams)

	if err != nil {
		return err
	}

	*o = SplitPdfWithCaptureParams(varSplitPdfWithCaptureParams)

	return err
}

type NullableSplitPdfWithCaptureParams struct {
	value *SplitPdfWithCaptureParams
	isSet bool
}

func (v NullableSplitPdfWithCaptureParams) Get() *SplitPdfWithCaptureParams {
	return v.value
}

func (v *NullableSplitPdfWithCaptureParams) Set(val *SplitPdfWithCaptureParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSplitPdfWithCaptureParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSplitPdfWithCaptureParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplitPdfWithCaptureParams(val *SplitPdfWithCaptureParams) *NullableSplitPdfWithCaptureParams {
	return &NullableSplitPdfWithCaptureParams{value: val, isSet: true}
}

func (v NullableSplitPdfWithCaptureParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplitPdfWithCaptureParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


