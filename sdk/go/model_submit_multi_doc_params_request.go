/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubmitMultiDocParamsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmitMultiDocParamsRequest{}

// SubmitMultiDocParamsRequest struct for SubmitMultiDocParamsRequest
type SubmitMultiDocParamsRequest struct {
	Items []SubmitMultiDocWithTemplateParamsRequestItemsInner `json:"items"`
	JobOptions JobOptions `json:"jobOptions"`
	PaymentDetails *PaymentDetails `json:"paymentDetails,omitempty"`
	Tags []string `json:"tags,omitempty"`
}

type _SubmitMultiDocParamsRequest SubmitMultiDocParamsRequest

// NewSubmitMultiDocParamsRequest instantiates a new SubmitMultiDocParamsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitMultiDocParamsRequest(items []SubmitMultiDocWithTemplateParamsRequestItemsInner, jobOptions JobOptions) *SubmitMultiDocParamsRequest {
	this := SubmitMultiDocParamsRequest{}
	this.Items = items
	this.JobOptions = jobOptions
	return &this
}

// NewSubmitMultiDocParamsRequestWithDefaults instantiates a new SubmitMultiDocParamsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitMultiDocParamsRequestWithDefaults() *SubmitMultiDocParamsRequest {
	this := SubmitMultiDocParamsRequest{}
	return &this
}

// GetItems returns the Items field value
func (o *SubmitMultiDocParamsRequest) GetItems() []SubmitMultiDocWithTemplateParamsRequestItemsInner {
	if o == nil {
		var ret []SubmitMultiDocWithTemplateParamsRequestItemsInner
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *SubmitMultiDocParamsRequest) GetItemsOk() ([]SubmitMultiDocWithTemplateParamsRequestItemsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *SubmitMultiDocParamsRequest) SetItems(v []SubmitMultiDocWithTemplateParamsRequestItemsInner) {
	o.Items = v
}

// GetJobOptions returns the JobOptions field value
func (o *SubmitMultiDocParamsRequest) GetJobOptions() JobOptions {
	if o == nil {
		var ret JobOptions
		return ret
	}

	return o.JobOptions
}

// GetJobOptionsOk returns a tuple with the JobOptions field value
// and a boolean to check if the value has been set.
func (o *SubmitMultiDocParamsRequest) GetJobOptionsOk() (*JobOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobOptions, true
}

// SetJobOptions sets field value
func (o *SubmitMultiDocParamsRequest) SetJobOptions(v JobOptions) {
	o.JobOptions = v
}

// GetPaymentDetails returns the PaymentDetails field value if set, zero value otherwise.
func (o *SubmitMultiDocParamsRequest) GetPaymentDetails() PaymentDetails {
	if o == nil || IsNil(o.PaymentDetails) {
		var ret PaymentDetails
		return ret
	}
	return *o.PaymentDetails
}

// GetPaymentDetailsOk returns a tuple with the PaymentDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitMultiDocParamsRequest) GetPaymentDetailsOk() (*PaymentDetails, bool) {
	if o == nil || IsNil(o.PaymentDetails) {
		return nil, false
	}
	return o.PaymentDetails, true
}

// HasPaymentDetails returns a boolean if a field has been set.
func (o *SubmitMultiDocParamsRequest) HasPaymentDetails() bool {
	if o != nil && !IsNil(o.PaymentDetails) {
		return true
	}

	return false
}

// SetPaymentDetails gets a reference to the given PaymentDetails and assigns it to the PaymentDetails field.
func (o *SubmitMultiDocParamsRequest) SetPaymentDetails(v PaymentDetails) {
	o.PaymentDetails = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SubmitMultiDocParamsRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitMultiDocParamsRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SubmitMultiDocParamsRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SubmitMultiDocParamsRequest) SetTags(v []string) {
	o.Tags = v
}

func (o SubmitMultiDocParamsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmitMultiDocParamsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	toSerialize["jobOptions"] = o.JobOptions
	if !IsNil(o.PaymentDetails) {
		toSerialize["paymentDetails"] = o.PaymentDetails
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *SubmitMultiDocParamsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
		"jobOptions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmitMultiDocParamsRequest := _SubmitMultiDocParamsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubmitMultiDocParamsRequest)

	if err != nil {
		return err
	}

	*o = SubmitMultiDocParamsRequest(varSubmitMultiDocParamsRequest)

	return err
}

type NullableSubmitMultiDocParamsRequest struct {
	value *SubmitMultiDocParamsRequest
	isSet bool
}

func (v NullableSubmitMultiDocParamsRequest) Get() *SubmitMultiDocParamsRequest {
	return v.value
}

func (v *NullableSubmitMultiDocParamsRequest) Set(val *SubmitMultiDocParamsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitMultiDocParamsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitMultiDocParamsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitMultiDocParamsRequest(val *SubmitMultiDocParamsRequest) *NullableSubmitMultiDocParamsRequest {
	return &NullableSubmitMultiDocParamsRequest{value: val, isSet: true}
}

func (v NullableSubmitMultiDocParamsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitMultiDocParamsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


