/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubmitMultiDocWithTemplateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubmitMultiDocWithTemplateParams{}

// SubmitMultiDocWithTemplateParams struct for SubmitMultiDocWithTemplateParams
type SubmitMultiDocWithTemplateParams struct {
	Items []SubmitMultiDocWithTemplateParamsRequestItemsInner `json:"items"`
	JobTemplate string `json:"jobTemplate"`
	PaymentDetails PaymentDetails `json:"paymentDetails"`
	Tags []string `json:"tags,omitempty"`
}

type _SubmitMultiDocWithTemplateParams SubmitMultiDocWithTemplateParams

// NewSubmitMultiDocWithTemplateParams instantiates a new SubmitMultiDocWithTemplateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubmitMultiDocWithTemplateParams(items []SubmitMultiDocWithTemplateParamsRequestItemsInner, jobTemplate string, paymentDetails PaymentDetails) *SubmitMultiDocWithTemplateParams {
	this := SubmitMultiDocWithTemplateParams{}
	this.Items = items
	this.JobTemplate = jobTemplate
	this.PaymentDetails = paymentDetails
	return &this
}

// NewSubmitMultiDocWithTemplateParamsWithDefaults instantiates a new SubmitMultiDocWithTemplateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubmitMultiDocWithTemplateParamsWithDefaults() *SubmitMultiDocWithTemplateParams {
	this := SubmitMultiDocWithTemplateParams{}
	return &this
}

// GetItems returns the Items field value
func (o *SubmitMultiDocWithTemplateParams) GetItems() []SubmitMultiDocWithTemplateParamsRequestItemsInner {
	if o == nil {
		var ret []SubmitMultiDocWithTemplateParamsRequestItemsInner
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *SubmitMultiDocWithTemplateParams) GetItemsOk() ([]SubmitMultiDocWithTemplateParamsRequestItemsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *SubmitMultiDocWithTemplateParams) SetItems(v []SubmitMultiDocWithTemplateParamsRequestItemsInner) {
	o.Items = v
}

// GetJobTemplate returns the JobTemplate field value
func (o *SubmitMultiDocWithTemplateParams) GetJobTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobTemplate
}

// GetJobTemplateOk returns a tuple with the JobTemplate field value
// and a boolean to check if the value has been set.
func (o *SubmitMultiDocWithTemplateParams) GetJobTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobTemplate, true
}

// SetJobTemplate sets field value
func (o *SubmitMultiDocWithTemplateParams) SetJobTemplate(v string) {
	o.JobTemplate = v
}

// GetPaymentDetails returns the PaymentDetails field value
func (o *SubmitMultiDocWithTemplateParams) GetPaymentDetails() PaymentDetails {
	if o == nil {
		var ret PaymentDetails
		return ret
	}

	return o.PaymentDetails
}

// GetPaymentDetailsOk returns a tuple with the PaymentDetails field value
// and a boolean to check if the value has been set.
func (o *SubmitMultiDocWithTemplateParams) GetPaymentDetailsOk() (*PaymentDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentDetails, true
}

// SetPaymentDetails sets field value
func (o *SubmitMultiDocWithTemplateParams) SetPaymentDetails(v PaymentDetails) {
	o.PaymentDetails = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SubmitMultiDocWithTemplateParams) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubmitMultiDocWithTemplateParams) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SubmitMultiDocWithTemplateParams) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SubmitMultiDocWithTemplateParams) SetTags(v []string) {
	o.Tags = v
}

func (o SubmitMultiDocWithTemplateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubmitMultiDocWithTemplateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	toSerialize["jobTemplate"] = o.JobTemplate
	toSerialize["paymentDetails"] = o.PaymentDetails
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *SubmitMultiDocWithTemplateParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
		"jobTemplate",
		"paymentDetails",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubmitMultiDocWithTemplateParams := _SubmitMultiDocWithTemplateParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubmitMultiDocWithTemplateParams)

	if err != nil {
		return err
	}

	*o = SubmitMultiDocWithTemplateParams(varSubmitMultiDocWithTemplateParams)

	return err
}

type NullableSubmitMultiDocWithTemplateParams struct {
	value *SubmitMultiDocWithTemplateParams
	isSet bool
}

func (v NullableSubmitMultiDocWithTemplateParams) Get() *SubmitMultiDocWithTemplateParams {
	return v.value
}

func (v *NullableSubmitMultiDocWithTemplateParams) Set(val *SubmitMultiDocWithTemplateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitMultiDocWithTemplateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitMultiDocWithTemplateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitMultiDocWithTemplateParams(val *SubmitMultiDocWithTemplateParams) *NullableSubmitMultiDocWithTemplateParams {
	return &NullableSubmitMultiDocWithTemplateParams{value: val, isSet: true}
}

func (v NullableSubmitMultiDocWithTemplateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitMultiDocWithTemplateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


