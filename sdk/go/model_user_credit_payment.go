/*
C2M API v2 - Auth Overlay

API for submitting documents with various routing options

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package c2mapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserCreditPayment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserCreditPayment{}

// UserCreditPayment struct for UserCreditPayment
type UserCreditPayment struct {
	CreditAmount CreditAmount `json:"creditAmount"`
}

type _UserCreditPayment UserCreditPayment

// NewUserCreditPayment instantiates a new UserCreditPayment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCreditPayment(creditAmount CreditAmount) *UserCreditPayment {
	this := UserCreditPayment{}
	this.CreditAmount = creditAmount
	return &this
}

// NewUserCreditPaymentWithDefaults instantiates a new UserCreditPayment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCreditPaymentWithDefaults() *UserCreditPayment {
	this := UserCreditPayment{}
	return &this
}

// GetCreditAmount returns the CreditAmount field value
func (o *UserCreditPayment) GetCreditAmount() CreditAmount {
	if o == nil {
		var ret CreditAmount
		return ret
	}

	return o.CreditAmount
}

// GetCreditAmountOk returns a tuple with the CreditAmount field value
// and a boolean to check if the value has been set.
func (o *UserCreditPayment) GetCreditAmountOk() (*CreditAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditAmount, true
}

// SetCreditAmount sets field value
func (o *UserCreditPayment) SetCreditAmount(v CreditAmount) {
	o.CreditAmount = v
}

func (o UserCreditPayment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserCreditPayment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["creditAmount"] = o.CreditAmount
	return toSerialize, nil
}

func (o *UserCreditPayment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"creditAmount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserCreditPayment := _UserCreditPayment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserCreditPayment)

	if err != nil {
		return err
	}

	*o = UserCreditPayment(varUserCreditPayment)

	return err
}

type NullableUserCreditPayment struct {
	value *UserCreditPayment
	isSet bool
}

func (v NullableUserCreditPayment) Get() *UserCreditPayment {
	return v.value
}

func (v *NullableUserCreditPayment) Set(val *UserCreditPayment) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCreditPayment) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCreditPayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCreditPayment(val *UserCreditPayment) *NullableUserCreditPayment {
	return &NullableUserCreditPayment{value: val, isSet: true}
}

func (v NullableUserCreditPayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCreditPayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


