/*
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.c2m.api;

import com.c2m.ApiCallback;
import com.c2m.ApiClient;
import com.c2m.ApiException;
import com.c2m.ApiResponse;
import com.c2m.Configuration;
import com.c2m.Pair;
import com.c2m.ProgressRequestBody;
import com.c2m.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.c2m.model.MergeMultiDocParamsRequest;
import com.c2m.model.MergeMultiDocWithTemplateParamsRequest;
import com.c2m.model.MultiPdfWithCaptureParamsRequest;
import com.c2m.model.SingleDocJobParamsRequest;
import com.c2m.model.SplitPdfParamsRequest;
import com.c2m.model.SplitPdfWithCaptureParamsRequest;
import com.c2m.model.StandardResponse;
import com.c2m.model.SubmitMultiDocParamsRequest;
import com.c2m.model.SubmitMultiDocWithTemplateParamsRequest;
import com.c2m.model.SubmitSingleDocWithTemplateParamsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mergeMultiDocParams
     * @param mergeMultiDocParamsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeMultiDocParamsCall(@javax.annotation.Nonnull MergeMultiDocParamsRequest mergeMultiDocParamsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergeMultiDocParamsRequest;

        // create path and map variables
        String localVarPath = "/jobs/multi-doc-merge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeMultiDocParamsValidateBeforeCall(@javax.annotation.Nonnull MergeMultiDocParamsRequest mergeMultiDocParamsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mergeMultiDocParamsRequest' is set
        if (mergeMultiDocParamsRequest == null) {
            throw new ApiException("Missing the required parameter 'mergeMultiDocParamsRequest' when calling mergeMultiDocParams(Async)");
        }

        return mergeMultiDocParamsCall(mergeMultiDocParamsRequest, _callback);

    }

    /**
     * Operation for /jobs/multi-doc-merge
     * 
     * @param mergeMultiDocParamsRequest  (required)
     * @return StandardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public StandardResponse mergeMultiDocParams(@javax.annotation.Nonnull MergeMultiDocParamsRequest mergeMultiDocParamsRequest) throws ApiException {
        ApiResponse<StandardResponse> localVarResp = mergeMultiDocParamsWithHttpInfo(mergeMultiDocParamsRequest);
        return localVarResp.getData();
    }

    /**
     * Operation for /jobs/multi-doc-merge
     * 
     * @param mergeMultiDocParamsRequest  (required)
     * @return ApiResponse&lt;StandardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardResponse> mergeMultiDocParamsWithHttpInfo(@javax.annotation.Nonnull MergeMultiDocParamsRequest mergeMultiDocParamsRequest) throws ApiException {
        okhttp3.Call localVarCall = mergeMultiDocParamsValidateBeforeCall(mergeMultiDocParamsRequest, null);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Operation for /jobs/multi-doc-merge (asynchronously)
     * 
     * @param mergeMultiDocParamsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeMultiDocParamsAsync(@javax.annotation.Nonnull MergeMultiDocParamsRequest mergeMultiDocParamsRequest, final ApiCallback<StandardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeMultiDocParamsValidateBeforeCall(mergeMultiDocParamsRequest, _callback);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergeMultiDocWithTemplateParams
     * @param mergeMultiDocWithTemplateParamsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeMultiDocWithTemplateParamsCall(@javax.annotation.Nonnull MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergeMultiDocWithTemplateParamsRequest;

        // create path and map variables
        String localVarPath = "/jobs/multi-doc-merge-job-template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeMultiDocWithTemplateParamsValidateBeforeCall(@javax.annotation.Nonnull MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mergeMultiDocWithTemplateParamsRequest' is set
        if (mergeMultiDocWithTemplateParamsRequest == null) {
            throw new ApiException("Missing the required parameter 'mergeMultiDocWithTemplateParamsRequest' when calling mergeMultiDocWithTemplateParams(Async)");
        }

        return mergeMultiDocWithTemplateParamsCall(mergeMultiDocWithTemplateParamsRequest, _callback);

    }

    /**
     * Operation for /jobs/multi-doc-merge-job-template
     * 
     * @param mergeMultiDocWithTemplateParamsRequest  (required)
     * @return StandardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public StandardResponse mergeMultiDocWithTemplateParams(@javax.annotation.Nonnull MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest) throws ApiException {
        ApiResponse<StandardResponse> localVarResp = mergeMultiDocWithTemplateParamsWithHttpInfo(mergeMultiDocWithTemplateParamsRequest);
        return localVarResp.getData();
    }

    /**
     * Operation for /jobs/multi-doc-merge-job-template
     * 
     * @param mergeMultiDocWithTemplateParamsRequest  (required)
     * @return ApiResponse&lt;StandardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardResponse> mergeMultiDocWithTemplateParamsWithHttpInfo(@javax.annotation.Nonnull MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest) throws ApiException {
        okhttp3.Call localVarCall = mergeMultiDocWithTemplateParamsValidateBeforeCall(mergeMultiDocWithTemplateParamsRequest, null);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Operation for /jobs/multi-doc-merge-job-template (asynchronously)
     * 
     * @param mergeMultiDocWithTemplateParamsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeMultiDocWithTemplateParamsAsync(@javax.annotation.Nonnull MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest, final ApiCallback<StandardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeMultiDocWithTemplateParamsValidateBeforeCall(mergeMultiDocWithTemplateParamsRequest, _callback);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for multiPdfWithCaptureParams
     * @param multiPdfWithCaptureParamsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call multiPdfWithCaptureParamsCall(@javax.annotation.Nonnull MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = multiPdfWithCaptureParamsRequest;

        // create path and map variables
        String localVarPath = "/jobs/multi-pdf-address-capture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call multiPdfWithCaptureParamsValidateBeforeCall(@javax.annotation.Nonnull MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'multiPdfWithCaptureParamsRequest' is set
        if (multiPdfWithCaptureParamsRequest == null) {
            throw new ApiException("Missing the required parameter 'multiPdfWithCaptureParamsRequest' when calling multiPdfWithCaptureParams(Async)");
        }

        return multiPdfWithCaptureParamsCall(multiPdfWithCaptureParamsRequest, _callback);

    }

    /**
     * Operation for /jobs/multi-pdf-address-capture
     * 
     * @param multiPdfWithCaptureParamsRequest  (required)
     * @return StandardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public StandardResponse multiPdfWithCaptureParams(@javax.annotation.Nonnull MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest) throws ApiException {
        ApiResponse<StandardResponse> localVarResp = multiPdfWithCaptureParamsWithHttpInfo(multiPdfWithCaptureParamsRequest);
        return localVarResp.getData();
    }

    /**
     * Operation for /jobs/multi-pdf-address-capture
     * 
     * @param multiPdfWithCaptureParamsRequest  (required)
     * @return ApiResponse&lt;StandardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardResponse> multiPdfWithCaptureParamsWithHttpInfo(@javax.annotation.Nonnull MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest) throws ApiException {
        okhttp3.Call localVarCall = multiPdfWithCaptureParamsValidateBeforeCall(multiPdfWithCaptureParamsRequest, null);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Operation for /jobs/multi-pdf-address-capture (asynchronously)
     * 
     * @param multiPdfWithCaptureParamsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call multiPdfWithCaptureParamsAsync(@javax.annotation.Nonnull MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest, final ApiCallback<StandardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = multiPdfWithCaptureParamsValidateBeforeCall(multiPdfWithCaptureParamsRequest, _callback);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for singleDocJobParams
     * @param singleDocJobParamsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call singleDocJobParamsCall(@javax.annotation.Nonnull SingleDocJobParamsRequest singleDocJobParamsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = singleDocJobParamsRequest;

        // create path and map variables
        String localVarPath = "/jobs/single-doc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call singleDocJobParamsValidateBeforeCall(@javax.annotation.Nonnull SingleDocJobParamsRequest singleDocJobParamsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'singleDocJobParamsRequest' is set
        if (singleDocJobParamsRequest == null) {
            throw new ApiException("Missing the required parameter 'singleDocJobParamsRequest' when calling singleDocJobParams(Async)");
        }

        return singleDocJobParamsCall(singleDocJobParamsRequest, _callback);

    }

    /**
     * Operation for /jobs/single-doc
     * 
     * @param singleDocJobParamsRequest  (required)
     * @return StandardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public StandardResponse singleDocJobParams(@javax.annotation.Nonnull SingleDocJobParamsRequest singleDocJobParamsRequest) throws ApiException {
        ApiResponse<StandardResponse> localVarResp = singleDocJobParamsWithHttpInfo(singleDocJobParamsRequest);
        return localVarResp.getData();
    }

    /**
     * Operation for /jobs/single-doc
     * 
     * @param singleDocJobParamsRequest  (required)
     * @return ApiResponse&lt;StandardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardResponse> singleDocJobParamsWithHttpInfo(@javax.annotation.Nonnull SingleDocJobParamsRequest singleDocJobParamsRequest) throws ApiException {
        okhttp3.Call localVarCall = singleDocJobParamsValidateBeforeCall(singleDocJobParamsRequest, null);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Operation for /jobs/single-doc (asynchronously)
     * 
     * @param singleDocJobParamsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call singleDocJobParamsAsync(@javax.annotation.Nonnull SingleDocJobParamsRequest singleDocJobParamsRequest, final ApiCallback<StandardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = singleDocJobParamsValidateBeforeCall(singleDocJobParamsRequest, _callback);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for splitPdfParams
     * @param splitPdfParamsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitPdfParamsCall(@javax.annotation.Nonnull SplitPdfParamsRequest splitPdfParamsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = splitPdfParamsRequest;

        // create path and map variables
        String localVarPath = "/jobs/single-pdf-split";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call splitPdfParamsValidateBeforeCall(@javax.annotation.Nonnull SplitPdfParamsRequest splitPdfParamsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'splitPdfParamsRequest' is set
        if (splitPdfParamsRequest == null) {
            throw new ApiException("Missing the required parameter 'splitPdfParamsRequest' when calling splitPdfParams(Async)");
        }

        return splitPdfParamsCall(splitPdfParamsRequest, _callback);

    }

    /**
     * Operation for /jobs/single-pdf-split
     * 
     * @param splitPdfParamsRequest  (required)
     * @return StandardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public StandardResponse splitPdfParams(@javax.annotation.Nonnull SplitPdfParamsRequest splitPdfParamsRequest) throws ApiException {
        ApiResponse<StandardResponse> localVarResp = splitPdfParamsWithHttpInfo(splitPdfParamsRequest);
        return localVarResp.getData();
    }

    /**
     * Operation for /jobs/single-pdf-split
     * 
     * @param splitPdfParamsRequest  (required)
     * @return ApiResponse&lt;StandardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardResponse> splitPdfParamsWithHttpInfo(@javax.annotation.Nonnull SplitPdfParamsRequest splitPdfParamsRequest) throws ApiException {
        okhttp3.Call localVarCall = splitPdfParamsValidateBeforeCall(splitPdfParamsRequest, null);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Operation for /jobs/single-pdf-split (asynchronously)
     * 
     * @param splitPdfParamsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitPdfParamsAsync(@javax.annotation.Nonnull SplitPdfParamsRequest splitPdfParamsRequest, final ApiCallback<StandardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = splitPdfParamsValidateBeforeCall(splitPdfParamsRequest, _callback);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for splitPdfWithCaptureParams
     * @param splitPdfWithCaptureParamsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitPdfWithCaptureParamsCall(@javax.annotation.Nonnull SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = splitPdfWithCaptureParamsRequest;

        // create path and map variables
        String localVarPath = "/jobs/single-pdf-split-addressCapture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call splitPdfWithCaptureParamsValidateBeforeCall(@javax.annotation.Nonnull SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'splitPdfWithCaptureParamsRequest' is set
        if (splitPdfWithCaptureParamsRequest == null) {
            throw new ApiException("Missing the required parameter 'splitPdfWithCaptureParamsRequest' when calling splitPdfWithCaptureParams(Async)");
        }

        return splitPdfWithCaptureParamsCall(splitPdfWithCaptureParamsRequest, _callback);

    }

    /**
     * Operation for /jobs/single-pdf-split-addressCapture
     * 
     * @param splitPdfWithCaptureParamsRequest  (required)
     * @return StandardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public StandardResponse splitPdfWithCaptureParams(@javax.annotation.Nonnull SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest) throws ApiException {
        ApiResponse<StandardResponse> localVarResp = splitPdfWithCaptureParamsWithHttpInfo(splitPdfWithCaptureParamsRequest);
        return localVarResp.getData();
    }

    /**
     * Operation for /jobs/single-pdf-split-addressCapture
     * 
     * @param splitPdfWithCaptureParamsRequest  (required)
     * @return ApiResponse&lt;StandardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardResponse> splitPdfWithCaptureParamsWithHttpInfo(@javax.annotation.Nonnull SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest) throws ApiException {
        okhttp3.Call localVarCall = splitPdfWithCaptureParamsValidateBeforeCall(splitPdfWithCaptureParamsRequest, null);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Operation for /jobs/single-pdf-split-addressCapture (asynchronously)
     * 
     * @param splitPdfWithCaptureParamsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitPdfWithCaptureParamsAsync(@javax.annotation.Nonnull SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest, final ApiCallback<StandardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = splitPdfWithCaptureParamsValidateBeforeCall(splitPdfWithCaptureParamsRequest, _callback);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitMultiDocParams
     * @param submitMultiDocParamsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitMultiDocParamsCall(@javax.annotation.Nonnull SubmitMultiDocParamsRequest submitMultiDocParamsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitMultiDocParamsRequest;

        // create path and map variables
        String localVarPath = "/jobs/multi-doc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitMultiDocParamsValidateBeforeCall(@javax.annotation.Nonnull SubmitMultiDocParamsRequest submitMultiDocParamsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'submitMultiDocParamsRequest' is set
        if (submitMultiDocParamsRequest == null) {
            throw new ApiException("Missing the required parameter 'submitMultiDocParamsRequest' when calling submitMultiDocParams(Async)");
        }

        return submitMultiDocParamsCall(submitMultiDocParamsRequest, _callback);

    }

    /**
     * Operation for /jobs/multi-doc
     * 
     * @param submitMultiDocParamsRequest  (required)
     * @return StandardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public StandardResponse submitMultiDocParams(@javax.annotation.Nonnull SubmitMultiDocParamsRequest submitMultiDocParamsRequest) throws ApiException {
        ApiResponse<StandardResponse> localVarResp = submitMultiDocParamsWithHttpInfo(submitMultiDocParamsRequest);
        return localVarResp.getData();
    }

    /**
     * Operation for /jobs/multi-doc
     * 
     * @param submitMultiDocParamsRequest  (required)
     * @return ApiResponse&lt;StandardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardResponse> submitMultiDocParamsWithHttpInfo(@javax.annotation.Nonnull SubmitMultiDocParamsRequest submitMultiDocParamsRequest) throws ApiException {
        okhttp3.Call localVarCall = submitMultiDocParamsValidateBeforeCall(submitMultiDocParamsRequest, null);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Operation for /jobs/multi-doc (asynchronously)
     * 
     * @param submitMultiDocParamsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitMultiDocParamsAsync(@javax.annotation.Nonnull SubmitMultiDocParamsRequest submitMultiDocParamsRequest, final ApiCallback<StandardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitMultiDocParamsValidateBeforeCall(submitMultiDocParamsRequest, _callback);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitMultiDocWithTemplateParams
     * @param submitMultiDocWithTemplateParamsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitMultiDocWithTemplateParamsCall(@javax.annotation.Nonnull SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitMultiDocWithTemplateParamsRequest;

        // create path and map variables
        String localVarPath = "/jobs/multi-docs-job-template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitMultiDocWithTemplateParamsValidateBeforeCall(@javax.annotation.Nonnull SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'submitMultiDocWithTemplateParamsRequest' is set
        if (submitMultiDocWithTemplateParamsRequest == null) {
            throw new ApiException("Missing the required parameter 'submitMultiDocWithTemplateParamsRequest' when calling submitMultiDocWithTemplateParams(Async)");
        }

        return submitMultiDocWithTemplateParamsCall(submitMultiDocWithTemplateParamsRequest, _callback);

    }

    /**
     * Operation for /jobs/multi-docs-job-template
     * 
     * @param submitMultiDocWithTemplateParamsRequest  (required)
     * @return StandardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public StandardResponse submitMultiDocWithTemplateParams(@javax.annotation.Nonnull SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest) throws ApiException {
        ApiResponse<StandardResponse> localVarResp = submitMultiDocWithTemplateParamsWithHttpInfo(submitMultiDocWithTemplateParamsRequest);
        return localVarResp.getData();
    }

    /**
     * Operation for /jobs/multi-docs-job-template
     * 
     * @param submitMultiDocWithTemplateParamsRequest  (required)
     * @return ApiResponse&lt;StandardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardResponse> submitMultiDocWithTemplateParamsWithHttpInfo(@javax.annotation.Nonnull SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest) throws ApiException {
        okhttp3.Call localVarCall = submitMultiDocWithTemplateParamsValidateBeforeCall(submitMultiDocWithTemplateParamsRequest, null);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Operation for /jobs/multi-docs-job-template (asynchronously)
     * 
     * @param submitMultiDocWithTemplateParamsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitMultiDocWithTemplateParamsAsync(@javax.annotation.Nonnull SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest, final ApiCallback<StandardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitMultiDocWithTemplateParamsValidateBeforeCall(submitMultiDocWithTemplateParamsRequest, _callback);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitSingleDocWithTemplateParams
     * @param submitSingleDocWithTemplateParamsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSingleDocWithTemplateParamsCall(@javax.annotation.Nonnull SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = submitSingleDocWithTemplateParamsRequest;

        // create path and map variables
        String localVarPath = "/jobs/single-doc-job-template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitSingleDocWithTemplateParamsValidateBeforeCall(@javax.annotation.Nonnull SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'submitSingleDocWithTemplateParamsRequest' is set
        if (submitSingleDocWithTemplateParamsRequest == null) {
            throw new ApiException("Missing the required parameter 'submitSingleDocWithTemplateParamsRequest' when calling submitSingleDocWithTemplateParams(Async)");
        }

        return submitSingleDocWithTemplateParamsCall(submitSingleDocWithTemplateParamsRequest, _callback);

    }

    /**
     * Operation for /jobs/single-doc-job-template
     * 
     * @param submitSingleDocWithTemplateParamsRequest  (required)
     * @return StandardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public StandardResponse submitSingleDocWithTemplateParams(@javax.annotation.Nonnull SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest) throws ApiException {
        ApiResponse<StandardResponse> localVarResp = submitSingleDocWithTemplateParamsWithHttpInfo(submitSingleDocWithTemplateParamsRequest);
        return localVarResp.getData();
    }

    /**
     * Operation for /jobs/single-doc-job-template
     * 
     * @param submitSingleDocWithTemplateParamsRequest  (required)
     * @return ApiResponse&lt;StandardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StandardResponse> submitSingleDocWithTemplateParamsWithHttpInfo(@javax.annotation.Nonnull SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest) throws ApiException {
        okhttp3.Call localVarCall = submitSingleDocWithTemplateParamsValidateBeforeCall(submitSingleDocWithTemplateParamsRequest, null);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Operation for /jobs/single-doc-job-template (asynchronously)
     * 
     * @param submitSingleDocWithTemplateParamsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitSingleDocWithTemplateParamsAsync(@javax.annotation.Nonnull SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest, final ApiCallback<StandardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitSingleDocWithTemplateParamsValidateBeforeCall(submitSingleDocWithTemplateParamsRequest, _callback);
        Type localVarReturnType = new TypeToken<StandardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
