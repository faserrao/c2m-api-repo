/*
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.c2m.model;

import java.util.Objects;
import com.c2m.model.DocumentSourceIdentifier;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.c2m.JSON;

/**
 * AddressListPdf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-08T10:35:42.292913-04:00[America/New_York]", comments = "Generator version: 7.15.0")
public class AddressListPdf {
  public static final String SERIALIZED_NAME_DOCUMENT_SOURCE_IDENTIFIER = "documentSourceIdentifier";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_SOURCE_IDENTIFIER)
  @javax.annotation.Nonnull
  private DocumentSourceIdentifier documentSourceIdentifier;

  public static final String SERIALIZED_NAME_ADDRESS_LIST_REGION = "addressListRegion";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LIST_REGION)
  @javax.annotation.Nonnull
  private String addressListRegion;

  public static final String SERIALIZED_NAME_DELIMITER = "delimiter";
  @SerializedName(SERIALIZED_NAME_DELIMITER)
  @javax.annotation.Nullable
  private String delimiter;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public AddressListPdf() {
  }

  public AddressListPdf documentSourceIdentifier(@javax.annotation.Nonnull DocumentSourceIdentifier documentSourceIdentifier) {
    this.documentSourceIdentifier = documentSourceIdentifier;
    return this;
  }

  /**
   * Get documentSourceIdentifier
   * @return documentSourceIdentifier
   */
  @javax.annotation.Nonnull
  public DocumentSourceIdentifier getDocumentSourceIdentifier() {
    return documentSourceIdentifier;
  }

  public void setDocumentSourceIdentifier(@javax.annotation.Nonnull DocumentSourceIdentifier documentSourceIdentifier) {
    this.documentSourceIdentifier = documentSourceIdentifier;
  }


  public AddressListPdf addressListRegion(@javax.annotation.Nonnull String addressListRegion) {
    this.addressListRegion = addressListRegion;
    return this;
  }

  /**
   * Get addressListRegion
   * @return addressListRegion
   */
  @javax.annotation.Nonnull
  public String getAddressListRegion() {
    return addressListRegion;
  }

  public void setAddressListRegion(@javax.annotation.Nonnull String addressListRegion) {
    this.addressListRegion = addressListRegion;
  }


  public AddressListPdf delimiter(@javax.annotation.Nullable String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

  /**
   * Get delimiter
   * @return delimiter
   */
  @javax.annotation.Nullable
  public String getDelimiter() {
    return delimiter;
  }

  public void setDelimiter(@javax.annotation.Nullable String delimiter) {
    this.delimiter = delimiter;
  }


  public AddressListPdf tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public AddressListPdf addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressListPdf addressListPdf = (AddressListPdf) o;
    return Objects.equals(this.documentSourceIdentifier, addressListPdf.documentSourceIdentifier) &&
        Objects.equals(this.addressListRegion, addressListPdf.addressListRegion) &&
        Objects.equals(this.delimiter, addressListPdf.delimiter) &&
        Objects.equals(this.tags, addressListPdf.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentSourceIdentifier, addressListRegion, delimiter, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressListPdf {\n");
    sb.append("    documentSourceIdentifier: ").append(toIndentedString(documentSourceIdentifier)).append("\n");
    sb.append("    addressListRegion: ").append(toIndentedString(addressListRegion)).append("\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("documentSourceIdentifier", "addressListRegion", "delimiter", "tags"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("documentSourceIdentifier", "addressListRegion"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddressListPdf
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddressListPdf.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddressListPdf is not found in the empty JSON string", AddressListPdf.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddressListPdf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddressListPdf` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddressListPdf.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `documentSourceIdentifier`
      DocumentSourceIdentifier.validateJsonElement(jsonObj.get("documentSourceIdentifier"));
      if (!jsonObj.get("addressListRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressListRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressListRegion").toString()));
      }
      if ((jsonObj.get("delimiter") != null && !jsonObj.get("delimiter").isJsonNull()) && !jsonObj.get("delimiter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delimiter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delimiter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddressListPdf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddressListPdf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddressListPdf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddressListPdf.class));

       return (TypeAdapter<T>) new TypeAdapter<AddressListPdf>() {
           @Override
           public void write(JsonWriter out, AddressListPdf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddressListPdf read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddressListPdf given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddressListPdf
   * @throws IOException if the JSON string is invalid with respect to AddressListPdf
   */
  public static AddressListPdf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddressListPdf.class);
  }

  /**
   * Convert an instance of AddressListPdf to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

