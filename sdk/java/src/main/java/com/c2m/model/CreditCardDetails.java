/*
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.c2m.model;

import java.util.Objects;
import com.c2m.model.CardType;
import com.c2m.model.ExpirationDate;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.c2m.JSON;

/**
 * CreditCardDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-08T10:35:42.292913-04:00[America/New_York]", comments = "Generator version: 7.15.0")
public class CreditCardDetails {
  public static final String SERIALIZED_NAME_CARD_TYPE = "cardType";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE)
  @javax.annotation.Nonnull
  private CardType cardType;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "cardNumber";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  @javax.annotation.Nonnull
  private String cardNumber;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  @javax.annotation.Nonnull
  private ExpirationDate expirationDate;

  public static final String SERIALIZED_NAME_CVV = "cvv";
  @SerializedName(SERIALIZED_NAME_CVV)
  @javax.annotation.Nonnull
  private Integer cvv;

  public CreditCardDetails() {
  }

  public CreditCardDetails cardType(@javax.annotation.Nonnull CardType cardType) {
    this.cardType = cardType;
    return this;
  }

  /**
   * Get cardType
   * @return cardType
   */
  @javax.annotation.Nonnull
  public CardType getCardType() {
    return cardType;
  }

  public void setCardType(@javax.annotation.Nonnull CardType cardType) {
    this.cardType = cardType;
  }


  public CreditCardDetails cardNumber(@javax.annotation.Nonnull String cardNumber) {
    this.cardNumber = cardNumber;
    return this;
  }

  /**
   * Get cardNumber
   * @return cardNumber
   */
  @javax.annotation.Nonnull
  public String getCardNumber() {
    return cardNumber;
  }

  public void setCardNumber(@javax.annotation.Nonnull String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public CreditCardDetails expirationDate(@javax.annotation.Nonnull ExpirationDate expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Get expirationDate
   * @return expirationDate
   */
  @javax.annotation.Nonnull
  public ExpirationDate getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(@javax.annotation.Nonnull ExpirationDate expirationDate) {
    this.expirationDate = expirationDate;
  }


  public CreditCardDetails cvv(@javax.annotation.Nonnull Integer cvv) {
    this.cvv = cvv;
    return this;
  }

  /**
   * Get cvv
   * @return cvv
   */
  @javax.annotation.Nonnull
  public Integer getCvv() {
    return cvv;
  }

  public void setCvv(@javax.annotation.Nonnull Integer cvv) {
    this.cvv = cvv;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditCardDetails creditCardDetails = (CreditCardDetails) o;
    return Objects.equals(this.cardType, creditCardDetails.cardType) &&
        Objects.equals(this.cardNumber, creditCardDetails.cardNumber) &&
        Objects.equals(this.expirationDate, creditCardDetails.expirationDate) &&
        Objects.equals(this.cvv, creditCardDetails.cvv);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardType, cardNumber, expirationDate, cvv);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditCardDetails {\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    cvv: ").append(toIndentedString(cvv)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("cardType", "cardNumber", "expirationDate", "cvv"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("cardType", "cardNumber", "expirationDate", "cvv"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreditCardDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreditCardDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreditCardDetails is not found in the empty JSON string", CreditCardDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreditCardDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreditCardDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreditCardDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `cardType`
      CardType.validateJsonElement(jsonObj.get("cardType"));
      if (!jsonObj.get("cardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumber").toString()));
      }
      // validate the required field `expirationDate`
      ExpirationDate.validateJsonElement(jsonObj.get("expirationDate"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreditCardDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreditCardDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreditCardDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreditCardDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<CreditCardDetails>() {
           @Override
           public void write(JsonWriter out, CreditCardDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreditCardDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreditCardDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreditCardDetails
   * @throws IOException if the JSON string is invalid with respect to CreditCardDetails
   */
  public static CreditCardDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreditCardDetails.class);
  }

  /**
   * Convert an instance of CreditCardDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

