/*
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.c2m.model;

import java.util.Objects;
import com.c2m.model.DocumentClass;
import com.c2m.model.Envelope;
import com.c2m.model.Layout;
import com.c2m.model.Mailclass;
import com.c2m.model.PaperType;
import com.c2m.model.PrintOption;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.c2m.JSON;

/**
 * JobOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-08T10:35:42.292913-04:00[America/New_York]", comments = "Generator version: 7.15.0")
public class JobOptions {
  public static final String SERIALIZED_NAME_DOCUMENT_CLASS = "documentClass";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_CLASS)
  @javax.annotation.Nonnull
  private DocumentClass documentClass;

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  @javax.annotation.Nonnull
  private Layout layout;

  public static final String SERIALIZED_NAME_MAILCLASS = "mailclass";
  @SerializedName(SERIALIZED_NAME_MAILCLASS)
  @javax.annotation.Nonnull
  private Mailclass mailclass;

  public static final String SERIALIZED_NAME_PAPER_TYPE = "paperType";
  @SerializedName(SERIALIZED_NAME_PAPER_TYPE)
  @javax.annotation.Nonnull
  private PaperType paperType;

  public static final String SERIALIZED_NAME_PRINT_OPTION = "printOption";
  @SerializedName(SERIALIZED_NAME_PRINT_OPTION)
  @javax.annotation.Nonnull
  private PrintOption printOption;

  public static final String SERIALIZED_NAME_ENVELOPE = "envelope";
  @SerializedName(SERIALIZED_NAME_ENVELOPE)
  @javax.annotation.Nonnull
  private Envelope envelope;

  public JobOptions() {
  }

  public JobOptions documentClass(@javax.annotation.Nonnull DocumentClass documentClass) {
    this.documentClass = documentClass;
    return this;
  }

  /**
   * Get documentClass
   * @return documentClass
   */
  @javax.annotation.Nonnull
  public DocumentClass getDocumentClass() {
    return documentClass;
  }

  public void setDocumentClass(@javax.annotation.Nonnull DocumentClass documentClass) {
    this.documentClass = documentClass;
  }


  public JobOptions layout(@javax.annotation.Nonnull Layout layout) {
    this.layout = layout;
    return this;
  }

  /**
   * Get layout
   * @return layout
   */
  @javax.annotation.Nonnull
  public Layout getLayout() {
    return layout;
  }

  public void setLayout(@javax.annotation.Nonnull Layout layout) {
    this.layout = layout;
  }


  public JobOptions mailclass(@javax.annotation.Nonnull Mailclass mailclass) {
    this.mailclass = mailclass;
    return this;
  }

  /**
   * Get mailclass
   * @return mailclass
   */
  @javax.annotation.Nonnull
  public Mailclass getMailclass() {
    return mailclass;
  }

  public void setMailclass(@javax.annotation.Nonnull Mailclass mailclass) {
    this.mailclass = mailclass;
  }


  public JobOptions paperType(@javax.annotation.Nonnull PaperType paperType) {
    this.paperType = paperType;
    return this;
  }

  /**
   * Get paperType
   * @return paperType
   */
  @javax.annotation.Nonnull
  public PaperType getPaperType() {
    return paperType;
  }

  public void setPaperType(@javax.annotation.Nonnull PaperType paperType) {
    this.paperType = paperType;
  }


  public JobOptions printOption(@javax.annotation.Nonnull PrintOption printOption) {
    this.printOption = printOption;
    return this;
  }

  /**
   * Get printOption
   * @return printOption
   */
  @javax.annotation.Nonnull
  public PrintOption getPrintOption() {
    return printOption;
  }

  public void setPrintOption(@javax.annotation.Nonnull PrintOption printOption) {
    this.printOption = printOption;
  }


  public JobOptions envelope(@javax.annotation.Nonnull Envelope envelope) {
    this.envelope = envelope;
    return this;
  }

  /**
   * Get envelope
   * @return envelope
   */
  @javax.annotation.Nonnull
  public Envelope getEnvelope() {
    return envelope;
  }

  public void setEnvelope(@javax.annotation.Nonnull Envelope envelope) {
    this.envelope = envelope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobOptions jobOptions = (JobOptions) o;
    return Objects.equals(this.documentClass, jobOptions.documentClass) &&
        Objects.equals(this.layout, jobOptions.layout) &&
        Objects.equals(this.mailclass, jobOptions.mailclass) &&
        Objects.equals(this.paperType, jobOptions.paperType) &&
        Objects.equals(this.printOption, jobOptions.printOption) &&
        Objects.equals(this.envelope, jobOptions.envelope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentClass, layout, mailclass, paperType, printOption, envelope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobOptions {\n");
    sb.append("    documentClass: ").append(toIndentedString(documentClass)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    mailclass: ").append(toIndentedString(mailclass)).append("\n");
    sb.append("    paperType: ").append(toIndentedString(paperType)).append("\n");
    sb.append("    printOption: ").append(toIndentedString(printOption)).append("\n");
    sb.append("    envelope: ").append(toIndentedString(envelope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("documentClass", "layout", "mailclass", "paperType", "printOption", "envelope"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("documentClass", "layout", "mailclass", "paperType", "printOption", "envelope"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobOptions is not found in the empty JSON string", JobOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `documentClass`
      DocumentClass.validateJsonElement(jsonObj.get("documentClass"));
      // validate the required field `layout`
      Layout.validateJsonElement(jsonObj.get("layout"));
      // validate the required field `mailclass`
      Mailclass.validateJsonElement(jsonObj.get("mailclass"));
      // validate the required field `paperType`
      PaperType.validateJsonElement(jsonObj.get("paperType"));
      // validate the required field `printOption`
      PrintOption.validateJsonElement(jsonObj.get("printOption"));
      // validate the required field `envelope`
      Envelope.validateJsonElement(jsonObj.get("envelope"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<JobOptions>() {
           @Override
           public void write(JsonWriter out, JobOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobOptions
   * @throws IOException if the JSON string is invalid with respect to JobOptions
   */
  public static JobOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobOptions.class);
  }

  /**
   * Convert an instance of JobOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

