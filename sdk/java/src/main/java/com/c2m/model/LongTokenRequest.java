/*
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.c2m.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.c2m.JSON;

/**
 * One of several credential mechanisms must be provided.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-08T10:35:42.292913-04:00[America/New_York]", comments = "Generator version: 7.15.0")
public class LongTokenRequest {
  /**
   * The authentication grant type
   */
  @JsonAdapter(GrantTypeEnum.Adapter.class)
  public enum GrantTypeEnum {
    CLIENT_CREDENTIALS("client_credentials"),
    
    ASSERTION("assertion");

    private String value;

    GrantTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrantTypeEnum fromValue(String value) {
      for (GrantTypeEnum b : GrantTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrantTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrantTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrantTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrantTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GrantTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRANT_TYPE = "grant_type";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPE)
  @javax.annotation.Nonnull
  private GrantTypeEnum grantType;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nonnull
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "client_secret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  @javax.annotation.Nullable
  private String clientSecret;

  public static final String SERIALIZED_NAME_OTP_CODE = "otp_code";
  @SerializedName(SERIALIZED_NAME_OTP_CODE)
  @javax.annotation.Nullable
  private String otpCode;

  public static final String SERIALIZED_NAME_ASSERTION_TYPE = "assertion_type";
  @SerializedName(SERIALIZED_NAME_ASSERTION_TYPE)
  @javax.annotation.Nullable
  private String assertionType;

  public static final String SERIALIZED_NAME_ASSERTION = "assertion";
  @SerializedName(SERIALIZED_NAME_ASSERTION)
  @javax.annotation.Nullable
  private String assertion;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  @javax.annotation.Nullable
  private List<String> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TTL_SECONDS = "ttl_seconds";
  @SerializedName(SERIALIZED_NAME_TTL_SECONDS)
  @javax.annotation.Nullable
  private Integer ttlSeconds;

  public LongTokenRequest() {
  }

  public LongTokenRequest grantType(@javax.annotation.Nonnull GrantTypeEnum grantType) {
    this.grantType = grantType;
    return this;
  }

  /**
   * The authentication grant type
   * @return grantType
   */
  @javax.annotation.Nonnull
  public GrantTypeEnum getGrantType() {
    return grantType;
  }

  public void setGrantType(@javax.annotation.Nonnull GrantTypeEnum grantType) {
    this.grantType = grantType;
  }


  public LongTokenRequest clientId(@javax.annotation.Nonnull String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Client identifier issued by Click2Mail
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nonnull String clientId) {
    this.clientId = clientId;
  }


  public LongTokenRequest clientSecret(@javax.annotation.Nullable String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Required if using client_credentials with secret
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(@javax.annotation.Nullable String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public LongTokenRequest otpCode(@javax.annotation.Nullable String otpCode) {
    this.otpCode = otpCode;
    return this;
  }

  /**
   * Required if your policy mandates OTP for issuance
   * @return otpCode
   */
  @javax.annotation.Nullable
  public String getOtpCode() {
    return otpCode;
  }

  public void setOtpCode(@javax.annotation.Nullable String otpCode) {
    this.otpCode = otpCode;
  }


  public LongTokenRequest assertionType(@javax.annotation.Nullable String assertionType) {
    this.assertionType = assertionType;
    return this;
  }

  /**
   * Required when grant_type&#x3D;assertion
   * @return assertionType
   */
  @javax.annotation.Nullable
  public String getAssertionType() {
    return assertionType;
  }

  public void setAssertionType(@javax.annotation.Nullable String assertionType) {
    this.assertionType = assertionType;
  }


  public LongTokenRequest assertion(@javax.annotation.Nullable String assertion) {
    this.assertion = assertion;
    return this;
  }

  /**
   * Signed JWT or other accepted assertion
   * @return assertion
   */
  @javax.annotation.Nullable
  public String getAssertion() {
    return assertion;
  }

  public void setAssertion(@javax.annotation.Nullable String assertion) {
    this.assertion = assertion;
  }


  public LongTokenRequest scopes(@javax.annotation.Nullable List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public LongTokenRequest addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Scopes to assign to the long-term token
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(@javax.annotation.Nullable List<String> scopes) {
    this.scopes = scopes;
  }


  public LongTokenRequest ttlSeconds(@javax.annotation.Nullable Integer ttlSeconds) {
    this.ttlSeconds = ttlSeconds;
    return this;
  }

  /**
   * Requested lifetime (1 hour - 90 days). Server may clamp.
   * minimum: 3600
   * maximum: 7776000
   * @return ttlSeconds
   */
  @javax.annotation.Nullable
  public Integer getTtlSeconds() {
    return ttlSeconds;
  }

  public void setTtlSeconds(@javax.annotation.Nullable Integer ttlSeconds) {
    this.ttlSeconds = ttlSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LongTokenRequest longTokenRequest = (LongTokenRequest) o;
    return Objects.equals(this.grantType, longTokenRequest.grantType) &&
        Objects.equals(this.clientId, longTokenRequest.clientId) &&
        Objects.equals(this.clientSecret, longTokenRequest.clientSecret) &&
        Objects.equals(this.otpCode, longTokenRequest.otpCode) &&
        Objects.equals(this.assertionType, longTokenRequest.assertionType) &&
        Objects.equals(this.assertion, longTokenRequest.assertion) &&
        Objects.equals(this.scopes, longTokenRequest.scopes) &&
        Objects.equals(this.ttlSeconds, longTokenRequest.ttlSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grantType, clientId, clientSecret, otpCode, assertionType, assertion, scopes, ttlSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LongTokenRequest {\n");
    sb.append("    grantType: ").append(toIndentedString(grantType)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    otpCode: ").append(toIndentedString(otpCode)).append("\n");
    sb.append("    assertionType: ").append(toIndentedString(assertionType)).append("\n");
    sb.append("    assertion: ").append(toIndentedString(assertion)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    ttlSeconds: ").append(toIndentedString(ttlSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("grant_type", "client_id", "client_secret", "otp_code", "assertion_type", "assertion", "scopes", "ttl_seconds"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("grant_type", "client_id"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LongTokenRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LongTokenRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LongTokenRequest is not found in the empty JSON string", LongTokenRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LongTokenRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LongTokenRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LongTokenRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("grant_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grant_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grant_type").toString()));
      }
      // validate the required field `grant_type`
      GrantTypeEnum.validateJsonElement(jsonObj.get("grant_type"));
      if (!jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("client_secret") != null && !jsonObj.get("client_secret").isJsonNull()) && !jsonObj.get("client_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_secret").toString()));
      }
      if ((jsonObj.get("otp_code") != null && !jsonObj.get("otp_code").isJsonNull()) && !jsonObj.get("otp_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otp_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otp_code").toString()));
      }
      if ((jsonObj.get("assertion_type") != null && !jsonObj.get("assertion_type").isJsonNull()) && !jsonObj.get("assertion_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assertion_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assertion_type").toString()));
      }
      if ((jsonObj.get("assertion") != null && !jsonObj.get("assertion").isJsonNull()) && !jsonObj.get("assertion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assertion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assertion").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LongTokenRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LongTokenRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LongTokenRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LongTokenRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LongTokenRequest>() {
           @Override
           public void write(JsonWriter out, LongTokenRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LongTokenRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LongTokenRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LongTokenRequest
   * @throws IOException if the JSON string is invalid with respect to LongTokenRequest
   */
  public static LongTokenRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LongTokenRequest.class);
  }

  /**
   * Convert an instance of LongTokenRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

