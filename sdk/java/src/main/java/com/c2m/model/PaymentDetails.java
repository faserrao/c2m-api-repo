/*
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.c2m.model;

import java.util.Objects;
import com.c2m.model.AchDetails;
import com.c2m.model.AchPayment;
import com.c2m.model.ApplePayPayment;
import com.c2m.model.CreditAmount;
import com.c2m.model.CreditCardDetails;
import com.c2m.model.CreditCardPayment;
import com.c2m.model.GooglePayPayment;
import com.c2m.model.InvoiceDetails;
import com.c2m.model.InvoicePayment;
import com.c2m.model.UserCreditPayment;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.c2m.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-08T10:35:42.292913-04:00[America/New_York]", comments = "Generator version: 7.15.0")
public class PaymentDetails extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(PaymentDetails.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PaymentDetails.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PaymentDetails' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreditCardPayment> adapterCreditCardPayment = gson.getDelegateAdapter(this, TypeToken.get(CreditCardPayment.class));
            final TypeAdapter<InvoicePayment> adapterInvoicePayment = gson.getDelegateAdapter(this, TypeToken.get(InvoicePayment.class));
            final TypeAdapter<AchPayment> adapterAchPayment = gson.getDelegateAdapter(this, TypeToken.get(AchPayment.class));
            final TypeAdapter<UserCreditPayment> adapterUserCreditPayment = gson.getDelegateAdapter(this, TypeToken.get(UserCreditPayment.class));
            final TypeAdapter<ApplePayPayment> adapterApplePayPayment = gson.getDelegateAdapter(this, TypeToken.get(ApplePayPayment.class));
            final TypeAdapter<GooglePayPayment> adapterGooglePayPayment = gson.getDelegateAdapter(this, TypeToken.get(GooglePayPayment.class));

            return (TypeAdapter<T>) new TypeAdapter<PaymentDetails>() {
                @Override
                public void write(JsonWriter out, PaymentDetails value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CreditCardPayment`
                    if (value.getActualInstance() instanceof CreditCardPayment) {
                        JsonElement element = adapterCreditCardPayment.toJsonTree((CreditCardPayment)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InvoicePayment`
                    if (value.getActualInstance() instanceof InvoicePayment) {
                        JsonElement element = adapterInvoicePayment.toJsonTree((InvoicePayment)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AchPayment`
                    if (value.getActualInstance() instanceof AchPayment) {
                        JsonElement element = adapterAchPayment.toJsonTree((AchPayment)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserCreditPayment`
                    if (value.getActualInstance() instanceof UserCreditPayment) {
                        JsonElement element = adapterUserCreditPayment.toJsonTree((UserCreditPayment)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ApplePayPayment`
                    if (value.getActualInstance() instanceof ApplePayPayment) {
                        JsonElement element = adapterApplePayPayment.toJsonTree((ApplePayPayment)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GooglePayPayment`
                    if (value.getActualInstance() instanceof GooglePayPayment) {
                        JsonElement element = adapterGooglePayPayment.toJsonTree((GooglePayPayment)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AchPayment, ApplePayPayment, CreditCardPayment, GooglePayPayment, InvoicePayment, UserCreditPayment");
                }

                @Override
                public PaymentDetails read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CreditCardPayment
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CreditCardPayment.validateJsonElement(jsonElement);
                        actualAdapter = adapterCreditCardPayment;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CreditCardPayment'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CreditCardPayment failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CreditCardPayment'", e);
                    }
                    // deserialize InvoicePayment
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InvoicePayment.validateJsonElement(jsonElement);
                        actualAdapter = adapterInvoicePayment;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InvoicePayment'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InvoicePayment failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InvoicePayment'", e);
                    }
                    // deserialize AchPayment
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AchPayment.validateJsonElement(jsonElement);
                        actualAdapter = adapterAchPayment;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AchPayment'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AchPayment failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AchPayment'", e);
                    }
                    // deserialize UserCreditPayment
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserCreditPayment.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserCreditPayment;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserCreditPayment'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserCreditPayment failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserCreditPayment'", e);
                    }
                    // deserialize ApplePayPayment
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ApplePayPayment.validateJsonElement(jsonElement);
                        actualAdapter = adapterApplePayPayment;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ApplePayPayment'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ApplePayPayment failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ApplePayPayment'", e);
                    }
                    // deserialize GooglePayPayment
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GooglePayPayment.validateJsonElement(jsonElement);
                        actualAdapter = adapterGooglePayPayment;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GooglePayPayment'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GooglePayPayment failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GooglePayPayment'", e);
                    }

                    if (match == 1) {
                        PaymentDetails ret = new PaymentDetails();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for PaymentDetails: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public PaymentDetails() {
        super("oneOf", Boolean.FALSE);
    }

    public PaymentDetails(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CreditCardPayment", CreditCardPayment.class);
        schemas.put("InvoicePayment", InvoicePayment.class);
        schemas.put("AchPayment", AchPayment.class);
        schemas.put("UserCreditPayment", UserCreditPayment.class);
        schemas.put("ApplePayPayment", ApplePayPayment.class);
        schemas.put("GooglePayPayment", GooglePayPayment.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return PaymentDetails.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AchPayment, ApplePayPayment, CreditCardPayment, GooglePayPayment, InvoicePayment, UserCreditPayment
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CreditCardPayment) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InvoicePayment) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AchPayment) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserCreditPayment) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ApplePayPayment) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GooglePayPayment) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AchPayment, ApplePayPayment, CreditCardPayment, GooglePayPayment, InvoicePayment, UserCreditPayment");
    }

    /**
     * Get the actual instance, which can be the following:
     * AchPayment, ApplePayPayment, CreditCardPayment, GooglePayPayment, InvoicePayment, UserCreditPayment
     *
     * @return The actual instance (AchPayment, ApplePayPayment, CreditCardPayment, GooglePayPayment, InvoicePayment, UserCreditPayment)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CreditCardPayment`. If the actual instance is not `CreditCardPayment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CreditCardPayment`
     * @throws ClassCastException if the instance is not `CreditCardPayment`
     */
    public CreditCardPayment getCreditCardPayment() throws ClassCastException {
        return (CreditCardPayment)super.getActualInstance();
    }

    /**
     * Get the actual instance of `InvoicePayment`. If the actual instance is not `InvoicePayment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InvoicePayment`
     * @throws ClassCastException if the instance is not `InvoicePayment`
     */
    public InvoicePayment getInvoicePayment() throws ClassCastException {
        return (InvoicePayment)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AchPayment`. If the actual instance is not `AchPayment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AchPayment`
     * @throws ClassCastException if the instance is not `AchPayment`
     */
    public AchPayment getAchPayment() throws ClassCastException {
        return (AchPayment)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UserCreditPayment`. If the actual instance is not `UserCreditPayment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserCreditPayment`
     * @throws ClassCastException if the instance is not `UserCreditPayment`
     */
    public UserCreditPayment getUserCreditPayment() throws ClassCastException {
        return (UserCreditPayment)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ApplePayPayment`. If the actual instance is not `ApplePayPayment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApplePayPayment`
     * @throws ClassCastException if the instance is not `ApplePayPayment`
     */
    public ApplePayPayment getApplePayPayment() throws ClassCastException {
        return (ApplePayPayment)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GooglePayPayment`. If the actual instance is not `GooglePayPayment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GooglePayPayment`
     * @throws ClassCastException if the instance is not `GooglePayPayment`
     */
    public GooglePayPayment getGooglePayPayment() throws ClassCastException {
        return (GooglePayPayment)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PaymentDetails
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with CreditCardPayment
        try {
            CreditCardPayment.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CreditCardPayment failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InvoicePayment
        try {
            InvoicePayment.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InvoicePayment failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AchPayment
        try {
            AchPayment.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AchPayment failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserCreditPayment
        try {
            UserCreditPayment.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserCreditPayment failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ApplePayPayment
        try {
            ApplePayPayment.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ApplePayPayment failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GooglePayPayment
        try {
            GooglePayPayment.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GooglePayPayment failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for PaymentDetails with oneOf schemas: AchPayment, ApplePayPayment, CreditCardPayment, GooglePayPayment, InvoicePayment, UserCreditPayment. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of PaymentDetails given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PaymentDetails
     * @throws IOException if the JSON string is invalid with respect to PaymentDetails
     */
    public static PaymentDetails fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PaymentDetails.class);
    }

    /**
     * Convert an instance of PaymentDetails to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

