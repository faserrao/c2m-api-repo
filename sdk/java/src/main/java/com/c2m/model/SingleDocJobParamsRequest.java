/*
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.c2m.model;

import java.util.Objects;
import com.c2m.model.DocumentSourceIdentifier;
import com.c2m.model.JobOptions;
import com.c2m.model.PaymentDetails;
import com.c2m.model.RecipientAddressSource;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.c2m.JSON;

/**
 * SingleDocJobParamsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-08T10:35:42.292913-04:00[America/New_York]", comments = "Generator version: 7.15.0")
public class SingleDocJobParamsRequest {
  public static final String SERIALIZED_NAME_DOCUMENT_SOURCE_IDENTIFIER = "documentSourceIdentifier";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_SOURCE_IDENTIFIER)
  @javax.annotation.Nonnull
  private DocumentSourceIdentifier documentSourceIdentifier;

  public static final String SERIALIZED_NAME_RECIPIENT_ADDRESS_SOURCES = "recipientAddressSources";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ADDRESS_SOURCES)
  @javax.annotation.Nonnull
  private List<RecipientAddressSource> recipientAddressSources = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_OPTIONS = "jobOptions";
  @SerializedName(SERIALIZED_NAME_JOB_OPTIONS)
  @javax.annotation.Nonnull
  private JobOptions jobOptions;

  public static final String SERIALIZED_NAME_PAYMENT_DETAILS = "paymentDetails";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DETAILS)
  @javax.annotation.Nullable
  private PaymentDetails paymentDetails;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public SingleDocJobParamsRequest() {
  }

  public SingleDocJobParamsRequest documentSourceIdentifier(@javax.annotation.Nonnull DocumentSourceIdentifier documentSourceIdentifier) {
    this.documentSourceIdentifier = documentSourceIdentifier;
    return this;
  }

  /**
   * Get documentSourceIdentifier
   * @return documentSourceIdentifier
   */
  @javax.annotation.Nonnull
  public DocumentSourceIdentifier getDocumentSourceIdentifier() {
    return documentSourceIdentifier;
  }

  public void setDocumentSourceIdentifier(@javax.annotation.Nonnull DocumentSourceIdentifier documentSourceIdentifier) {
    this.documentSourceIdentifier = documentSourceIdentifier;
  }


  public SingleDocJobParamsRequest recipientAddressSources(@javax.annotation.Nonnull List<RecipientAddressSource> recipientAddressSources) {
    this.recipientAddressSources = recipientAddressSources;
    return this;
  }

  public SingleDocJobParamsRequest addRecipientAddressSourcesItem(RecipientAddressSource recipientAddressSourcesItem) {
    if (this.recipientAddressSources == null) {
      this.recipientAddressSources = new ArrayList<>();
    }
    this.recipientAddressSources.add(recipientAddressSourcesItem);
    return this;
  }

  /**
   * Get recipientAddressSources
   * @return recipientAddressSources
   */
  @javax.annotation.Nonnull
  public List<RecipientAddressSource> getRecipientAddressSources() {
    return recipientAddressSources;
  }

  public void setRecipientAddressSources(@javax.annotation.Nonnull List<RecipientAddressSource> recipientAddressSources) {
    this.recipientAddressSources = recipientAddressSources;
  }


  public SingleDocJobParamsRequest jobOptions(@javax.annotation.Nonnull JobOptions jobOptions) {
    this.jobOptions = jobOptions;
    return this;
  }

  /**
   * Get jobOptions
   * @return jobOptions
   */
  @javax.annotation.Nonnull
  public JobOptions getJobOptions() {
    return jobOptions;
  }

  public void setJobOptions(@javax.annotation.Nonnull JobOptions jobOptions) {
    this.jobOptions = jobOptions;
  }


  public SingleDocJobParamsRequest paymentDetails(@javax.annotation.Nullable PaymentDetails paymentDetails) {
    this.paymentDetails = paymentDetails;
    return this;
  }

  /**
   * Get paymentDetails
   * @return paymentDetails
   */
  @javax.annotation.Nullable
  public PaymentDetails getPaymentDetails() {
    return paymentDetails;
  }

  public void setPaymentDetails(@javax.annotation.Nullable PaymentDetails paymentDetails) {
    this.paymentDetails = paymentDetails;
  }


  public SingleDocJobParamsRequest tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public SingleDocJobParamsRequest addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleDocJobParamsRequest singleDocJobParamsRequest = (SingleDocJobParamsRequest) o;
    return Objects.equals(this.documentSourceIdentifier, singleDocJobParamsRequest.documentSourceIdentifier) &&
        Objects.equals(this.recipientAddressSources, singleDocJobParamsRequest.recipientAddressSources) &&
        Objects.equals(this.jobOptions, singleDocJobParamsRequest.jobOptions) &&
        Objects.equals(this.paymentDetails, singleDocJobParamsRequest.paymentDetails) &&
        Objects.equals(this.tags, singleDocJobParamsRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentSourceIdentifier, recipientAddressSources, jobOptions, paymentDetails, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleDocJobParamsRequest {\n");
    sb.append("    documentSourceIdentifier: ").append(toIndentedString(documentSourceIdentifier)).append("\n");
    sb.append("    recipientAddressSources: ").append(toIndentedString(recipientAddressSources)).append("\n");
    sb.append("    jobOptions: ").append(toIndentedString(jobOptions)).append("\n");
    sb.append("    paymentDetails: ").append(toIndentedString(paymentDetails)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("documentSourceIdentifier", "recipientAddressSources", "jobOptions", "paymentDetails", "tags"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("documentSourceIdentifier", "recipientAddressSources", "jobOptions"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SingleDocJobParamsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleDocJobParamsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleDocJobParamsRequest is not found in the empty JSON string", SingleDocJobParamsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleDocJobParamsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleDocJobParamsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SingleDocJobParamsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `documentSourceIdentifier`
      DocumentSourceIdentifier.validateJsonElement(jsonObj.get("documentSourceIdentifier"));
      // ensure the json data is an array
      if (!jsonObj.get("recipientAddressSources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientAddressSources` to be an array in the JSON string but got `%s`", jsonObj.get("recipientAddressSources").toString()));
      }

      JsonArray jsonArrayrecipientAddressSources = jsonObj.getAsJsonArray("recipientAddressSources");
      // validate the required field `recipientAddressSources` (array)
      for (int i = 0; i < jsonArrayrecipientAddressSources.size(); i++) {
        RecipientAddressSource.validateJsonElement(jsonArrayrecipientAddressSources.get(i));
      };
      // validate the required field `jobOptions`
      JobOptions.validateJsonElement(jsonObj.get("jobOptions"));
      // validate the optional field `paymentDetails`
      if (jsonObj.get("paymentDetails") != null && !jsonObj.get("paymentDetails").isJsonNull()) {
        PaymentDetails.validateJsonElement(jsonObj.get("paymentDetails"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleDocJobParamsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleDocJobParamsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleDocJobParamsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleDocJobParamsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleDocJobParamsRequest>() {
           @Override
           public void write(JsonWriter out, SingleDocJobParamsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleDocJobParamsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SingleDocJobParamsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SingleDocJobParamsRequest
   * @throws IOException if the JSON string is invalid with respect to SingleDocJobParamsRequest
   */
  public static SingleDocJobParamsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleDocJobParamsRequest.class);
  }

  /**
   * Convert an instance of SingleDocJobParamsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

