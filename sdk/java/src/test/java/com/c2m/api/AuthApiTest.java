/*
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.c2m.api;

import com.c2m.ApiException;
import com.c2m.model.AuthError;
import com.c2m.model.LongTokenRequest;
import com.c2m.model.LongTokenResponse;
import com.c2m.model.ShortTokenRequest;
import com.c2m.model.ShortTokenResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Disabled
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    /**
     * Issue or rotate a long-term token
     *
     * Issues a long-term token (e.g., 30-90 days) for automation or server-to-server use. Requires step-up authentication. Choose one of the supported grant types:  - &#x60;client_credentials&#x60; + &#x60;client_secret&#x60; - &#x60;client_credentials&#x60; + one-time &#x60;otp_code&#x60; - &#x60;assertion&#x60; (e.g., signed JWT by your private key) - Or an existing short-term token with the &#x60;tokens:write&#x60; scope  Only one mechanism is required per call. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueLongTermTokenTest() throws ApiException {
        LongTokenRequest longTokenRequest = null;
        LongTokenResponse response = api.issueLongTermToken(longTokenRequest);
        // TODO: test validations
    }

    /**
     * Issue a short-term access token
     *
     * Exchange a valid long-term token for a short-lived JWT (e.g., 15 minutes). The long-term token must be sent in the Authorization header as &#x60;Bearer &lt;long_token&gt;&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueShortTermTokenTest() throws ApiException {
        ShortTokenRequest shortTokenRequest = null;
        ShortTokenResponse response = api.issueShortTermToken(shortTokenRequest);
        // TODO: test validations
    }

    /**
     * Revoke a token
     *
     * Revokes a short- or long-term token by its &#x60;tokenId&#x60;. Idempotent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeTokenTest() throws ApiException {
        String tokenId = null;
        api.revokeToken(tokenId);
        // TODO: test validations
    }

}
