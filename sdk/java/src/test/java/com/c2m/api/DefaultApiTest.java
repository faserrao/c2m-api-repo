/*
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.c2m.api;

import com.c2m.ApiException;
import com.c2m.model.MergeMultiDocParamsRequest;
import com.c2m.model.MergeMultiDocWithTemplateParamsRequest;
import com.c2m.model.MultiPdfWithCaptureParamsRequest;
import com.c2m.model.SingleDocJobParamsRequest;
import com.c2m.model.SplitPdfParamsRequest;
import com.c2m.model.SplitPdfWithCaptureParamsRequest;
import com.c2m.model.StandardResponse;
import com.c2m.model.SubmitMultiDocParamsRequest;
import com.c2m.model.SubmitMultiDocWithTemplateParamsRequest;
import com.c2m.model.SubmitSingleDocWithTemplateParamsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Operation for /jobs/multi-doc-merge
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeMultiDocParamsTest() throws ApiException {
        MergeMultiDocParamsRequest mergeMultiDocParamsRequest = null;
        StandardResponse response = api.mergeMultiDocParams(mergeMultiDocParamsRequest);
        // TODO: test validations
    }

    /**
     * Operation for /jobs/multi-doc-merge-job-template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeMultiDocWithTemplateParamsTest() throws ApiException {
        MergeMultiDocWithTemplateParamsRequest mergeMultiDocWithTemplateParamsRequest = null;
        StandardResponse response = api.mergeMultiDocWithTemplateParams(mergeMultiDocWithTemplateParamsRequest);
        // TODO: test validations
    }

    /**
     * Operation for /jobs/multi-pdf-address-capture
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void multiPdfWithCaptureParamsTest() throws ApiException {
        MultiPdfWithCaptureParamsRequest multiPdfWithCaptureParamsRequest = null;
        StandardResponse response = api.multiPdfWithCaptureParams(multiPdfWithCaptureParamsRequest);
        // TODO: test validations
    }

    /**
     * Operation for /jobs/single-doc
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void singleDocJobParamsTest() throws ApiException {
        SingleDocJobParamsRequest singleDocJobParamsRequest = null;
        StandardResponse response = api.singleDocJobParams(singleDocJobParamsRequest);
        // TODO: test validations
    }

    /**
     * Operation for /jobs/single-pdf-split
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void splitPdfParamsTest() throws ApiException {
        SplitPdfParamsRequest splitPdfParamsRequest = null;
        StandardResponse response = api.splitPdfParams(splitPdfParamsRequest);
        // TODO: test validations
    }

    /**
     * Operation for /jobs/single-pdf-split-addressCapture
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void splitPdfWithCaptureParamsTest() throws ApiException {
        SplitPdfWithCaptureParamsRequest splitPdfWithCaptureParamsRequest = null;
        StandardResponse response = api.splitPdfWithCaptureParams(splitPdfWithCaptureParamsRequest);
        // TODO: test validations
    }

    /**
     * Operation for /jobs/multi-doc
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitMultiDocParamsTest() throws ApiException {
        SubmitMultiDocParamsRequest submitMultiDocParamsRequest = null;
        StandardResponse response = api.submitMultiDocParams(submitMultiDocParamsRequest);
        // TODO: test validations
    }

    /**
     * Operation for /jobs/multi-docs-job-template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitMultiDocWithTemplateParamsTest() throws ApiException {
        SubmitMultiDocWithTemplateParamsRequest submitMultiDocWithTemplateParamsRequest = null;
        StandardResponse response = api.submitMultiDocWithTemplateParams(submitMultiDocWithTemplateParamsRequest);
        // TODO: test validations
    }

    /**
     * Operation for /jobs/single-doc-job-template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitSingleDocWithTemplateParamsTest() throws ApiException {
        SubmitSingleDocWithTemplateParamsRequest submitSingleDocWithTemplateParamsRequest = null;
        StandardResponse response = api.submitSingleDocWithTemplateParams(submitSingleDocWithTemplateParamsRequest);
        // TODO: test validations
    }

}
