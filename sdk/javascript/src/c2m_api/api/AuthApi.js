/**
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthError from '../model/AuthError';
import LongTokenRequest from '../model/LongTokenRequest';
import LongTokenResponse from '../model/LongTokenResponse';
import ShortTokenRequest from '../model/ShortTokenRequest';
import ShortTokenResponse from '../model/ShortTokenResponse';

/**
* Auth service.
* @module c2m_api/api/AuthApi
* @version 2.0.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:c2m_api/api/AuthApi
    * @class
    * @param {module:c2m_api/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:c2m_api/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the issueLongTermToken operation.
     * @callback module:c2m_api/api/AuthApi~issueLongTermTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:c2m_api/model/LongTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issue or rotate a long-term token
     * Issues a long-term token (e.g., 30-90 days) for automation or server-to-server use. Requires step-up authentication. Choose one of the supported grant types:  - `client_credentials` + `client_secret` - `client_credentials` + one-time `otp_code` - `assertion` (e.g., signed JWT by your private key) - Or an existing short-term token with the `tokens:write` scope  Only one mechanism is required per call. 
     * @param {module:c2m_api/model/LongTokenRequest} longTokenRequest 
     * @param {module:c2m_api/api/AuthApi~issueLongTermTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:c2m_api/model/LongTokenResponse}
     */
    issueLongTermToken(longTokenRequest, callback) {
      let postBody = longTokenRequest;
      // verify the required parameter 'longTokenRequest' is set
      if (longTokenRequest === undefined || longTokenRequest === null) {
        throw new Error("Missing the required parameter 'longTokenRequest' when calling issueLongTermToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ShortTokenAuth', 'ClientKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LongTokenResponse;
      return this.apiClient.callApi(
        '/auth/tokens/long', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueShortTermToken operation.
     * @callback module:c2m_api/api/AuthApi~issueShortTermTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:c2m_api/model/ShortTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issue a short-term access token
     * Exchange a valid long-term token for a short-lived JWT (e.g., 15 minutes). The long-term token must be sent in the Authorization header as `Bearer <long_token>`. 
     * @param {Object} opts Optional parameters
     * @param {module:c2m_api/model/ShortTokenRequest} [shortTokenRequest] 
     * @param {module:c2m_api/api/AuthApi~issueShortTermTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:c2m_api/model/ShortTokenResponse}
     */
    issueShortTermToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['shortTokenRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['LongTokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShortTokenResponse;
      return this.apiClient.callApi(
        '/auth/tokens/short', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeToken operation.
     * @callback module:c2m_api/api/AuthApi~revokeTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke a token
     * Revokes a short- or long-term token by its `tokenId`. Idempotent.
     * @param {String} tokenId The token ID to revoke
     * @param {module:c2m_api/api/AuthApi~revokeTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeToken(tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling revokeToken");
      }

      let pathParams = {
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['LongTokenAuth', 'ShortTokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/tokens/{tokenId}/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
