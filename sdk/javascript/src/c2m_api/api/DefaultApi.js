/**
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MergeMultiDocParamsRequest from '../model/MergeMultiDocParamsRequest';
import MergeMultiDocWithTemplateParamsRequest from '../model/MergeMultiDocWithTemplateParamsRequest';
import MultiPdfWithCaptureParamsRequest from '../model/MultiPdfWithCaptureParamsRequest';
import SingleDocJobParamsRequest from '../model/SingleDocJobParamsRequest';
import SplitPdfParamsRequest from '../model/SplitPdfParamsRequest';
import SplitPdfWithCaptureParamsRequest from '../model/SplitPdfWithCaptureParamsRequest';
import StandardResponse from '../model/StandardResponse';
import SubmitMultiDocParamsRequest from '../model/SubmitMultiDocParamsRequest';
import SubmitMultiDocWithTemplateParamsRequest from '../model/SubmitMultiDocWithTemplateParamsRequest';
import SubmitSingleDocWithTemplateParamsRequest from '../model/SubmitSingleDocWithTemplateParamsRequest';

/**
* Default service.
* @module c2m_api/api/DefaultApi
* @version 2.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:c2m_api/api/DefaultApi
    * @class
    * @param {module:c2m_api/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:c2m_api/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mergeMultiDocParams operation.
     * @callback module:c2m_api/api/DefaultApi~mergeMultiDocParamsCallback
     * @param {String} error Error message, if any.
     * @param {module:c2m_api/model/StandardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operation for /jobs/multi-doc-merge
     * @param {module:c2m_api/model/MergeMultiDocParamsRequest} mergeMultiDocParamsRequest 
     * @param {module:c2m_api/api/DefaultApi~mergeMultiDocParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:c2m_api/model/StandardResponse}
     */
    mergeMultiDocParams(mergeMultiDocParamsRequest, callback) {
      let postBody = mergeMultiDocParamsRequest;
      // verify the required parameter 'mergeMultiDocParamsRequest' is set
      if (mergeMultiDocParamsRequest === undefined || mergeMultiDocParamsRequest === null) {
        throw new Error("Missing the required parameter 'mergeMultiDocParamsRequest' when calling mergeMultiDocParams");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StandardResponse;
      return this.apiClient.callApi(
        '/jobs/multi-doc-merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mergeMultiDocWithTemplateParams operation.
     * @callback module:c2m_api/api/DefaultApi~mergeMultiDocWithTemplateParamsCallback
     * @param {String} error Error message, if any.
     * @param {module:c2m_api/model/StandardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operation for /jobs/multi-doc-merge-job-template
     * @param {module:c2m_api/model/MergeMultiDocWithTemplateParamsRequest} mergeMultiDocWithTemplateParamsRequest 
     * @param {module:c2m_api/api/DefaultApi~mergeMultiDocWithTemplateParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:c2m_api/model/StandardResponse}
     */
    mergeMultiDocWithTemplateParams(mergeMultiDocWithTemplateParamsRequest, callback) {
      let postBody = mergeMultiDocWithTemplateParamsRequest;
      // verify the required parameter 'mergeMultiDocWithTemplateParamsRequest' is set
      if (mergeMultiDocWithTemplateParamsRequest === undefined || mergeMultiDocWithTemplateParamsRequest === null) {
        throw new Error("Missing the required parameter 'mergeMultiDocWithTemplateParamsRequest' when calling mergeMultiDocWithTemplateParams");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StandardResponse;
      return this.apiClient.callApi(
        '/jobs/multi-doc-merge-job-template', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the multiPdfWithCaptureParams operation.
     * @callback module:c2m_api/api/DefaultApi~multiPdfWithCaptureParamsCallback
     * @param {String} error Error message, if any.
     * @param {module:c2m_api/model/StandardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operation for /jobs/multi-pdf-address-capture
     * @param {module:c2m_api/model/MultiPdfWithCaptureParamsRequest} multiPdfWithCaptureParamsRequest 
     * @param {module:c2m_api/api/DefaultApi~multiPdfWithCaptureParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:c2m_api/model/StandardResponse}
     */
    multiPdfWithCaptureParams(multiPdfWithCaptureParamsRequest, callback) {
      let postBody = multiPdfWithCaptureParamsRequest;
      // verify the required parameter 'multiPdfWithCaptureParamsRequest' is set
      if (multiPdfWithCaptureParamsRequest === undefined || multiPdfWithCaptureParamsRequest === null) {
        throw new Error("Missing the required parameter 'multiPdfWithCaptureParamsRequest' when calling multiPdfWithCaptureParams");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StandardResponse;
      return this.apiClient.callApi(
        '/jobs/multi-pdf-address-capture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the singleDocJobParams operation.
     * @callback module:c2m_api/api/DefaultApi~singleDocJobParamsCallback
     * @param {String} error Error message, if any.
     * @param {module:c2m_api/model/StandardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operation for /jobs/single-doc
     * @param {module:c2m_api/model/SingleDocJobParamsRequest} singleDocJobParamsRequest 
     * @param {module:c2m_api/api/DefaultApi~singleDocJobParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:c2m_api/model/StandardResponse}
     */
    singleDocJobParams(singleDocJobParamsRequest, callback) {
      let postBody = singleDocJobParamsRequest;
      // verify the required parameter 'singleDocJobParamsRequest' is set
      if (singleDocJobParamsRequest === undefined || singleDocJobParamsRequest === null) {
        throw new Error("Missing the required parameter 'singleDocJobParamsRequest' when calling singleDocJobParams");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StandardResponse;
      return this.apiClient.callApi(
        '/jobs/single-doc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the splitPdfParams operation.
     * @callback module:c2m_api/api/DefaultApi~splitPdfParamsCallback
     * @param {String} error Error message, if any.
     * @param {module:c2m_api/model/StandardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operation for /jobs/single-pdf-split
     * @param {module:c2m_api/model/SplitPdfParamsRequest} splitPdfParamsRequest 
     * @param {module:c2m_api/api/DefaultApi~splitPdfParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:c2m_api/model/StandardResponse}
     */
    splitPdfParams(splitPdfParamsRequest, callback) {
      let postBody = splitPdfParamsRequest;
      // verify the required parameter 'splitPdfParamsRequest' is set
      if (splitPdfParamsRequest === undefined || splitPdfParamsRequest === null) {
        throw new Error("Missing the required parameter 'splitPdfParamsRequest' when calling splitPdfParams");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StandardResponse;
      return this.apiClient.callApi(
        '/jobs/single-pdf-split', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the splitPdfWithCaptureParams operation.
     * @callback module:c2m_api/api/DefaultApi~splitPdfWithCaptureParamsCallback
     * @param {String} error Error message, if any.
     * @param {module:c2m_api/model/StandardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operation for /jobs/single-pdf-split-addressCapture
     * @param {module:c2m_api/model/SplitPdfWithCaptureParamsRequest} splitPdfWithCaptureParamsRequest 
     * @param {module:c2m_api/api/DefaultApi~splitPdfWithCaptureParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:c2m_api/model/StandardResponse}
     */
    splitPdfWithCaptureParams(splitPdfWithCaptureParamsRequest, callback) {
      let postBody = splitPdfWithCaptureParamsRequest;
      // verify the required parameter 'splitPdfWithCaptureParamsRequest' is set
      if (splitPdfWithCaptureParamsRequest === undefined || splitPdfWithCaptureParamsRequest === null) {
        throw new Error("Missing the required parameter 'splitPdfWithCaptureParamsRequest' when calling splitPdfWithCaptureParams");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StandardResponse;
      return this.apiClient.callApi(
        '/jobs/single-pdf-split-addressCapture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitMultiDocParams operation.
     * @callback module:c2m_api/api/DefaultApi~submitMultiDocParamsCallback
     * @param {String} error Error message, if any.
     * @param {module:c2m_api/model/StandardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operation for /jobs/multi-doc
     * @param {module:c2m_api/model/SubmitMultiDocParamsRequest} submitMultiDocParamsRequest 
     * @param {module:c2m_api/api/DefaultApi~submitMultiDocParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:c2m_api/model/StandardResponse}
     */
    submitMultiDocParams(submitMultiDocParamsRequest, callback) {
      let postBody = submitMultiDocParamsRequest;
      // verify the required parameter 'submitMultiDocParamsRequest' is set
      if (submitMultiDocParamsRequest === undefined || submitMultiDocParamsRequest === null) {
        throw new Error("Missing the required parameter 'submitMultiDocParamsRequest' when calling submitMultiDocParams");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StandardResponse;
      return this.apiClient.callApi(
        '/jobs/multi-doc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitMultiDocWithTemplateParams operation.
     * @callback module:c2m_api/api/DefaultApi~submitMultiDocWithTemplateParamsCallback
     * @param {String} error Error message, if any.
     * @param {module:c2m_api/model/StandardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operation for /jobs/multi-docs-job-template
     * @param {module:c2m_api/model/SubmitMultiDocWithTemplateParamsRequest} submitMultiDocWithTemplateParamsRequest 
     * @param {module:c2m_api/api/DefaultApi~submitMultiDocWithTemplateParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:c2m_api/model/StandardResponse}
     */
    submitMultiDocWithTemplateParams(submitMultiDocWithTemplateParamsRequest, callback) {
      let postBody = submitMultiDocWithTemplateParamsRequest;
      // verify the required parameter 'submitMultiDocWithTemplateParamsRequest' is set
      if (submitMultiDocWithTemplateParamsRequest === undefined || submitMultiDocWithTemplateParamsRequest === null) {
        throw new Error("Missing the required parameter 'submitMultiDocWithTemplateParamsRequest' when calling submitMultiDocWithTemplateParams");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StandardResponse;
      return this.apiClient.callApi(
        '/jobs/multi-docs-job-template', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitSingleDocWithTemplateParams operation.
     * @callback module:c2m_api/api/DefaultApi~submitSingleDocWithTemplateParamsCallback
     * @param {String} error Error message, if any.
     * @param {module:c2m_api/model/StandardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operation for /jobs/single-doc-job-template
     * @param {module:c2m_api/model/SubmitSingleDocWithTemplateParamsRequest} submitSingleDocWithTemplateParamsRequest 
     * @param {module:c2m_api/api/DefaultApi~submitSingleDocWithTemplateParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:c2m_api/model/StandardResponse}
     */
    submitSingleDocWithTemplateParams(submitSingleDocWithTemplateParamsRequest, callback) {
      let postBody = submitSingleDocWithTemplateParamsRequest;
      // verify the required parameter 'submitSingleDocWithTemplateParamsRequest' is set
      if (submitSingleDocWithTemplateParamsRequest === undefined || submitSingleDocWithTemplateParamsRequest === null) {
        throw new Error("Missing the required parameter 'submitSingleDocWithTemplateParamsRequest' when calling submitSingleDocWithTemplateParams");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StandardResponse;
      return this.apiClient.callApi(
        '/jobs/single-doc-job-template', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
