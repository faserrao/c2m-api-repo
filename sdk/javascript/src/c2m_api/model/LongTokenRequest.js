/**
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LongTokenRequest model module.
 * @module c2m_api/model/LongTokenRequest
 * @version 2.0.0
 */
class LongTokenRequest {
    /**
     * Constructs a new <code>LongTokenRequest</code>.
     * One of several credential mechanisms must be provided.
     * @alias module:c2m_api/model/LongTokenRequest
     * @param grantType {module:c2m_api/model/LongTokenRequest.GrantTypeEnum} The authentication grant type
     * @param clientId {String} Client identifier issued by Click2Mail
     */
    constructor(grantType, clientId) { 
        
        LongTokenRequest.initialize(this, grantType, clientId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, grantType, clientId) { 
        obj['grant_type'] = grantType;
        obj['client_id'] = clientId;
    }

    /**
     * Constructs a <code>LongTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:c2m_api/model/LongTokenRequest} obj Optional instance to populate.
     * @return {module:c2m_api/model/LongTokenRequest} The populated <code>LongTokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LongTokenRequest();

            if (data.hasOwnProperty('grant_type')) {
                obj['grant_type'] = ApiClient.convertToType(data['grant_type'], 'String');
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('client_secret')) {
                obj['client_secret'] = ApiClient.convertToType(data['client_secret'], 'String');
            }
            if (data.hasOwnProperty('otp_code')) {
                obj['otp_code'] = ApiClient.convertToType(data['otp_code'], 'String');
            }
            if (data.hasOwnProperty('assertion_type')) {
                obj['assertion_type'] = ApiClient.convertToType(data['assertion_type'], 'String');
            }
            if (data.hasOwnProperty('assertion')) {
                obj['assertion'] = ApiClient.convertToType(data['assertion'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('ttl_seconds')) {
                obj['ttl_seconds'] = ApiClient.convertToType(data['ttl_seconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LongTokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LongTokenRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LongTokenRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['grant_type'] && !(typeof data['grant_type'] === 'string' || data['grant_type'] instanceof String)) {
            throw new Error("Expected the field `grant_type` to be a primitive type in the JSON string but got " + data['grant_type']);
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['client_secret'] && !(typeof data['client_secret'] === 'string' || data['client_secret'] instanceof String)) {
            throw new Error("Expected the field `client_secret` to be a primitive type in the JSON string but got " + data['client_secret']);
        }
        // ensure the json data is a string
        if (data['otp_code'] && !(typeof data['otp_code'] === 'string' || data['otp_code'] instanceof String)) {
            throw new Error("Expected the field `otp_code` to be a primitive type in the JSON string but got " + data['otp_code']);
        }
        // ensure the json data is a string
        if (data['assertion_type'] && !(typeof data['assertion_type'] === 'string' || data['assertion_type'] instanceof String)) {
            throw new Error("Expected the field `assertion_type` to be a primitive type in the JSON string but got " + data['assertion_type']);
        }
        // ensure the json data is a string
        if (data['assertion'] && !(typeof data['assertion'] === 'string' || data['assertion'] instanceof String)) {
            throw new Error("Expected the field `assertion` to be a primitive type in the JSON string but got " + data['assertion']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }

        return true;
    }


}

LongTokenRequest.RequiredProperties = ["grant_type", "client_id"];

/**
 * The authentication grant type
 * @member {module:c2m_api/model/LongTokenRequest.GrantTypeEnum} grant_type
 */
LongTokenRequest.prototype['grant_type'] = undefined;

/**
 * Client identifier issued by Click2Mail
 * @member {String} client_id
 */
LongTokenRequest.prototype['client_id'] = undefined;

/**
 * Required if using client_credentials with secret
 * @member {String} client_secret
 */
LongTokenRequest.prototype['client_secret'] = undefined;

/**
 * Required if your policy mandates OTP for issuance
 * @member {String} otp_code
 */
LongTokenRequest.prototype['otp_code'] = undefined;

/**
 * Required when grant_type=assertion
 * @member {String} assertion_type
 */
LongTokenRequest.prototype['assertion_type'] = undefined;

/**
 * Signed JWT or other accepted assertion
 * @member {String} assertion
 */
LongTokenRequest.prototype['assertion'] = undefined;

/**
 * Scopes to assign to the long-term token
 * @member {Array.<String>} scopes
 */
LongTokenRequest.prototype['scopes'] = undefined;

/**
 * Requested lifetime (1 hour - 90 days). Server may clamp.
 * @member {Number} ttl_seconds
 */
LongTokenRequest.prototype['ttl_seconds'] = undefined;





/**
 * Allowed values for the <code>grant_type</code> property.
 * @enum {String}
 * @readonly
 */
LongTokenRequest['GrantTypeEnum'] = {

    /**
     * value: "client_credentials"
     * @const
     */
    "client_credentials": "client_credentials",

    /**
     * value: "assertion"
     * @const
     */
    "assertion": "assertion"
};



export default LongTokenRequest;

