/**
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RecipientAddress model module.
 * @module c2m_api/model/RecipientAddress
 * @version 2.0.0
 */
class RecipientAddress {
    /**
     * Constructs a new <code>RecipientAddress</code>.
     * @alias module:c2m_api/model/RecipientAddress
     * @param firstName {String} 
     * @param lastName {String} 
     * @param address1 {String} 
     * @param city {String} 
     * @param state {String} 
     * @param zip {String} 
     * @param country {String} 
     */
    constructor(firstName, lastName, address1, city, state, zip, country) { 
        
        RecipientAddress.initialize(this, firstName, lastName, address1, city, state, zip, country);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, firstName, lastName, address1, city, state, zip, country) { 
        obj['firstName'] = firstName;
        obj['lastName'] = lastName;
        obj['address1'] = address1;
        obj['city'] = city;
        obj['state'] = state;
        obj['zip'] = zip;
        obj['country'] = country;
    }

    /**
     * Constructs a <code>RecipientAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:c2m_api/model/RecipientAddress} obj Optional instance to populate.
     * @return {module:c2m_api/model/RecipientAddress} The populated <code>RecipientAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecipientAddress();

            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('address1')) {
                obj['address1'] = ApiClient.convertToType(data['address1'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('nickName')) {
                obj['nickName'] = ApiClient.convertToType(data['nickName'], 'String');
            }
            if (data.hasOwnProperty('address2')) {
                obj['address2'] = ApiClient.convertToType(data['address2'], 'String');
            }
            if (data.hasOwnProperty('address3')) {
                obj['address3'] = ApiClient.convertToType(data['address3'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecipientAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecipientAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RecipientAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['address1'] && !(typeof data['address1'] === 'string' || data['address1'] instanceof String)) {
            throw new Error("Expected the field `address1` to be a primitive type in the JSON string but got " + data['address1']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['nickName'] && !(typeof data['nickName'] === 'string' || data['nickName'] instanceof String)) {
            throw new Error("Expected the field `nickName` to be a primitive type in the JSON string but got " + data['nickName']);
        }
        // ensure the json data is a string
        if (data['address2'] && !(typeof data['address2'] === 'string' || data['address2'] instanceof String)) {
            throw new Error("Expected the field `address2` to be a primitive type in the JSON string but got " + data['address2']);
        }
        // ensure the json data is a string
        if (data['address3'] && !(typeof data['address3'] === 'string' || data['address3'] instanceof String)) {
            throw new Error("Expected the field `address3` to be a primitive type in the JSON string but got " + data['address3']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }

        return true;
    }


}

RecipientAddress.RequiredProperties = ["firstName", "lastName", "address1", "city", "state", "zip", "country"];

/**
 * @member {String} firstName
 */
RecipientAddress.prototype['firstName'] = undefined;

/**
 * @member {String} lastName
 */
RecipientAddress.prototype['lastName'] = undefined;

/**
 * @member {String} address1
 */
RecipientAddress.prototype['address1'] = undefined;

/**
 * @member {String} city
 */
RecipientAddress.prototype['city'] = undefined;

/**
 * @member {String} state
 */
RecipientAddress.prototype['state'] = undefined;

/**
 * @member {String} zip
 */
RecipientAddress.prototype['zip'] = undefined;

/**
 * @member {String} country
 */
RecipientAddress.prototype['country'] = undefined;

/**
 * @member {String} nickName
 */
RecipientAddress.prototype['nickName'] = undefined;

/**
 * @member {String} address2
 */
RecipientAddress.prototype['address2'] = undefined;

/**
 * @member {String} address3
 */
RecipientAddress.prototype['address3'] = undefined;

/**
 * @member {String} phoneNumber
 */
RecipientAddress.prototype['phoneNumber'] = undefined;






export default RecipientAddress;

