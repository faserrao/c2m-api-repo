/**
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecipientAddress from './RecipientAddress';

/**
 * The RecipientAddressSource model module.
 * @module c2m_api/model/RecipientAddressSource
 * @version 2.0.0
 */
class RecipientAddressSource {
    /**
     * Constructs a new <code>RecipientAddressSource</code>.
     * @alias module:c2m_api/model/RecipientAddressSource
     * @param {(module:c2m_api/model/Number|module:c2m_api/model/RecipientAddress)} instance The actual instance to initialize RecipientAddressSource.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "RecipientAddress") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RecipientAddress.validateJSON(instance); // throw an exception if no match
                // create RecipientAddress from JS object
                this.actualInstance = RecipientAddress.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RecipientAddress
            errorMessages.push("Failed to construct RecipientAddress: " + err)
        }

        try {
            // validate integer
            if (!(typeof instance === 'number' && instance % 1 === 0)) {
                throw new Error("Invalid value. Must be integer. Input: " + JSON.stringify(instance));
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into Number
            errorMessages.push("Failed to construct Number: " + err)
        }

        try {
            // validate integer
            if (!(typeof instance === 'number' && instance % 1 === 0)) {
                throw new Error("Invalid value. Must be integer. Input: " + JSON.stringify(instance));
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into Number
            errorMessages.push("Failed to construct Number: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `RecipientAddressSource` with oneOf schemas Number, RecipientAddress. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `RecipientAddressSource` with oneOf schemas Number, RecipientAddress. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>RecipientAddressSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:c2m_api/model/RecipientAddressSource} obj Optional instance to populate.
     * @return {module:c2m_api/model/RecipientAddressSource} The populated <code>RecipientAddressSource</code> instance.
     */
    static constructFromObject(data, obj) {
        return new RecipientAddressSource(data);
    }

    /**
     * Gets the actual instance, which can be <code>Number</code>, <code>RecipientAddress</code>.
     * @return {(module:c2m_api/model/Number|module:c2m_api/model/RecipientAddress)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Number</code>, <code>RecipientAddress</code>.
     * @param {(module:c2m_api/model/Number|module:c2m_api/model/RecipientAddress)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = RecipientAddressSource.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of RecipientAddressSource from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:c2m_api/model/RecipientAddressSource} An instance of RecipientAddressSource.
     */
    static fromJSON = function(json_string){
        return RecipientAddressSource.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} firstName
 */
RecipientAddressSource.prototype['firstName'] = undefined;

/**
 * @member {String} lastName
 */
RecipientAddressSource.prototype['lastName'] = undefined;

/**
 * @member {String} address1
 */
RecipientAddressSource.prototype['address1'] = undefined;

/**
 * @member {String} city
 */
RecipientAddressSource.prototype['city'] = undefined;

/**
 * @member {String} state
 */
RecipientAddressSource.prototype['state'] = undefined;

/**
 * @member {String} zip
 */
RecipientAddressSource.prototype['zip'] = undefined;

/**
 * @member {String} country
 */
RecipientAddressSource.prototype['country'] = undefined;

/**
 * @member {String} nickName
 */
RecipientAddressSource.prototype['nickName'] = undefined;

/**
 * @member {String} address2
 */
RecipientAddressSource.prototype['address2'] = undefined;

/**
 * @member {String} address3
 */
RecipientAddressSource.prototype['address3'] = undefined;

/**
 * @member {String} phoneNumber
 */
RecipientAddressSource.prototype['phoneNumber'] = undefined;


RecipientAddressSource.OneOf = ["Number", "RecipientAddress"];

export default RecipientAddressSource;

