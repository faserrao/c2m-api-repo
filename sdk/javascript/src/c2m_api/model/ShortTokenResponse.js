/**
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShortTokenResponse model module.
 * @module c2m_api/model/ShortTokenResponse
 * @version 2.0.0
 */
class ShortTokenResponse {
    /**
     * Constructs a new <code>ShortTokenResponse</code>.
     * @alias module:c2m_api/model/ShortTokenResponse
     * @param tokenType {module:c2m_api/model/ShortTokenResponse.TokenTypeEnum} 
     * @param accessToken {String} Short-lived JWT
     * @param expiresIn {Number} Lifetime in seconds (e.g., 900 for 15 minutes)
     * @param expiresAt {Date} ISO 8601 timestamp of expiration
     */
    constructor(tokenType, accessToken, expiresIn, expiresAt) { 
        
        ShortTokenResponse.initialize(this, tokenType, accessToken, expiresIn, expiresAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tokenType, accessToken, expiresIn, expiresAt) { 
        obj['token_type'] = tokenType;
        obj['access_token'] = accessToken;
        obj['expires_in'] = expiresIn;
        obj['expires_at'] = expiresAt;
    }

    /**
     * Constructs a <code>ShortTokenResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:c2m_api/model/ShortTokenResponse} obj Optional instance to populate.
     * @return {module:c2m_api/model/ShortTokenResponse} The populated <code>ShortTokenResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShortTokenResponse();

            if (data.hasOwnProperty('token_type')) {
                obj['token_type'] = ApiClient.convertToType(data['token_type'], 'String');
            }
            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('expires_in')) {
                obj['expires_in'] = ApiClient.convertToType(data['expires_in'], 'Number');
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'Date');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShortTokenResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShortTokenResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShortTokenResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token_type'] && !(typeof data['token_type'] === 'string' || data['token_type'] instanceof String)) {
            throw new Error("Expected the field `token_type` to be a primitive type in the JSON string but got " + data['token_type']);
        }
        // ensure the json data is a string
        if (data['access_token'] && !(typeof data['access_token'] === 'string' || data['access_token'] instanceof String)) {
            throw new Error("Expected the field `access_token` to be a primitive type in the JSON string but got " + data['access_token']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }

        return true;
    }


}

ShortTokenResponse.RequiredProperties = ["token_type", "access_token", "expires_in", "expires_at"];

/**
 * @member {module:c2m_api/model/ShortTokenResponse.TokenTypeEnum} token_type
 */
ShortTokenResponse.prototype['token_type'] = undefined;

/**
 * Short-lived JWT
 * @member {String} access_token
 */
ShortTokenResponse.prototype['access_token'] = undefined;

/**
 * Lifetime in seconds (e.g., 900 for 15 minutes)
 * @member {Number} expires_in
 */
ShortTokenResponse.prototype['expires_in'] = undefined;

/**
 * ISO 8601 timestamp of expiration
 * @member {Date} expires_at
 */
ShortTokenResponse.prototype['expires_at'] = undefined;

/**
 * Granted scopes
 * @member {Array.<String>} scopes
 */
ShortTokenResponse.prototype['scopes'] = undefined;

/**
 * Server-issued identifier for this token
 * @member {String} token_id
 */
ShortTokenResponse.prototype['token_id'] = undefined;





/**
 * Allowed values for the <code>token_type</code> property.
 * @enum {String}
 * @readonly
 */
ShortTokenResponse['TokenTypeEnum'] = {

    /**
     * value: "Bearer"
     * @const
     */
    "Bearer": "Bearer"
};



export default ShortTokenResponse;

