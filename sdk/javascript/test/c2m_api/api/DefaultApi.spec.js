/**
 * C2M API v2 - Auth Overlay
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/c2m_api/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/c2m_api/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.C2MApiV2AuthOverlay);
  }
}(this, function(expect, C2MApiV2AuthOverlay) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new C2MApiV2AuthOverlay.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('mergeMultiDocParams', function() {
      it('should call mergeMultiDocParams successfully', function(done) {
        //uncomment below and update the code to test mergeMultiDocParams
        //instance.mergeMultiDocParams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mergeMultiDocWithTemplateParams', function() {
      it('should call mergeMultiDocWithTemplateParams successfully', function(done) {
        //uncomment below and update the code to test mergeMultiDocWithTemplateParams
        //instance.mergeMultiDocWithTemplateParams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('multiPdfWithCaptureParams', function() {
      it('should call multiPdfWithCaptureParams successfully', function(done) {
        //uncomment below and update the code to test multiPdfWithCaptureParams
        //instance.multiPdfWithCaptureParams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('singleDocJobParams', function() {
      it('should call singleDocJobParams successfully', function(done) {
        //uncomment below and update the code to test singleDocJobParams
        //instance.singleDocJobParams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('splitPdfParams', function() {
      it('should call splitPdfParams successfully', function(done) {
        //uncomment below and update the code to test splitPdfParams
        //instance.splitPdfParams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('splitPdfWithCaptureParams', function() {
      it('should call splitPdfWithCaptureParams successfully', function(done) {
        //uncomment below and update the code to test splitPdfWithCaptureParams
        //instance.splitPdfWithCaptureParams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitMultiDocParams', function() {
      it('should call submitMultiDocParams successfully', function(done) {
        //uncomment below and update the code to test submitMultiDocParams
        //instance.submitMultiDocParams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitMultiDocWithTemplateParams', function() {
      it('should call submitMultiDocWithTemplateParams successfully', function(done) {
        //uncomment below and update the code to test submitMultiDocWithTemplateParams
        //instance.submitMultiDocWithTemplateParams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitSingleDocWithTemplateParams', function() {
      it('should call submitSingleDocWithTemplateParams successfully', function(done) {
        //uncomment below and update the code to test submitSingleDocWithTemplateParams
        //instance.submitSingleDocWithTemplateParams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
