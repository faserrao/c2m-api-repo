/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.c2m.api.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.c2m.api.models.AuthError
import com.c2m.api.models.LongTokenRequest
import com.c2m.api.models.LongTokenResponse
import com.c2m.api.models.ShortTokenRequest
import com.c2m.api.models.ShortTokenResponse

import com.squareup.moshi.Json

import com.c2m.api.infrastructure.ApiClient
import com.c2m.api.infrastructure.ApiResponse
import com.c2m.api.infrastructure.ClientException
import com.c2m.api.infrastructure.ClientError
import com.c2m.api.infrastructure.ServerException
import com.c2m.api.infrastructure.ServerError
import com.c2m.api.infrastructure.MultiValueMap
import com.c2m.api.infrastructure.PartConfig
import com.c2m.api.infrastructure.RequestConfig
import com.c2m.api.infrastructure.RequestMethod
import com.c2m.api.infrastructure.ResponseType
import com.c2m.api.infrastructure.Success
import com.c2m.api.infrastructure.toMultiValue

class AuthApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.example.com/v1")
        }
    }

    /**
     * POST /auth/tokens/long
     * Issue or rotate a long-term token
     * Issues a long-term token (e.g., 30-90 days) for automation or server-to-server use. Requires step-up authentication. Choose one of the supported grant types:  - &#x60;client_credentials&#x60; + &#x60;client_secret&#x60; - &#x60;client_credentials&#x60; + one-time &#x60;otp_code&#x60; - &#x60;assertion&#x60; (e.g., signed JWT by your private key) - Or an existing short-term token with the &#x60;tokens:write&#x60; scope  Only one mechanism is required per call. 
     * @param longTokenRequest 
     * @return LongTokenResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun issueLongTermToken(longTokenRequest: LongTokenRequest) : LongTokenResponse {
        val localVarResponse = issueLongTermTokenWithHttpInfo(longTokenRequest = longTokenRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LongTokenResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /auth/tokens/long
     * Issue or rotate a long-term token
     * Issues a long-term token (e.g., 30-90 days) for automation or server-to-server use. Requires step-up authentication. Choose one of the supported grant types:  - &#x60;client_credentials&#x60; + &#x60;client_secret&#x60; - &#x60;client_credentials&#x60; + one-time &#x60;otp_code&#x60; - &#x60;assertion&#x60; (e.g., signed JWT by your private key) - Or an existing short-term token with the &#x60;tokens:write&#x60; scope  Only one mechanism is required per call. 
     * @param longTokenRequest 
     * @return ApiResponse<LongTokenResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun issueLongTermTokenWithHttpInfo(longTokenRequest: LongTokenRequest) : ApiResponse<LongTokenResponse?> {
        val localVariableConfig = issueLongTermTokenRequestConfig(longTokenRequest = longTokenRequest)

        return request<LongTokenRequest, LongTokenResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation issueLongTermToken
     *
     * @param longTokenRequest 
     * @return RequestConfig
     */
    fun issueLongTermTokenRequestConfig(longTokenRequest: LongTokenRequest) : RequestConfig<LongTokenRequest> {
        val localVariableBody = longTokenRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/tokens/long",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /auth/tokens/short
     * Issue a short-term access token
     * Exchange a valid long-term token for a short-lived JWT (e.g., 15 minutes). The long-term token must be sent in the Authorization header as &#x60;Bearer &lt;long_token&gt;&#x60;. 
     * @param shortTokenRequest  (optional)
     * @return ShortTokenResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun issueShortTermToken(shortTokenRequest: ShortTokenRequest? = null) : ShortTokenResponse {
        val localVarResponse = issueShortTermTokenWithHttpInfo(shortTokenRequest = shortTokenRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ShortTokenResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /auth/tokens/short
     * Issue a short-term access token
     * Exchange a valid long-term token for a short-lived JWT (e.g., 15 minutes). The long-term token must be sent in the Authorization header as &#x60;Bearer &lt;long_token&gt;&#x60;. 
     * @param shortTokenRequest  (optional)
     * @return ApiResponse<ShortTokenResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun issueShortTermTokenWithHttpInfo(shortTokenRequest: ShortTokenRequest?) : ApiResponse<ShortTokenResponse?> {
        val localVariableConfig = issueShortTermTokenRequestConfig(shortTokenRequest = shortTokenRequest)

        return request<ShortTokenRequest, ShortTokenResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation issueShortTermToken
     *
     * @param shortTokenRequest  (optional)
     * @return RequestConfig
     */
    fun issueShortTermTokenRequestConfig(shortTokenRequest: ShortTokenRequest?) : RequestConfig<ShortTokenRequest> {
        val localVariableBody = shortTokenRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/tokens/short",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /auth/tokens/{tokenId}/revoke
     * Revoke a token
     * Revokes a short- or long-term token by its &#x60;tokenId&#x60;. Idempotent.
     * @param tokenId The token ID to revoke
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun revokeToken(tokenId: kotlin.String) : Unit {
        val localVarResponse = revokeTokenWithHttpInfo(tokenId = tokenId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /auth/tokens/{tokenId}/revoke
     * Revoke a token
     * Revokes a short- or long-term token by its &#x60;tokenId&#x60;. Idempotent.
     * @param tokenId The token ID to revoke
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun revokeTokenWithHttpInfo(tokenId: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = revokeTokenRequestConfig(tokenId = tokenId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation revokeToken
     *
     * @param tokenId The token ID to revoke
     * @return RequestConfig
     */
    fun revokeTokenRequestConfig(tokenId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/tokens/{tokenId}/revoke".replace("{"+"tokenId"+"}", encodeURIComponent(tokenId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
