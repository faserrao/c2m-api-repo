/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.c2m.api.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import com.c2m.api.models.MergeMultiDocParamsRequest
import com.c2m.api.models.MergeMultiDocWithTemplateParamsRequest
import com.c2m.api.models.MultiPdfWithCaptureParamsRequest
import com.c2m.api.models.SingleDocJobParamsRequest
import com.c2m.api.models.SplitPdfParamsRequest
import com.c2m.api.models.SplitPdfWithCaptureParamsRequest
import com.c2m.api.models.StandardResponse
import com.c2m.api.models.SubmitMultiDocParamsRequest
import com.c2m.api.models.SubmitMultiDocWithTemplateParamsRequest
import com.c2m.api.models.SubmitSingleDocWithTemplateParamsRequest

import com.squareup.moshi.Json

import com.c2m.api.infrastructure.ApiClient
import com.c2m.api.infrastructure.ApiResponse
import com.c2m.api.infrastructure.ClientException
import com.c2m.api.infrastructure.ClientError
import com.c2m.api.infrastructure.ServerException
import com.c2m.api.infrastructure.ServerError
import com.c2m.api.infrastructure.MultiValueMap
import com.c2m.api.infrastructure.PartConfig
import com.c2m.api.infrastructure.RequestConfig
import com.c2m.api.infrastructure.RequestMethod
import com.c2m.api.infrastructure.ResponseType
import com.c2m.api.infrastructure.Success
import com.c2m.api.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.example.com/v1")
        }
    }

    /**
     * POST /jobs/multi-doc-merge
     * Operation for /jobs/multi-doc-merge
     * 
     * @param mergeMultiDocParamsRequest 
     * @return StandardResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mergeMultiDocParams(mergeMultiDocParamsRequest: MergeMultiDocParamsRequest) : StandardResponse {
        val localVarResponse = mergeMultiDocParamsWithHttpInfo(mergeMultiDocParamsRequest = mergeMultiDocParamsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StandardResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /jobs/multi-doc-merge
     * Operation for /jobs/multi-doc-merge
     * 
     * @param mergeMultiDocParamsRequest 
     * @return ApiResponse<StandardResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mergeMultiDocParamsWithHttpInfo(mergeMultiDocParamsRequest: MergeMultiDocParamsRequest) : ApiResponse<StandardResponse?> {
        val localVariableConfig = mergeMultiDocParamsRequestConfig(mergeMultiDocParamsRequest = mergeMultiDocParamsRequest)

        return request<MergeMultiDocParamsRequest, StandardResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mergeMultiDocParams
     *
     * @param mergeMultiDocParamsRequest 
     * @return RequestConfig
     */
    fun mergeMultiDocParamsRequestConfig(mergeMultiDocParamsRequest: MergeMultiDocParamsRequest) : RequestConfig<MergeMultiDocParamsRequest> {
        val localVariableBody = mergeMultiDocParamsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jobs/multi-doc-merge",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /jobs/multi-doc-merge-job-template
     * Operation for /jobs/multi-doc-merge-job-template
     * 
     * @param mergeMultiDocWithTemplateParamsRequest 
     * @return StandardResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mergeMultiDocWithTemplateParams(mergeMultiDocWithTemplateParamsRequest: MergeMultiDocWithTemplateParamsRequest) : StandardResponse {
        val localVarResponse = mergeMultiDocWithTemplateParamsWithHttpInfo(mergeMultiDocWithTemplateParamsRequest = mergeMultiDocWithTemplateParamsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StandardResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /jobs/multi-doc-merge-job-template
     * Operation for /jobs/multi-doc-merge-job-template
     * 
     * @param mergeMultiDocWithTemplateParamsRequest 
     * @return ApiResponse<StandardResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mergeMultiDocWithTemplateParamsWithHttpInfo(mergeMultiDocWithTemplateParamsRequest: MergeMultiDocWithTemplateParamsRequest) : ApiResponse<StandardResponse?> {
        val localVariableConfig = mergeMultiDocWithTemplateParamsRequestConfig(mergeMultiDocWithTemplateParamsRequest = mergeMultiDocWithTemplateParamsRequest)

        return request<MergeMultiDocWithTemplateParamsRequest, StandardResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mergeMultiDocWithTemplateParams
     *
     * @param mergeMultiDocWithTemplateParamsRequest 
     * @return RequestConfig
     */
    fun mergeMultiDocWithTemplateParamsRequestConfig(mergeMultiDocWithTemplateParamsRequest: MergeMultiDocWithTemplateParamsRequest) : RequestConfig<MergeMultiDocWithTemplateParamsRequest> {
        val localVariableBody = mergeMultiDocWithTemplateParamsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jobs/multi-doc-merge-job-template",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /jobs/multi-pdf-address-capture
     * Operation for /jobs/multi-pdf-address-capture
     * 
     * @param multiPdfWithCaptureParamsRequest 
     * @return StandardResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun multiPdfWithCaptureParams(multiPdfWithCaptureParamsRequest: MultiPdfWithCaptureParamsRequest) : StandardResponse {
        val localVarResponse = multiPdfWithCaptureParamsWithHttpInfo(multiPdfWithCaptureParamsRequest = multiPdfWithCaptureParamsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StandardResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /jobs/multi-pdf-address-capture
     * Operation for /jobs/multi-pdf-address-capture
     * 
     * @param multiPdfWithCaptureParamsRequest 
     * @return ApiResponse<StandardResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun multiPdfWithCaptureParamsWithHttpInfo(multiPdfWithCaptureParamsRequest: MultiPdfWithCaptureParamsRequest) : ApiResponse<StandardResponse?> {
        val localVariableConfig = multiPdfWithCaptureParamsRequestConfig(multiPdfWithCaptureParamsRequest = multiPdfWithCaptureParamsRequest)

        return request<MultiPdfWithCaptureParamsRequest, StandardResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation multiPdfWithCaptureParams
     *
     * @param multiPdfWithCaptureParamsRequest 
     * @return RequestConfig
     */
    fun multiPdfWithCaptureParamsRequestConfig(multiPdfWithCaptureParamsRequest: MultiPdfWithCaptureParamsRequest) : RequestConfig<MultiPdfWithCaptureParamsRequest> {
        val localVariableBody = multiPdfWithCaptureParamsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jobs/multi-pdf-address-capture",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /jobs/single-doc
     * Operation for /jobs/single-doc
     * 
     * @param singleDocJobParamsRequest 
     * @return StandardResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun singleDocJobParams(singleDocJobParamsRequest: SingleDocJobParamsRequest) : StandardResponse {
        val localVarResponse = singleDocJobParamsWithHttpInfo(singleDocJobParamsRequest = singleDocJobParamsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StandardResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /jobs/single-doc
     * Operation for /jobs/single-doc
     * 
     * @param singleDocJobParamsRequest 
     * @return ApiResponse<StandardResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun singleDocJobParamsWithHttpInfo(singleDocJobParamsRequest: SingleDocJobParamsRequest) : ApiResponse<StandardResponse?> {
        val localVariableConfig = singleDocJobParamsRequestConfig(singleDocJobParamsRequest = singleDocJobParamsRequest)

        return request<SingleDocJobParamsRequest, StandardResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation singleDocJobParams
     *
     * @param singleDocJobParamsRequest 
     * @return RequestConfig
     */
    fun singleDocJobParamsRequestConfig(singleDocJobParamsRequest: SingleDocJobParamsRequest) : RequestConfig<SingleDocJobParamsRequest> {
        val localVariableBody = singleDocJobParamsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jobs/single-doc",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /jobs/single-pdf-split
     * Operation for /jobs/single-pdf-split
     * 
     * @param splitPdfParamsRequest 
     * @return StandardResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun splitPdfParams(splitPdfParamsRequest: SplitPdfParamsRequest) : StandardResponse {
        val localVarResponse = splitPdfParamsWithHttpInfo(splitPdfParamsRequest = splitPdfParamsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StandardResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /jobs/single-pdf-split
     * Operation for /jobs/single-pdf-split
     * 
     * @param splitPdfParamsRequest 
     * @return ApiResponse<StandardResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun splitPdfParamsWithHttpInfo(splitPdfParamsRequest: SplitPdfParamsRequest) : ApiResponse<StandardResponse?> {
        val localVariableConfig = splitPdfParamsRequestConfig(splitPdfParamsRequest = splitPdfParamsRequest)

        return request<SplitPdfParamsRequest, StandardResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation splitPdfParams
     *
     * @param splitPdfParamsRequest 
     * @return RequestConfig
     */
    fun splitPdfParamsRequestConfig(splitPdfParamsRequest: SplitPdfParamsRequest) : RequestConfig<SplitPdfParamsRequest> {
        val localVariableBody = splitPdfParamsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jobs/single-pdf-split",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /jobs/single-pdf-split-addressCapture
     * Operation for /jobs/single-pdf-split-addressCapture
     * 
     * @param splitPdfWithCaptureParamsRequest 
     * @return StandardResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun splitPdfWithCaptureParams(splitPdfWithCaptureParamsRequest: SplitPdfWithCaptureParamsRequest) : StandardResponse {
        val localVarResponse = splitPdfWithCaptureParamsWithHttpInfo(splitPdfWithCaptureParamsRequest = splitPdfWithCaptureParamsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StandardResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /jobs/single-pdf-split-addressCapture
     * Operation for /jobs/single-pdf-split-addressCapture
     * 
     * @param splitPdfWithCaptureParamsRequest 
     * @return ApiResponse<StandardResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun splitPdfWithCaptureParamsWithHttpInfo(splitPdfWithCaptureParamsRequest: SplitPdfWithCaptureParamsRequest) : ApiResponse<StandardResponse?> {
        val localVariableConfig = splitPdfWithCaptureParamsRequestConfig(splitPdfWithCaptureParamsRequest = splitPdfWithCaptureParamsRequest)

        return request<SplitPdfWithCaptureParamsRequest, StandardResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation splitPdfWithCaptureParams
     *
     * @param splitPdfWithCaptureParamsRequest 
     * @return RequestConfig
     */
    fun splitPdfWithCaptureParamsRequestConfig(splitPdfWithCaptureParamsRequest: SplitPdfWithCaptureParamsRequest) : RequestConfig<SplitPdfWithCaptureParamsRequest> {
        val localVariableBody = splitPdfWithCaptureParamsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jobs/single-pdf-split-addressCapture",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /jobs/multi-doc
     * Operation for /jobs/multi-doc
     * 
     * @param submitMultiDocParamsRequest 
     * @return StandardResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun submitMultiDocParams(submitMultiDocParamsRequest: SubmitMultiDocParamsRequest) : StandardResponse {
        val localVarResponse = submitMultiDocParamsWithHttpInfo(submitMultiDocParamsRequest = submitMultiDocParamsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StandardResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /jobs/multi-doc
     * Operation for /jobs/multi-doc
     * 
     * @param submitMultiDocParamsRequest 
     * @return ApiResponse<StandardResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun submitMultiDocParamsWithHttpInfo(submitMultiDocParamsRequest: SubmitMultiDocParamsRequest) : ApiResponse<StandardResponse?> {
        val localVariableConfig = submitMultiDocParamsRequestConfig(submitMultiDocParamsRequest = submitMultiDocParamsRequest)

        return request<SubmitMultiDocParamsRequest, StandardResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation submitMultiDocParams
     *
     * @param submitMultiDocParamsRequest 
     * @return RequestConfig
     */
    fun submitMultiDocParamsRequestConfig(submitMultiDocParamsRequest: SubmitMultiDocParamsRequest) : RequestConfig<SubmitMultiDocParamsRequest> {
        val localVariableBody = submitMultiDocParamsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jobs/multi-doc",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /jobs/multi-docs-job-template
     * Operation for /jobs/multi-docs-job-template
     * 
     * @param submitMultiDocWithTemplateParamsRequest 
     * @return StandardResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun submitMultiDocWithTemplateParams(submitMultiDocWithTemplateParamsRequest: SubmitMultiDocWithTemplateParamsRequest) : StandardResponse {
        val localVarResponse = submitMultiDocWithTemplateParamsWithHttpInfo(submitMultiDocWithTemplateParamsRequest = submitMultiDocWithTemplateParamsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StandardResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /jobs/multi-docs-job-template
     * Operation for /jobs/multi-docs-job-template
     * 
     * @param submitMultiDocWithTemplateParamsRequest 
     * @return ApiResponse<StandardResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun submitMultiDocWithTemplateParamsWithHttpInfo(submitMultiDocWithTemplateParamsRequest: SubmitMultiDocWithTemplateParamsRequest) : ApiResponse<StandardResponse?> {
        val localVariableConfig = submitMultiDocWithTemplateParamsRequestConfig(submitMultiDocWithTemplateParamsRequest = submitMultiDocWithTemplateParamsRequest)

        return request<SubmitMultiDocWithTemplateParamsRequest, StandardResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation submitMultiDocWithTemplateParams
     *
     * @param submitMultiDocWithTemplateParamsRequest 
     * @return RequestConfig
     */
    fun submitMultiDocWithTemplateParamsRequestConfig(submitMultiDocWithTemplateParamsRequest: SubmitMultiDocWithTemplateParamsRequest) : RequestConfig<SubmitMultiDocWithTemplateParamsRequest> {
        val localVariableBody = submitMultiDocWithTemplateParamsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jobs/multi-docs-job-template",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /jobs/single-doc-job-template
     * Operation for /jobs/single-doc-job-template
     * 
     * @param submitSingleDocWithTemplateParamsRequest 
     * @return StandardResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun submitSingleDocWithTemplateParams(submitSingleDocWithTemplateParamsRequest: SubmitSingleDocWithTemplateParamsRequest) : StandardResponse {
        val localVarResponse = submitSingleDocWithTemplateParamsWithHttpInfo(submitSingleDocWithTemplateParamsRequest = submitSingleDocWithTemplateParamsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StandardResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /jobs/single-doc-job-template
     * Operation for /jobs/single-doc-job-template
     * 
     * @param submitSingleDocWithTemplateParamsRequest 
     * @return ApiResponse<StandardResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun submitSingleDocWithTemplateParamsWithHttpInfo(submitSingleDocWithTemplateParamsRequest: SubmitSingleDocWithTemplateParamsRequest) : ApiResponse<StandardResponse?> {
        val localVariableConfig = submitSingleDocWithTemplateParamsRequestConfig(submitSingleDocWithTemplateParamsRequest = submitSingleDocWithTemplateParamsRequest)

        return request<SubmitSingleDocWithTemplateParamsRequest, StandardResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation submitSingleDocWithTemplateParams
     *
     * @param submitSingleDocWithTemplateParamsRequest 
     * @return RequestConfig
     */
    fun submitSingleDocWithTemplateParamsRequestConfig(submitSingleDocWithTemplateParamsRequest: SubmitSingleDocWithTemplateParamsRequest) : RequestConfig<SubmitSingleDocWithTemplateParamsRequest> {
        val localVariableBody = submitSingleDocWithTemplateParamsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/jobs/single-doc-job-template",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
