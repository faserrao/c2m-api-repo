/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.c2m.api.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.c2m.api.apis.DefaultApi
import com.c2m.api.models.MergeMultiDocParamsRequest
import com.c2m.api.models.MergeMultiDocWithTemplateParamsRequest
import com.c2m.api.models.MultiPdfWithCaptureParamsRequest
import com.c2m.api.models.SingleDocJobParamsRequest
import com.c2m.api.models.SplitPdfParamsRequest
import com.c2m.api.models.SplitPdfWithCaptureParamsRequest
import com.c2m.api.models.StandardResponse
import com.c2m.api.models.SubmitMultiDocParamsRequest
import com.c2m.api.models.SubmitMultiDocWithTemplateParamsRequest
import com.c2m.api.models.SubmitSingleDocWithTemplateParamsRequest

class DefaultApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of DefaultApi
        //val apiInstance = DefaultApi()

        // to test mergeMultiDocParams
        should("test mergeMultiDocParams") {
            // uncomment below to test mergeMultiDocParams
            //val mergeMultiDocParamsRequest : MergeMultiDocParamsRequest =  // MergeMultiDocParamsRequest | 
            //val result : StandardResponse = apiInstance.mergeMultiDocParams(mergeMultiDocParamsRequest)
            //result shouldBe ("TODO")
        }

        // to test mergeMultiDocWithTemplateParams
        should("test mergeMultiDocWithTemplateParams") {
            // uncomment below to test mergeMultiDocWithTemplateParams
            //val mergeMultiDocWithTemplateParamsRequest : MergeMultiDocWithTemplateParamsRequest =  // MergeMultiDocWithTemplateParamsRequest | 
            //val result : StandardResponse = apiInstance.mergeMultiDocWithTemplateParams(mergeMultiDocWithTemplateParamsRequest)
            //result shouldBe ("TODO")
        }

        // to test multiPdfWithCaptureParams
        should("test multiPdfWithCaptureParams") {
            // uncomment below to test multiPdfWithCaptureParams
            //val multiPdfWithCaptureParamsRequest : MultiPdfWithCaptureParamsRequest =  // MultiPdfWithCaptureParamsRequest | 
            //val result : StandardResponse = apiInstance.multiPdfWithCaptureParams(multiPdfWithCaptureParamsRequest)
            //result shouldBe ("TODO")
        }

        // to test singleDocJobParams
        should("test singleDocJobParams") {
            // uncomment below to test singleDocJobParams
            //val singleDocJobParamsRequest : SingleDocJobParamsRequest =  // SingleDocJobParamsRequest | 
            //val result : StandardResponse = apiInstance.singleDocJobParams(singleDocJobParamsRequest)
            //result shouldBe ("TODO")
        }

        // to test splitPdfParams
        should("test splitPdfParams") {
            // uncomment below to test splitPdfParams
            //val splitPdfParamsRequest : SplitPdfParamsRequest =  // SplitPdfParamsRequest | 
            //val result : StandardResponse = apiInstance.splitPdfParams(splitPdfParamsRequest)
            //result shouldBe ("TODO")
        }

        // to test splitPdfWithCaptureParams
        should("test splitPdfWithCaptureParams") {
            // uncomment below to test splitPdfWithCaptureParams
            //val splitPdfWithCaptureParamsRequest : SplitPdfWithCaptureParamsRequest =  // SplitPdfWithCaptureParamsRequest | 
            //val result : StandardResponse = apiInstance.splitPdfWithCaptureParams(splitPdfWithCaptureParamsRequest)
            //result shouldBe ("TODO")
        }

        // to test submitMultiDocParams
        should("test submitMultiDocParams") {
            // uncomment below to test submitMultiDocParams
            //val submitMultiDocParamsRequest : SubmitMultiDocParamsRequest =  // SubmitMultiDocParamsRequest | 
            //val result : StandardResponse = apiInstance.submitMultiDocParams(submitMultiDocParamsRequest)
            //result shouldBe ("TODO")
        }

        // to test submitMultiDocWithTemplateParams
        should("test submitMultiDocWithTemplateParams") {
            // uncomment below to test submitMultiDocWithTemplateParams
            //val submitMultiDocWithTemplateParamsRequest : SubmitMultiDocWithTemplateParamsRequest =  // SubmitMultiDocWithTemplateParamsRequest | 
            //val result : StandardResponse = apiInstance.submitMultiDocWithTemplateParams(submitMultiDocWithTemplateParamsRequest)
            //result shouldBe ("TODO")
        }

        // to test submitSingleDocWithTemplateParams
        should("test submitSingleDocWithTemplateParams") {
            // uncomment below to test submitSingleDocWithTemplateParams
            //val submitSingleDocWithTemplateParamsRequest : SubmitSingleDocWithTemplateParamsRequest =  // SubmitSingleDocWithTemplateParamsRequest | 
            //val result : StandardResponse = apiInstance.submitSingleDocWithTemplateParams(submitSingleDocWithTemplateParamsRequest)
            //result shouldBe ("TODO")
        }

    }
}
