<?php
/**
 * LongTokenRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  C2MApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace C2MApi\Model;

use \ArrayAccess;
use \C2MApi\ObjectSerializer;

/**
 * LongTokenRequest Class Doc Comment
 *
 * @category Class
 * @description One of several credential mechanisms must be provided.
 * @package  C2MApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LongTokenRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LongTokenRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'grant_type' => 'string',
        'client_id' => 'string',
        'client_secret' => 'string',
        'otp_code' => 'string',
        'assertion_type' => 'string',
        'assertion' => 'string',
        'scopes' => 'string[]',
        'ttl_seconds' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'grant_type' => null,
        'client_id' => null,
        'client_secret' => null,
        'otp_code' => null,
        'assertion_type' => null,
        'assertion' => null,
        'scopes' => null,
        'ttl_seconds' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'grant_type' => false,
        'client_id' => false,
        'client_secret' => false,
        'otp_code' => false,
        'assertion_type' => false,
        'assertion' => false,
        'scopes' => false,
        'ttl_seconds' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'grant_type' => 'grant_type',
        'client_id' => 'client_id',
        'client_secret' => 'client_secret',
        'otp_code' => 'otp_code',
        'assertion_type' => 'assertion_type',
        'assertion' => 'assertion',
        'scopes' => 'scopes',
        'ttl_seconds' => 'ttl_seconds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'grant_type' => 'setGrantType',
        'client_id' => 'setClientId',
        'client_secret' => 'setClientSecret',
        'otp_code' => 'setOtpCode',
        'assertion_type' => 'setAssertionType',
        'assertion' => 'setAssertion',
        'scopes' => 'setScopes',
        'ttl_seconds' => 'setTtlSeconds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'grant_type' => 'getGrantType',
        'client_id' => 'getClientId',
        'client_secret' => 'getClientSecret',
        'otp_code' => 'getOtpCode',
        'assertion_type' => 'getAssertionType',
        'assertion' => 'getAssertion',
        'scopes' => 'getScopes',
        'ttl_seconds' => 'getTtlSeconds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const GRANT_TYPE_CLIENT_CREDENTIALS = 'client_credentials';
    public const GRANT_TYPE_ASSERTION = 'assertion';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGrantTypeAllowableValues()
    {
        return [
            self::GRANT_TYPE_CLIENT_CREDENTIALS,
            self::GRANT_TYPE_ASSERTION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('grant_type', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('client_secret', $data ?? [], null);
        $this->setIfExists('otp_code', $data ?? [], null);
        $this->setIfExists('assertion_type', $data ?? [], null);
        $this->setIfExists('assertion', $data ?? [], null);
        $this->setIfExists('scopes', $data ?? [], null);
        $this->setIfExists('ttl_seconds', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['grant_type'] === null) {
            $invalidProperties[] = "'grant_type' can't be null";
        }
        $allowedValues = $this->getGrantTypeAllowableValues();
        if (!is_null($this->container['grant_type']) && !in_array($this->container['grant_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'grant_type', must be one of '%s'",
                $this->container['grant_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if (!is_null($this->container['ttl_seconds']) && ($this->container['ttl_seconds'] > 7776000)) {
            $invalidProperties[] = "invalid value for 'ttl_seconds', must be smaller than or equal to 7776000.";
        }

        if (!is_null($this->container['ttl_seconds']) && ($this->container['ttl_seconds'] < 3600)) {
            $invalidProperties[] = "invalid value for 'ttl_seconds', must be bigger than or equal to 3600.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets grant_type
     *
     * @return string
     */
    public function getGrantType()
    {
        return $this->container['grant_type'];
    }

    /**
     * Sets grant_type
     *
     * @param string $grant_type The authentication grant type
     *
     * @return self
     */
    public function setGrantType($grant_type)
    {
        if (is_null($grant_type)) {
            throw new \InvalidArgumentException('non-nullable grant_type cannot be null');
        }
        $allowedValues = $this->getGrantTypeAllowableValues();
        if (!in_array($grant_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'grant_type', must be one of '%s'",
                    $grant_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['grant_type'] = $grant_type;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id Client identifier issued by Click2Mail
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_secret
     *
     * @return string|null
     */
    public function getClientSecret()
    {
        return $this->container['client_secret'];
    }

    /**
     * Sets client_secret
     *
     * @param string|null $client_secret Required if using client_credentials with secret
     *
     * @return self
     */
    public function setClientSecret($client_secret)
    {
        if (is_null($client_secret)) {
            throw new \InvalidArgumentException('non-nullable client_secret cannot be null');
        }
        $this->container['client_secret'] = $client_secret;

        return $this;
    }

    /**
     * Gets otp_code
     *
     * @return string|null
     */
    public function getOtpCode()
    {
        return $this->container['otp_code'];
    }

    /**
     * Sets otp_code
     *
     * @param string|null $otp_code Required if your policy mandates OTP for issuance
     *
     * @return self
     */
    public function setOtpCode($otp_code)
    {
        if (is_null($otp_code)) {
            throw new \InvalidArgumentException('non-nullable otp_code cannot be null');
        }
        $this->container['otp_code'] = $otp_code;

        return $this;
    }

    /**
     * Gets assertion_type
     *
     * @return string|null
     */
    public function getAssertionType()
    {
        return $this->container['assertion_type'];
    }

    /**
     * Sets assertion_type
     *
     * @param string|null $assertion_type Required when grant_type=assertion
     *
     * @return self
     */
    public function setAssertionType($assertion_type)
    {
        if (is_null($assertion_type)) {
            throw new \InvalidArgumentException('non-nullable assertion_type cannot be null');
        }
        $this->container['assertion_type'] = $assertion_type;

        return $this;
    }

    /**
     * Gets assertion
     *
     * @return string|null
     */
    public function getAssertion()
    {
        return $this->container['assertion'];
    }

    /**
     * Sets assertion
     *
     * @param string|null $assertion Signed JWT or other accepted assertion
     *
     * @return self
     */
    public function setAssertion($assertion)
    {
        if (is_null($assertion)) {
            throw new \InvalidArgumentException('non-nullable assertion cannot be null');
        }
        $this->container['assertion'] = $assertion;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return string[]|null
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param string[]|null $scopes Scopes to assign to the long-term token
     *
     * @return self
     */
    public function setScopes($scopes)
    {
        if (is_null($scopes)) {
            throw new \InvalidArgumentException('non-nullable scopes cannot be null');
        }
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets ttl_seconds
     *
     * @return int|null
     */
    public function getTtlSeconds()
    {
        return $this->container['ttl_seconds'];
    }

    /**
     * Sets ttl_seconds
     *
     * @param int|null $ttl_seconds Requested lifetime (1 hour - 90 days). Server may clamp.
     *
     * @return self
     */
    public function setTtlSeconds($ttl_seconds)
    {
        if (is_null($ttl_seconds)) {
            throw new \InvalidArgumentException('non-nullable ttl_seconds cannot be null');
        }

        if (($ttl_seconds > 7776000)) {
            throw new \InvalidArgumentException('invalid value for $ttl_seconds when calling LongTokenRequest., must be smaller than or equal to 7776000.');
        }
        if (($ttl_seconds < 3600)) {
            throw new \InvalidArgumentException('invalid value for $ttl_seconds when calling LongTokenRequest., must be bigger than or equal to 3600.');
        }

        $this->container['ttl_seconds'] = $ttl_seconds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


