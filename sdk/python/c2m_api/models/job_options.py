# coding: utf-8

"""
    C2M API v2 - Auth Overlay

    API for submitting documents with various routing options

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from c2m_api.models.document_class import DocumentClass
from c2m_api.models.envelope import Envelope
from c2m_api.models.layout import Layout
from c2m_api.models.mailclass import Mailclass
from c2m_api.models.paper_type import PaperType
from c2m_api.models.print_option import PrintOption
from typing import Optional, Set
from typing_extensions import Self

class JobOptions(BaseModel):
    """
    JobOptions
    """ # noqa: E501
    document_class: DocumentClass = Field(alias="documentClass")
    layout: Layout
    mailclass: Mailclass
    paper_type: PaperType = Field(alias="paperType")
    print_option: PrintOption = Field(alias="printOption")
    envelope: Envelope
    __properties: ClassVar[List[str]] = ["documentClass", "layout", "mailclass", "paperType", "printOption", "envelope"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentClass": obj.get("documentClass"),
            "layout": obj.get("layout"),
            "mailclass": obj.get("mailclass"),
            "paperType": obj.get("paperType"),
            "printOption": obj.get("printOption"),
            "envelope": obj.get("envelope")
        })
        return _obj


