# coding: utf-8

"""
    C2M API v2 - Auth Overlay

    API for submitting documents with various routing options

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class LongTokenRequest(BaseModel):
    """
    One of several credential mechanisms must be provided.
    """ # noqa: E501
    grant_type: StrictStr = Field(description="The authentication grant type")
    client_id: StrictStr = Field(description="Client identifier issued by Click2Mail")
    client_secret: Optional[StrictStr] = Field(default=None, description="Required if using client_credentials with secret")
    otp_code: Optional[StrictStr] = Field(default=None, description="Required if your policy mandates OTP for issuance")
    assertion_type: Optional[StrictStr] = Field(default=None, description="Required when grant_type=assertion")
    assertion: Optional[StrictStr] = Field(default=None, description="Signed JWT or other accepted assertion")
    scopes: Optional[List[StrictStr]] = Field(default=None, description="Scopes to assign to the long-term token")
    ttl_seconds: Optional[Annotated[int, Field(le=7776000, strict=True, ge=3600)]] = Field(default=None, description="Requested lifetime (1 hour - 90 days). Server may clamp.")
    __properties: ClassVar[List[str]] = ["grant_type", "client_id", "client_secret", "otp_code", "assertion_type", "assertion", "scopes", "ttl_seconds"]

    @field_validator('grant_type')
    def grant_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['client_credentials', 'assertion']):
            raise ValueError("must be one of enum values ('client_credentials', 'assertion')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LongTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LongTokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "grant_type": obj.get("grant_type"),
            "client_id": obj.get("client_id"),
            "client_secret": obj.get("client_secret"),
            "otp_code": obj.get("otp_code"),
            "assertion_type": obj.get("assertion_type"),
            "assertion": obj.get("assertion"),
            "scopes": obj.get("scopes"),
            "ttl_seconds": obj.get("ttl_seconds")
        })
        return _obj


