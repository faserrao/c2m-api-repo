=begin
#C2M API v2 - Auth Overlay

#API for submitting documents with various routing options

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.15.0

=end

require 'cgi'

module OpenapiClient
  class AuthApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Issue or rotate a long-term token
    # Issues a long-term token (e.g., 30-90 days) for automation or server-to-server use. Requires step-up authentication. Choose one of the supported grant types:  - `client_credentials` + `client_secret` - `client_credentials` + one-time `otp_code` - `assertion` (e.g., signed JWT by your private key) - Or an existing short-term token with the `tokens:write` scope  Only one mechanism is required per call. 
    # @param long_token_request [LongTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [LongTokenResponse]
    def issue_long_term_token(long_token_request, opts = {})
      data, _status_code, _headers = issue_long_term_token_with_http_info(long_token_request, opts)
      data
    end

    # Issue or rotate a long-term token
    # Issues a long-term token (e.g., 30-90 days) for automation or server-to-server use. Requires step-up authentication. Choose one of the supported grant types:  - &#x60;client_credentials&#x60; + &#x60;client_secret&#x60; - &#x60;client_credentials&#x60; + one-time &#x60;otp_code&#x60; - &#x60;assertion&#x60; (e.g., signed JWT by your private key) - Or an existing short-term token with the &#x60;tokens:write&#x60; scope  Only one mechanism is required per call. 
    # @param long_token_request [LongTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LongTokenResponse, Integer, Hash)>] LongTokenResponse data, response status code and response headers
    def issue_long_term_token_with_http_info(long_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthApi.issue_long_term_token ...'
      end
      # verify the required parameter 'long_token_request' is set
      if @api_client.config.client_side_validation && long_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'long_token_request' when calling AuthApi.issue_long_term_token"
      end
      # resource path
      local_var_path = '/auth/tokens/long'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(long_token_request)

      # return_type
      return_type = opts[:debug_return_type] || 'LongTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ShortTokenAuth', 'ClientKey']

      new_options = opts.merge(
        :operation => :"AuthApi.issue_long_term_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthApi#issue_long_term_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Issue a short-term access token
    # Exchange a valid long-term token for a short-lived JWT (e.g., 15 minutes). The long-term token must be sent in the Authorization header as `Bearer <long_token>`. 
    # @param [Hash] opts the optional parameters
    # @option opts [ShortTokenRequest] :short_token_request 
    # @return [ShortTokenResponse]
    def issue_short_term_token(opts = {})
      data, _status_code, _headers = issue_short_term_token_with_http_info(opts)
      data
    end

    # Issue a short-term access token
    # Exchange a valid long-term token for a short-lived JWT (e.g., 15 minutes). The long-term token must be sent in the Authorization header as &#x60;Bearer &lt;long_token&gt;&#x60;. 
    # @param [Hash] opts the optional parameters
    # @option opts [ShortTokenRequest] :short_token_request 
    # @return [Array<(ShortTokenResponse, Integer, Hash)>] ShortTokenResponse data, response status code and response headers
    def issue_short_term_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthApi.issue_short_term_token ...'
      end
      # resource path
      local_var_path = '/auth/tokens/short'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'short_token_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ShortTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['LongTokenAuth']

      new_options = opts.merge(
        :operation => :"AuthApi.issue_short_term_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthApi#issue_short_term_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke a token
    # Revokes a short- or long-term token by its `tokenId`. Idempotent.
    # @param token_id [String] The token ID to revoke
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def revoke_token(token_id, opts = {})
      revoke_token_with_http_info(token_id, opts)
      nil
    end

    # Revoke a token
    # Revokes a short- or long-term token by its &#x60;tokenId&#x60;. Idempotent.
    # @param token_id [String] The token ID to revoke
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def revoke_token_with_http_info(token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthApi.revoke_token ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling AuthApi.revoke_token"
      end
      # resource path
      local_var_path = '/auth/tokens/{tokenId}/revoke'.sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['LongTokenAuth', 'ShortTokenAuth']

      new_options = opts.merge(
        :operation => :"AuthApi.revoke_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthApi#revoke_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
