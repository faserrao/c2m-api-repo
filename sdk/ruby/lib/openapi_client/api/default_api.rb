=begin
#C2M API v2 - Auth Overlay

#API for submitting documents with various routing options

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.15.0

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Operation for /jobs/multi-doc-merge
    # @param merge_multi_doc_params_request [MergeMultiDocParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [StandardResponse]
    def merge_multi_doc_params(merge_multi_doc_params_request, opts = {})
      data, _status_code, _headers = merge_multi_doc_params_with_http_info(merge_multi_doc_params_request, opts)
      data
    end

    # Operation for /jobs/multi-doc-merge
    # @param merge_multi_doc_params_request [MergeMultiDocParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardResponse, Integer, Hash)>] StandardResponse data, response status code and response headers
    def merge_multi_doc_params_with_http_info(merge_multi_doc_params_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.merge_multi_doc_params ...'
      end
      # verify the required parameter 'merge_multi_doc_params_request' is set
      if @api_client.config.client_side_validation && merge_multi_doc_params_request.nil?
        fail ArgumentError, "Missing the required parameter 'merge_multi_doc_params_request' when calling DefaultApi.merge_multi_doc_params"
      end
      # resource path
      local_var_path = '/jobs/multi-doc-merge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(merge_multi_doc_params_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StandardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.merge_multi_doc_params",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#merge_multi_doc_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Operation for /jobs/multi-doc-merge-job-template
    # @param merge_multi_doc_with_template_params_request [MergeMultiDocWithTemplateParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [StandardResponse]
    def merge_multi_doc_with_template_params(merge_multi_doc_with_template_params_request, opts = {})
      data, _status_code, _headers = merge_multi_doc_with_template_params_with_http_info(merge_multi_doc_with_template_params_request, opts)
      data
    end

    # Operation for /jobs/multi-doc-merge-job-template
    # @param merge_multi_doc_with_template_params_request [MergeMultiDocWithTemplateParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardResponse, Integer, Hash)>] StandardResponse data, response status code and response headers
    def merge_multi_doc_with_template_params_with_http_info(merge_multi_doc_with_template_params_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.merge_multi_doc_with_template_params ...'
      end
      # verify the required parameter 'merge_multi_doc_with_template_params_request' is set
      if @api_client.config.client_side_validation && merge_multi_doc_with_template_params_request.nil?
        fail ArgumentError, "Missing the required parameter 'merge_multi_doc_with_template_params_request' when calling DefaultApi.merge_multi_doc_with_template_params"
      end
      # resource path
      local_var_path = '/jobs/multi-doc-merge-job-template'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(merge_multi_doc_with_template_params_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StandardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.merge_multi_doc_with_template_params",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#merge_multi_doc_with_template_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Operation for /jobs/multi-pdf-address-capture
    # @param multi_pdf_with_capture_params_request [MultiPdfWithCaptureParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [StandardResponse]
    def multi_pdf_with_capture_params(multi_pdf_with_capture_params_request, opts = {})
      data, _status_code, _headers = multi_pdf_with_capture_params_with_http_info(multi_pdf_with_capture_params_request, opts)
      data
    end

    # Operation for /jobs/multi-pdf-address-capture
    # @param multi_pdf_with_capture_params_request [MultiPdfWithCaptureParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardResponse, Integer, Hash)>] StandardResponse data, response status code and response headers
    def multi_pdf_with_capture_params_with_http_info(multi_pdf_with_capture_params_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.multi_pdf_with_capture_params ...'
      end
      # verify the required parameter 'multi_pdf_with_capture_params_request' is set
      if @api_client.config.client_side_validation && multi_pdf_with_capture_params_request.nil?
        fail ArgumentError, "Missing the required parameter 'multi_pdf_with_capture_params_request' when calling DefaultApi.multi_pdf_with_capture_params"
      end
      # resource path
      local_var_path = '/jobs/multi-pdf-address-capture'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(multi_pdf_with_capture_params_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StandardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.multi_pdf_with_capture_params",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#multi_pdf_with_capture_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Operation for /jobs/single-doc
    # @param single_doc_job_params_request [SingleDocJobParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [StandardResponse]
    def single_doc_job_params(single_doc_job_params_request, opts = {})
      data, _status_code, _headers = single_doc_job_params_with_http_info(single_doc_job_params_request, opts)
      data
    end

    # Operation for /jobs/single-doc
    # @param single_doc_job_params_request [SingleDocJobParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardResponse, Integer, Hash)>] StandardResponse data, response status code and response headers
    def single_doc_job_params_with_http_info(single_doc_job_params_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.single_doc_job_params ...'
      end
      # verify the required parameter 'single_doc_job_params_request' is set
      if @api_client.config.client_side_validation && single_doc_job_params_request.nil?
        fail ArgumentError, "Missing the required parameter 'single_doc_job_params_request' when calling DefaultApi.single_doc_job_params"
      end
      # resource path
      local_var_path = '/jobs/single-doc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(single_doc_job_params_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StandardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.single_doc_job_params",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#single_doc_job_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Operation for /jobs/single-pdf-split
    # @param split_pdf_params_request [SplitPdfParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [StandardResponse]
    def split_pdf_params(split_pdf_params_request, opts = {})
      data, _status_code, _headers = split_pdf_params_with_http_info(split_pdf_params_request, opts)
      data
    end

    # Operation for /jobs/single-pdf-split
    # @param split_pdf_params_request [SplitPdfParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardResponse, Integer, Hash)>] StandardResponse data, response status code and response headers
    def split_pdf_params_with_http_info(split_pdf_params_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.split_pdf_params ...'
      end
      # verify the required parameter 'split_pdf_params_request' is set
      if @api_client.config.client_side_validation && split_pdf_params_request.nil?
        fail ArgumentError, "Missing the required parameter 'split_pdf_params_request' when calling DefaultApi.split_pdf_params"
      end
      # resource path
      local_var_path = '/jobs/single-pdf-split'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(split_pdf_params_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StandardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.split_pdf_params",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#split_pdf_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Operation for /jobs/single-pdf-split-addressCapture
    # @param split_pdf_with_capture_params_request [SplitPdfWithCaptureParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [StandardResponse]
    def split_pdf_with_capture_params(split_pdf_with_capture_params_request, opts = {})
      data, _status_code, _headers = split_pdf_with_capture_params_with_http_info(split_pdf_with_capture_params_request, opts)
      data
    end

    # Operation for /jobs/single-pdf-split-addressCapture
    # @param split_pdf_with_capture_params_request [SplitPdfWithCaptureParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardResponse, Integer, Hash)>] StandardResponse data, response status code and response headers
    def split_pdf_with_capture_params_with_http_info(split_pdf_with_capture_params_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.split_pdf_with_capture_params ...'
      end
      # verify the required parameter 'split_pdf_with_capture_params_request' is set
      if @api_client.config.client_side_validation && split_pdf_with_capture_params_request.nil?
        fail ArgumentError, "Missing the required parameter 'split_pdf_with_capture_params_request' when calling DefaultApi.split_pdf_with_capture_params"
      end
      # resource path
      local_var_path = '/jobs/single-pdf-split-addressCapture'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(split_pdf_with_capture_params_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StandardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.split_pdf_with_capture_params",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#split_pdf_with_capture_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Operation for /jobs/multi-doc
    # @param submit_multi_doc_params_request [SubmitMultiDocParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [StandardResponse]
    def submit_multi_doc_params(submit_multi_doc_params_request, opts = {})
      data, _status_code, _headers = submit_multi_doc_params_with_http_info(submit_multi_doc_params_request, opts)
      data
    end

    # Operation for /jobs/multi-doc
    # @param submit_multi_doc_params_request [SubmitMultiDocParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardResponse, Integer, Hash)>] StandardResponse data, response status code and response headers
    def submit_multi_doc_params_with_http_info(submit_multi_doc_params_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.submit_multi_doc_params ...'
      end
      # verify the required parameter 'submit_multi_doc_params_request' is set
      if @api_client.config.client_side_validation && submit_multi_doc_params_request.nil?
        fail ArgumentError, "Missing the required parameter 'submit_multi_doc_params_request' when calling DefaultApi.submit_multi_doc_params"
      end
      # resource path
      local_var_path = '/jobs/multi-doc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(submit_multi_doc_params_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StandardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.submit_multi_doc_params",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#submit_multi_doc_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Operation for /jobs/multi-docs-job-template
    # @param submit_multi_doc_with_template_params_request [SubmitMultiDocWithTemplateParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [StandardResponse]
    def submit_multi_doc_with_template_params(submit_multi_doc_with_template_params_request, opts = {})
      data, _status_code, _headers = submit_multi_doc_with_template_params_with_http_info(submit_multi_doc_with_template_params_request, opts)
      data
    end

    # Operation for /jobs/multi-docs-job-template
    # @param submit_multi_doc_with_template_params_request [SubmitMultiDocWithTemplateParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardResponse, Integer, Hash)>] StandardResponse data, response status code and response headers
    def submit_multi_doc_with_template_params_with_http_info(submit_multi_doc_with_template_params_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.submit_multi_doc_with_template_params ...'
      end
      # verify the required parameter 'submit_multi_doc_with_template_params_request' is set
      if @api_client.config.client_side_validation && submit_multi_doc_with_template_params_request.nil?
        fail ArgumentError, "Missing the required parameter 'submit_multi_doc_with_template_params_request' when calling DefaultApi.submit_multi_doc_with_template_params"
      end
      # resource path
      local_var_path = '/jobs/multi-docs-job-template'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(submit_multi_doc_with_template_params_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StandardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.submit_multi_doc_with_template_params",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#submit_multi_doc_with_template_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Operation for /jobs/single-doc-job-template
    # @param submit_single_doc_with_template_params_request [SubmitSingleDocWithTemplateParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [StandardResponse]
    def submit_single_doc_with_template_params(submit_single_doc_with_template_params_request, opts = {})
      data, _status_code, _headers = submit_single_doc_with_template_params_with_http_info(submit_single_doc_with_template_params_request, opts)
      data
    end

    # Operation for /jobs/single-doc-job-template
    # @param submit_single_doc_with_template_params_request [SubmitSingleDocWithTemplateParamsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardResponse, Integer, Hash)>] StandardResponse data, response status code and response headers
    def submit_single_doc_with_template_params_with_http_info(submit_single_doc_with_template_params_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.submit_single_doc_with_template_params ...'
      end
      # verify the required parameter 'submit_single_doc_with_template_params_request' is set
      if @api_client.config.client_side_validation && submit_single_doc_with_template_params_request.nil?
        fail ArgumentError, "Missing the required parameter 'submit_single_doc_with_template_params_request' when calling DefaultApi.submit_single_doc_with_template_params"
      end
      # resource path
      local_var_path = '/jobs/single-doc-job-template'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(submit_single_doc_with_template_params_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StandardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.submit_single_doc_with_template_params",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#submit_single_doc_with_template_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
