/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// LongTokenRequest : One of several credential mechanisms must be provided.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LongTokenRequest {
    /// The authentication grant type
    #[serde(rename = "grant_type")]
    pub grant_type: GrantType,
    /// Client identifier issued by Click2Mail
    #[serde(rename = "client_id")]
    pub client_id: String,
    /// Required if using client_credentials with secret
    #[serde(rename = "client_secret", skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<String>,
    /// Required if your policy mandates OTP for issuance
    #[serde(rename = "otp_code", skip_serializing_if = "Option::is_none")]
    pub otp_code: Option<String>,
    /// Required when grant_type=assertion
    #[serde(rename = "assertion_type", skip_serializing_if = "Option::is_none")]
    pub assertion_type: Option<String>,
    /// Signed JWT or other accepted assertion
    #[serde(rename = "assertion", skip_serializing_if = "Option::is_none")]
    pub assertion: Option<String>,
    /// Scopes to assign to the long-term token
    #[serde(rename = "scopes", skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// Requested lifetime (1 hour - 90 days). Server may clamp.
    #[serde(rename = "ttl_seconds", skip_serializing_if = "Option::is_none")]
    pub ttl_seconds: Option<i32>,
}

impl LongTokenRequest {
    /// One of several credential mechanisms must be provided.
    pub fn new(grant_type: GrantType, client_id: String) -> LongTokenRequest {
        LongTokenRequest {
            grant_type,
            client_id,
            client_secret: None,
            otp_code: None,
            assertion_type: None,
            assertion: None,
            scopes: None,
            ttl_seconds: None,
        }
    }
}
/// The authentication grant type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum GrantType {
    #[serde(rename = "client_credentials")]
    ClientCredentials,
    #[serde(rename = "assertion")]
    Assertion,
}

impl Default for GrantType {
    fn default() -> GrantType {
        Self::ClientCredentials
    }
}

