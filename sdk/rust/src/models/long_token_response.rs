/*
 * C2M API v2 - Auth Overlay
 *
 * API for submitting documents with various routing options
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LongTokenResponse {
    #[serde(rename = "token_type")]
    pub token_type: TokenType,
    /// Long-lived token (opaque or JWT depending on deployment)
    #[serde(rename = "access_token")]
    pub access_token: String,
    /// Lifetime in seconds
    #[serde(rename = "expires_in")]
    pub expires_in: i32,
    /// ISO 8601 timestamp of expiration
    #[serde(rename = "expires_at")]
    pub expires_at: String,
    /// Granted scopes
    #[serde(rename = "scopes", skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// Server-issued identifier for this token
    #[serde(rename = "token_id", skip_serializing_if = "Option::is_none")]
    pub token_id: Option<String>,
}

impl LongTokenResponse {
    pub fn new(token_type: TokenType, access_token: String, expires_in: i32, expires_at: String) -> LongTokenResponse {
        LongTokenResponse {
            token_type,
            access_token,
            expires_in,
            expires_at,
            scopes: None,
            token_id: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TokenType {
    #[serde(rename = "Bearer")]
    Bearer,
}

impl Default for TokenType {
    fn default() -> TokenType {
        Self::Bearer
    }
}

