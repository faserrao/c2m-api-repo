//
// AuthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthAPI {

    /**
     Issue or rotate a long-term token
     
     - parameter longTokenRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func issueLongTermToken(longTokenRequest: LongTokenRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LongTokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return issueLongTermTokenWithRequestBuilder(longTokenRequest: longTokenRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issue or rotate a long-term token
     - POST /auth/tokens/long
     - Issues a long-term token (e.g., 30-90 days) for automation or server-to-server use. Requires step-up authentication. Choose one of the supported grant types:  - `client_credentials` + `client_secret` - `client_credentials` + one-time `otp_code` - `assertion` (e.g., signed JWT by your private key) - Or an existing short-term token with the `tokens:write` scope  Only one mechanism is required per call. 
     - Bearer Token:
       - type: http
       - name: ShortTokenAuth
     - API Key:
       - type: apiKey X-Client-Id (HEADER)
       - name: ClientKey
     - responseHeaders: [X-Token-Id(String)]
     - parameter longTokenRequest: (body)  
     - returns: RequestBuilder<LongTokenResponse> 
     */
    open class func issueLongTermTokenWithRequestBuilder(longTokenRequest: LongTokenRequest) -> RequestBuilder<LongTokenResponse> {
        let localVariablePath = "/auth/tokens/long"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: longTokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LongTokenResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Issue a short-term access token
     
     - parameter shortTokenRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func issueShortTermToken(shortTokenRequest: ShortTokenRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShortTokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return issueShortTermTokenWithRequestBuilder(shortTokenRequest: shortTokenRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issue a short-term access token
     - POST /auth/tokens/short
     - Exchange a valid long-term token for a short-lived JWT (e.g., 15 minutes). The long-term token must be sent in the Authorization header as `Bearer <long_token>`. 
     - Bearer Token:
       - type: http
       - name: LongTokenAuth
     - parameter shortTokenRequest: (body)  (optional)
     - returns: RequestBuilder<ShortTokenResponse> 
     */
    open class func issueShortTermTokenWithRequestBuilder(shortTokenRequest: ShortTokenRequest? = nil) -> RequestBuilder<ShortTokenResponse> {
        let localVariablePath = "/auth/tokens/short"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shortTokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShortTokenResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Revoke a token
     
     - parameter tokenId: (path) The token ID to revoke 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func revokeToken(tokenId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return revokeTokenWithRequestBuilder(tokenId: tokenId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Revoke a token
     - POST /auth/tokens/{tokenId}/revoke
     - Revokes a short- or long-term token by its `tokenId`. Idempotent.
     - Bearer Token:
       - type: http
       - name: LongTokenAuth
     - Bearer Token:
       - type: http
       - name: ShortTokenAuth
     - parameter tokenId: (path) The token ID to revoke 
     - returns: RequestBuilder<Void> 
     */
    open class func revokeTokenWithRequestBuilder(tokenId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/auth/tokens/{tokenId}/revoke"
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
