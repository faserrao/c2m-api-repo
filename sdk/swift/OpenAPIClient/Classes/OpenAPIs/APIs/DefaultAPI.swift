//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**
     Operation for /jobs/multi-doc-merge
     
     - parameter mergeMultiDocParamsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mergeMultiDocParams(mergeMultiDocParamsRequest: MergeMultiDocParamsRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: StandardResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return mergeMultiDocParamsWithRequestBuilder(mergeMultiDocParamsRequest: mergeMultiDocParamsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Operation for /jobs/multi-doc-merge
     - POST /jobs/multi-doc-merge
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter mergeMultiDocParamsRequest: (body)  
     - returns: RequestBuilder<StandardResponse> 
     */
    open class func mergeMultiDocParamsWithRequestBuilder(mergeMultiDocParamsRequest: MergeMultiDocParamsRequest) -> RequestBuilder<StandardResponse> {
        let localVariablePath = "/jobs/multi-doc-merge"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mergeMultiDocParamsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StandardResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Operation for /jobs/multi-doc-merge-job-template
     
     - parameter mergeMultiDocWithTemplateParamsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mergeMultiDocWithTemplateParams(mergeMultiDocWithTemplateParamsRequest: MergeMultiDocWithTemplateParamsRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: StandardResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return mergeMultiDocWithTemplateParamsWithRequestBuilder(mergeMultiDocWithTemplateParamsRequest: mergeMultiDocWithTemplateParamsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Operation for /jobs/multi-doc-merge-job-template
     - POST /jobs/multi-doc-merge-job-template
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter mergeMultiDocWithTemplateParamsRequest: (body)  
     - returns: RequestBuilder<StandardResponse> 
     */
    open class func mergeMultiDocWithTemplateParamsWithRequestBuilder(mergeMultiDocWithTemplateParamsRequest: MergeMultiDocWithTemplateParamsRequest) -> RequestBuilder<StandardResponse> {
        let localVariablePath = "/jobs/multi-doc-merge-job-template"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mergeMultiDocWithTemplateParamsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StandardResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Operation for /jobs/multi-pdf-address-capture
     
     - parameter multiPdfWithCaptureParamsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func multiPdfWithCaptureParams(multiPdfWithCaptureParamsRequest: MultiPdfWithCaptureParamsRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: StandardResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return multiPdfWithCaptureParamsWithRequestBuilder(multiPdfWithCaptureParamsRequest: multiPdfWithCaptureParamsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Operation for /jobs/multi-pdf-address-capture
     - POST /jobs/multi-pdf-address-capture
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter multiPdfWithCaptureParamsRequest: (body)  
     - returns: RequestBuilder<StandardResponse> 
     */
    open class func multiPdfWithCaptureParamsWithRequestBuilder(multiPdfWithCaptureParamsRequest: MultiPdfWithCaptureParamsRequest) -> RequestBuilder<StandardResponse> {
        let localVariablePath = "/jobs/multi-pdf-address-capture"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: multiPdfWithCaptureParamsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StandardResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Operation for /jobs/single-doc
     
     - parameter singleDocJobParamsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func singleDocJobParams(singleDocJobParamsRequest: SingleDocJobParamsRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: StandardResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return singleDocJobParamsWithRequestBuilder(singleDocJobParamsRequest: singleDocJobParamsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Operation for /jobs/single-doc
     - POST /jobs/single-doc
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter singleDocJobParamsRequest: (body)  
     - returns: RequestBuilder<StandardResponse> 
     */
    open class func singleDocJobParamsWithRequestBuilder(singleDocJobParamsRequest: SingleDocJobParamsRequest) -> RequestBuilder<StandardResponse> {
        let localVariablePath = "/jobs/single-doc"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: singleDocJobParamsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StandardResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Operation for /jobs/single-pdf-split
     
     - parameter splitPdfParamsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func splitPdfParams(splitPdfParamsRequest: SplitPdfParamsRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: StandardResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return splitPdfParamsWithRequestBuilder(splitPdfParamsRequest: splitPdfParamsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Operation for /jobs/single-pdf-split
     - POST /jobs/single-pdf-split
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter splitPdfParamsRequest: (body)  
     - returns: RequestBuilder<StandardResponse> 
     */
    open class func splitPdfParamsWithRequestBuilder(splitPdfParamsRequest: SplitPdfParamsRequest) -> RequestBuilder<StandardResponse> {
        let localVariablePath = "/jobs/single-pdf-split"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: splitPdfParamsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StandardResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Operation for /jobs/single-pdf-split-addressCapture
     
     - parameter splitPdfWithCaptureParamsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func splitPdfWithCaptureParams(splitPdfWithCaptureParamsRequest: SplitPdfWithCaptureParamsRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: StandardResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return splitPdfWithCaptureParamsWithRequestBuilder(splitPdfWithCaptureParamsRequest: splitPdfWithCaptureParamsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Operation for /jobs/single-pdf-split-addressCapture
     - POST /jobs/single-pdf-split-addressCapture
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter splitPdfWithCaptureParamsRequest: (body)  
     - returns: RequestBuilder<StandardResponse> 
     */
    open class func splitPdfWithCaptureParamsWithRequestBuilder(splitPdfWithCaptureParamsRequest: SplitPdfWithCaptureParamsRequest) -> RequestBuilder<StandardResponse> {
        let localVariablePath = "/jobs/single-pdf-split-addressCapture"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: splitPdfWithCaptureParamsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StandardResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Operation for /jobs/multi-doc
     
     - parameter submitMultiDocParamsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func submitMultiDocParams(submitMultiDocParamsRequest: SubmitMultiDocParamsRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: StandardResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return submitMultiDocParamsWithRequestBuilder(submitMultiDocParamsRequest: submitMultiDocParamsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Operation for /jobs/multi-doc
     - POST /jobs/multi-doc
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter submitMultiDocParamsRequest: (body)  
     - returns: RequestBuilder<StandardResponse> 
     */
    open class func submitMultiDocParamsWithRequestBuilder(submitMultiDocParamsRequest: SubmitMultiDocParamsRequest) -> RequestBuilder<StandardResponse> {
        let localVariablePath = "/jobs/multi-doc"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: submitMultiDocParamsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StandardResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Operation for /jobs/multi-docs-job-template
     
     - parameter submitMultiDocWithTemplateParamsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func submitMultiDocWithTemplateParams(submitMultiDocWithTemplateParamsRequest: SubmitMultiDocWithTemplateParamsRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: StandardResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return submitMultiDocWithTemplateParamsWithRequestBuilder(submitMultiDocWithTemplateParamsRequest: submitMultiDocWithTemplateParamsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Operation for /jobs/multi-docs-job-template
     - POST /jobs/multi-docs-job-template
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter submitMultiDocWithTemplateParamsRequest: (body)  
     - returns: RequestBuilder<StandardResponse> 
     */
    open class func submitMultiDocWithTemplateParamsWithRequestBuilder(submitMultiDocWithTemplateParamsRequest: SubmitMultiDocWithTemplateParamsRequest) -> RequestBuilder<StandardResponse> {
        let localVariablePath = "/jobs/multi-docs-job-template"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: submitMultiDocWithTemplateParamsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StandardResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Operation for /jobs/single-doc-job-template
     
     - parameter submitSingleDocWithTemplateParamsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func submitSingleDocWithTemplateParams(submitSingleDocWithTemplateParamsRequest: SubmitSingleDocWithTemplateParamsRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: StandardResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return submitSingleDocWithTemplateParamsWithRequestBuilder(submitSingleDocWithTemplateParamsRequest: submitSingleDocWithTemplateParamsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Operation for /jobs/single-doc-job-template
     - POST /jobs/single-doc-job-template
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter submitSingleDocWithTemplateParamsRequest: (body)  
     - returns: RequestBuilder<StandardResponse> 
     */
    open class func submitSingleDocWithTemplateParamsWithRequestBuilder(submitSingleDocWithTemplateParamsRequest: SubmitSingleDocWithTemplateParamsRequest) -> RequestBuilder<StandardResponse> {
        let localVariablePath = "/jobs/single-doc-job-template"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: submitSingleDocWithTemplateParamsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StandardResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
