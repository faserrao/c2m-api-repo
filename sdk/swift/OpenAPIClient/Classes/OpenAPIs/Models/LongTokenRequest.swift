//
// LongTokenRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** One of several credential mechanisms must be provided. */
public struct LongTokenRequest: Codable, JSONEncodable, Hashable {

    public enum GrantType: String, Codable, CaseIterable {
        case clientCredentials = "client_credentials"
        case assertion = "assertion"
    }
    public static let ttlSecondsRule = NumericRule<Int>(minimum: 3600, exclusiveMinimum: false, maximum: 7776000, exclusiveMaximum: false, multipleOf: nil)
    /** The authentication grant type */
    public var grantType: GrantType
    /** Client identifier issued by Click2Mail */
    public var clientId: String
    /** Required if using client_credentials with secret */
    public var clientSecret: String?
    /** Required if your policy mandates OTP for issuance */
    public var otpCode: String?
    /** Required when grant_type=assertion */
    public var assertionType: String?
    /** Signed JWT or other accepted assertion */
    public var assertion: String?
    /** Scopes to assign to the long-term token */
    public var scopes: [String]?
    /** Requested lifetime (1 hour - 90 days). Server may clamp. */
    public var ttlSeconds: Int?

    public init(grantType: GrantType, clientId: String, clientSecret: String? = nil, otpCode: String? = nil, assertionType: String? = nil, assertion: String? = nil, scopes: [String]? = nil, ttlSeconds: Int? = nil) {
        self.grantType = grantType
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.otpCode = otpCode
        self.assertionType = assertionType
        self.assertion = assertion
        self.scopes = scopes
        self.ttlSeconds = ttlSeconds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case grantType = "grant_type"
        case clientId = "client_id"
        case clientSecret = "client_secret"
        case otpCode = "otp_code"
        case assertionType = "assertion_type"
        case assertion
        case scopes
        case ttlSeconds = "ttl_seconds"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(grantType, forKey: .grantType)
        try container.encode(clientId, forKey: .clientId)
        try container.encodeIfPresent(clientSecret, forKey: .clientSecret)
        try container.encodeIfPresent(otpCode, forKey: .otpCode)
        try container.encodeIfPresent(assertionType, forKey: .assertionType)
        try container.encodeIfPresent(assertion, forKey: .assertion)
        try container.encodeIfPresent(scopes, forKey: .scopes)
        try container.encodeIfPresent(ttlSeconds, forKey: .ttlSeconds)
    }
}

