//
// LongTokenResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LongTokenResponse: Codable, JSONEncodable, Hashable {

    public enum TokenType: String, Codable, CaseIterable {
        case bearer = "Bearer"
    }
    public var tokenType: TokenType
    /** Long-lived token (opaque or JWT depending on deployment) */
    public var accessToken: String
    /** Lifetime in seconds */
    public var expiresIn: Int
    /** ISO 8601 timestamp of expiration */
    public var expiresAt: Date
    /** Granted scopes */
    public var scopes: [String]?
    /** Server-issued identifier for this token */
    public var tokenId: String?

    public init(tokenType: TokenType, accessToken: String, expiresIn: Int, expiresAt: Date, scopes: [String]? = nil, tokenId: String? = nil) {
        self.tokenType = tokenType
        self.accessToken = accessToken
        self.expiresIn = expiresIn
        self.expiresAt = expiresAt
        self.scopes = scopes
        self.tokenId = tokenId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case tokenType = "token_type"
        case accessToken = "access_token"
        case expiresIn = "expires_in"
        case expiresAt = "expires_at"
        case scopes
        case tokenId = "token_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(tokenType, forKey: .tokenType)
        try container.encode(accessToken, forKey: .accessToken)
        try container.encode(expiresIn, forKey: .expiresIn)
        try container.encode(expiresAt, forKey: .expiresAt)
        try container.encodeIfPresent(scopes, forKey: .scopes)
        try container.encodeIfPresent(tokenId, forKey: .tokenId)
    }
}

