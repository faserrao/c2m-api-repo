//
// PaymentDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum PaymentDetails: Codable, JSONEncodable, Hashable {
    case typeAchPayment(AchPayment)
    case typeApplePayPayment(ApplePayPayment)
    case typeCreditCardPayment(CreditCardPayment)
    case typeGooglePayPayment(GooglePayPayment)
    case typeInvoicePayment(InvoicePayment)
    case typeUserCreditPayment(UserCreditPayment)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeAchPayment(let value):
            try container.encode(value)
        case .typeApplePayPayment(let value):
            try container.encode(value)
        case .typeCreditCardPayment(let value):
            try container.encode(value)
        case .typeGooglePayPayment(let value):
            try container.encode(value)
        case .typeInvoicePayment(let value):
            try container.encode(value)
        case .typeUserCreditPayment(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(AchPayment.self) {
            self = .typeAchPayment(value)
        } else if let value = try? container.decode(ApplePayPayment.self) {
            self = .typeApplePayPayment(value)
        } else if let value = try? container.decode(CreditCardPayment.self) {
            self = .typeCreditCardPayment(value)
        } else if let value = try? container.decode(GooglePayPayment.self) {
            self = .typeGooglePayPayment(value)
        } else if let value = try? container.decode(InvoicePayment.self) {
            self = .typeInvoicePayment(value)
        } else if let value = try? container.decode(UserCreditPayment.self) {
            self = .typeUserCreditPayment(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of PaymentDetails"))
        }
    }
}

