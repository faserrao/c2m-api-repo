//
// RecipientAddress.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RecipientAddress: Codable, JSONEncodable, Hashable {

    public var firstName: String
    public var lastName: String
    public var address1: String
    public var city: String
    public var state: String
    public var zip: String
    public var country: String
    public var nickName: String?
    public var address2: String?
    public var address3: String?
    public var phoneNumber: String?

    public init(firstName: String, lastName: String, address1: String, city: String, state: String, zip: String, country: String, nickName: String? = nil, address2: String? = nil, address3: String? = nil, phoneNumber: String? = nil) {
        self.firstName = firstName
        self.lastName = lastName
        self.address1 = address1
        self.city = city
        self.state = state
        self.zip = zip
        self.country = country
        self.nickName = nickName
        self.address2 = address2
        self.address3 = address3
        self.phoneNumber = phoneNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case firstName
        case lastName
        case address1
        case city
        case state
        case zip
        case country
        case nickName
        case address2
        case address3
        case phoneNumber
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(firstName, forKey: .firstName)
        try container.encode(lastName, forKey: .lastName)
        try container.encode(address1, forKey: .address1)
        try container.encode(city, forKey: .city)
        try container.encode(state, forKey: .state)
        try container.encode(zip, forKey: .zip)
        try container.encode(country, forKey: .country)
        try container.encodeIfPresent(nickName, forKey: .nickName)
        try container.encodeIfPresent(address2, forKey: .address2)
        try container.encodeIfPresent(address3, forKey: .address3)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
    }
}

